
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009940  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08009b10  08009b10  00019b10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fd4  08009fd4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009fd4  08009fd4  00019fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fdc  08009fdc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fdc  08009fdc  00019fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fe0  08009fe0  00019fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  200001e8  0800a1cc  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  0800a1cc  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffa8  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021dd  00000000  00000000  000301c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  000323a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  000331f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023dd3  00000000  00000000  00033f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010eeb  00000000  00000000  00057d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000deb83  00000000  00000000  00068c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001477b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005224  00000000  00000000  0014780c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009af8 	.word	0x08009af8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08009af8 	.word	0x08009af8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103c:	f000 fdf2 	bl	8001c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001040:	f000 f886 	bl	8001150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001044:	f000 fa0a 	bl	800145c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001048:	f000 f9de 	bl	8001408 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800104c:	f000 f8ee 	bl	800122c <MX_ADC1_Init>
  MX_TIM10_Init();
 8001050:	f000 f9b6 	bl	80013c0 <MX_TIM10_Init>
  MX_TIM1_Init();
 8001054:	f000 f93e 	bl	80012d4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8001058:	482d      	ldr	r0, [pc, #180]	; (8001110 <main+0xd8>)
 800105a:	f002 fb99 	bl	8003790 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim1);
 800105e:	482d      	ldr	r0, [pc, #180]	; (8001114 <main+0xdc>)
 8001060:	f002 fb2e 	bl	80036c0 <HAL_TIM_Base_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_IT(&huart2, &rx, sizeof(rx));
 8001064:	2202      	movs	r2, #2
 8001066:	492c      	ldr	r1, [pc, #176]	; (8001118 <main+0xe0>)
 8001068:	482c      	ldr	r0, [pc, #176]	; (800111c <main+0xe4>)
 800106a:	f003 f983 	bl	8004374 <HAL_UART_Receive_IT>
	  //Receiving command from Tago.io

	  HAL_ADC_Start(&hadc1);
 800106e:	482c      	ldr	r0, [pc, #176]	; (8001120 <main+0xe8>)
 8001070:	f000 fe8e 	bl	8001d90 <HAL_ADC_Start>
	  ad = HAL_ADC_GetValue(&hadc1);
 8001074:	482a      	ldr	r0, [pc, #168]	; (8001120 <main+0xe8>)
 8001076:	f000 ff5d 	bl	8001f34 <HAL_ADC_GetValue>
 800107a:	ee07 0a90 	vmov	s15, r0
 800107e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <main+0xec>)
 8001084:	edc3 7a00 	vstr	s15, [r3]
	  tensao_ad_conv = (ad/310);
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <main+0xec>)
 800108a:	ed93 7a00 	vldr	s14, [r3]
 800108e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8001128 <main+0xf0>
 8001092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001096:	4b25      	ldr	r3, [pc, #148]	; (800112c <main+0xf4>)
 8001098:	edc3 7a00 	vstr	s15, [r3]
	  //Measuring AD Voltage

	  angulo_descida = (angulo_subida + 5);
 800109c:	4b24      	ldr	r3, [pc, #144]	; (8001130 <main+0xf8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	3305      	adds	r3, #5
 80010a2:	4a24      	ldr	r2, [pc, #144]	; (8001134 <main+0xfc>)
 80010a4:	6013      	str	r3, [r2, #0]
	  //Pulse width
	  erro = (tensao_temperatura - tensao_ad_conv);
 80010a6:	4b24      	ldr	r3, [pc, #144]	; (8001138 <main+0x100>)
 80010a8:	ed93 7a00 	vldr	s14, [r3]
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <main+0xf4>)
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b6:	4b21      	ldr	r3, [pc, #132]	; (800113c <main+0x104>)
 80010b8:	edc3 7a00 	vstr	s15, [r3]
	  //Error feedback

	  arr = __HAL_TIM_GET_COUNTER(&htim1);
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <main+0xdc>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <main+0x108>)
 80010c6:	601a      	str	r2, [r3, #0]

	  if(arr>=angulo_subida && arr<=angulo_descida)
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <main+0x108>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <main+0xf8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	db0b      	blt.n	80010ec <main+0xb4>
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <main+0x108>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b16      	ldr	r3, [pc, #88]	; (8001134 <main+0xfc>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	dc05      	bgt.n	80010ec <main+0xb4>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2102      	movs	r1, #2
 80010e4:	4817      	ldr	r0, [pc, #92]	; (8001144 <main+0x10c>)
 80010e6:	f001 fc99 	bl	8002a1c <HAL_GPIO_WritePin>
 80010ea:	e004      	b.n	80010f6 <main+0xbe>
	  }

	  else
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2102      	movs	r1, #2
 80010f0:	4814      	ldr	r0, [pc, #80]	; (8001144 <main+0x10c>)
 80010f2:	f001 fc93 	bl	8002a1c <HAL_GPIO_WritePin>
	  }

	  if(erro>0)
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <main+0x104>)
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001104:	dd02      	ble.n	800110c <main+0xd4>
	  {
		  constante = 5;
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <main+0x110>)
 8001108:	4a10      	ldr	r2, [pc, #64]	; (800114c <main+0x114>)
 800110a:	601a      	str	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart2, &rx, sizeof(rx));
 800110c:	e7aa      	b.n	8001064 <main+0x2c>
 800110e:	bf00      	nop
 8001110:	20000294 	.word	0x20000294
 8001114:	2000024c 	.word	0x2000024c
 8001118:	2000033c 	.word	0x2000033c
 800111c:	200002dc 	.word	0x200002dc
 8001120:	20000204 	.word	0x20000204
 8001124:	20000320 	.word	0x20000320
 8001128:	439b0000 	.word	0x439b0000
 800112c:	20000324 	.word	0x20000324
 8001130:	20000000 	.word	0x20000000
 8001134:	20000328 	.word	0x20000328
 8001138:	2000032c 	.word	0x2000032c
 800113c:	20000330 	.word	0x20000330
 8001140:	20000338 	.word	0x20000338
 8001144:	40020000 	.word	0x40020000
 8001148:	20000004 	.word	0x20000004
 800114c:	40a00000 	.word	0x40a00000

08001150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b094      	sub	sp, #80	; 0x50
 8001154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	2234      	movs	r2, #52	; 0x34
 800115c:	2100      	movs	r1, #0
 800115e:	4618      	mov	r0, r3
 8001160:	f004 f852 	bl	8005208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <SystemClock_Config+0xd4>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	4a29      	ldr	r2, [pc, #164]	; (8001224 <SystemClock_Config+0xd4>)
 800117e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001182:	6413      	str	r3, [r2, #64]	; 0x40
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <SystemClock_Config+0xd4>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	4b24      	ldr	r3, [pc, #144]	; (8001228 <SystemClock_Config+0xd8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800119c:	4a22      	ldr	r2, [pc, #136]	; (8001228 <SystemClock_Config+0xd8>)
 800119e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b20      	ldr	r3, [pc, #128]	; (8001228 <SystemClock_Config+0xd8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2310      	movs	r3, #16
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011c4:	2310      	movs	r3, #16
 80011c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011c8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011ce:	2304      	movs	r3, #4
 80011d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011d6:	2302      	movs	r3, #2
 80011d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 ff80 	bl	80030e4 <HAL_RCC_OscConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011ea:	f000 faa7 	bl	800173c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ee:	230f      	movs	r3, #15
 80011f0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f2:	2302      	movs	r3, #2
 80011f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001200:	2300      	movs	r3, #0
 8001202:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	2102      	movs	r1, #2
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fc20 	bl	8002a50 <HAL_RCC_ClockConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001216:	f000 fa91 	bl	800173c <Error_Handler>
  }
}
 800121a:	bf00      	nop
 800121c:	3750      	adds	r7, #80	; 0x50
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40007000 	.word	0x40007000

0800122c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	463b      	mov	r3, r7
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <MX_ADC1_Init+0x9c>)
 8001240:	4a22      	ldr	r2, [pc, #136]	; (80012cc <MX_ADC1_Init+0xa0>)
 8001242:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001244:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <MX_ADC1_Init+0x9c>)
 8001246:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800124a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800124c:	4b1e      	ldr	r3, [pc, #120]	; (80012c8 <MX_ADC1_Init+0x9c>)
 800124e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001252:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_ADC1_Init+0x9c>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_ADC1_Init+0x9c>)
 800125c:	2200      	movs	r2, #0
 800125e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_ADC1_Init+0x9c>)
 8001262:	2200      	movs	r2, #0
 8001264:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_ADC1_Init+0x9c>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_ADC1_Init+0x9c>)
 8001270:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <MX_ADC1_Init+0xa4>)
 8001272:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_ADC1_Init+0x9c>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_ADC1_Init+0x9c>)
 800127c:	2201      	movs	r2, #1
 800127e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_ADC1_Init+0x9c>)
 8001282:	2200      	movs	r2, #0
 8001284:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_ADC1_Init+0x9c>)
 800128a:	2201      	movs	r2, #1
 800128c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <MX_ADC1_Init+0x9c>)
 8001290:	f000 fd3a 	bl	8001d08 <HAL_ADC_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800129a:	f000 fa4f 	bl	800173c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800129e:	2300      	movs	r3, #0
 80012a0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012aa:	463b      	mov	r3, r7
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	; (80012c8 <MX_ADC1_Init+0x9c>)
 80012b0:	f000 fe4e 	bl	8001f50 <HAL_ADC_ConfigChannel>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012ba:	f000 fa3f 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000204 	.word	0x20000204
 80012cc:	40012000 	.word	0x40012000
 80012d0:	0f000001 	.word	0x0f000001

080012d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08c      	sub	sp, #48	; 0x30
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001300:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <MX_TIM1_Init+0xe4>)
 8001302:	4a2e      	ldr	r2, [pc, #184]	; (80013bc <MX_TIM1_Init+0xe8>)
 8001304:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3872;
 8001306:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <MX_TIM1_Init+0xe4>)
 8001308:	f44f 6272 	mov.w	r2, #3872	; 0xf20
 800130c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <MX_TIM1_Init+0xe4>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 179;
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_TIM1_Init+0xe4>)
 8001316:	22b3      	movs	r2, #179	; 0xb3
 8001318:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <MX_TIM1_Init+0xe4>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_TIM1_Init+0xe4>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <MX_TIM1_Init+0xe4>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800132c:	4822      	ldr	r0, [pc, #136]	; (80013b8 <MX_TIM1_Init+0xe4>)
 800132e:	f002 f977 	bl	8003620 <HAL_TIM_Base_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001338:	f000 fa00 	bl	800173c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001342:	f107 0320 	add.w	r3, r7, #32
 8001346:	4619      	mov	r1, r3
 8001348:	481b      	ldr	r0, [pc, #108]	; (80013b8 <MX_TIM1_Init+0xe4>)
 800134a:	f002 fbf3 	bl	8003b34 <HAL_TIM_ConfigClockSource>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001354:	f000 f9f2 	bl	800173c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_SINGLE) != HAL_OK)
 8001358:	2108      	movs	r1, #8
 800135a:	4817      	ldr	r0, [pc, #92]	; (80013b8 <MX_TIM1_Init+0xe4>)
 800135c:	f002 fa88 	bl	8003870 <HAL_TIM_OnePulse_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001366:	f000 f9e9 	bl	800173c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800136a:	2306      	movs	r3, #6
 800136c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800136e:	2370      	movs	r3, #112	; 0x70
 8001370:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_TIM1_Init+0xe4>)
 8001386:	f002 fc9c 	bl	8003cc2 <HAL_TIM_SlaveConfigSynchro>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001390:	f000 f9d4 	bl	800173c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_TIM1_Init+0xe4>)
 80013a2:	f002 fec5 	bl	8004130 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80013ac:	f000 f9c6 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3730      	adds	r7, #48	; 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	2000024c 	.word	0x2000024c
 80013bc:	40010000 	.word	0x40010000

080013c0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80013c4:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_TIM10_Init+0x40>)
 80013c6:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <MX_TIM10_Init+0x44>)
 80013c8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4199;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <MX_TIM10_Init+0x40>)
 80013cc:	f241 0267 	movw	r2, #4199	; 0x1067
 80013d0:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_TIM10_Init+0x40>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2499;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_TIM10_Init+0x40>)
 80013da:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80013de:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <MX_TIM10_Init+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_TIM10_Init+0x40>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013ec:	4804      	ldr	r0, [pc, #16]	; (8001400 <MX_TIM10_Init+0x40>)
 80013ee:	f002 f917 	bl	8003620 <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80013f8:	f000 f9a0 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000294 	.word	0x20000294
 8001404:	40014400 	.word	0x40014400

08001408 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800140e:	4a12      	ldr	r2, [pc, #72]	; (8001458 <MX_USART2_UART_Init+0x50>)
 8001410:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001414:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001418:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800141c:	2200      	movs	r2, #0
 800141e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001426:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800142c:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800142e:	220c      	movs	r2, #12
 8001430:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 800143a:	2200      	movs	r2, #0
 800143c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <MX_USART2_UART_Init+0x4c>)
 8001440:	f002 ff06 	bl	8004250 <HAL_UART_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800144a:	f000 f977 	bl	800173c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200002dc 	.word	0x200002dc
 8001458:	40004400 	.word	0x40004400

0800145c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	; 0x28
 8001460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]
 800146c:	609a      	str	r2, [r3, #8]
 800146e:	60da      	str	r2, [r3, #12]
 8001470:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b2d      	ldr	r3, [pc, #180]	; (800152c <MX_GPIO_Init+0xd0>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a2c      	ldr	r2, [pc, #176]	; (800152c <MX_GPIO_Init+0xd0>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b2a      	ldr	r3, [pc, #168]	; (800152c <MX_GPIO_Init+0xd0>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <MX_GPIO_Init+0xd0>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a25      	ldr	r2, [pc, #148]	; (800152c <MX_GPIO_Init+0xd0>)
 8001498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b23      	ldr	r3, [pc, #140]	; (800152c <MX_GPIO_Init+0xd0>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b1f      	ldr	r3, [pc, #124]	; (800152c <MX_GPIO_Init+0xd0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a1e      	ldr	r2, [pc, #120]	; (800152c <MX_GPIO_Init+0xd0>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_GPIO_Init+0xd0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_GPIO_Init+0xd0>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <MX_GPIO_Init+0xd0>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_GPIO_Init+0xd0>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2122      	movs	r1, #34	; 0x22
 80014e6:	4812      	ldr	r0, [pc, #72]	; (8001530 <MX_GPIO_Init+0xd4>)
 80014e8:	f001 fa98 	bl	8002a1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	480c      	ldr	r0, [pc, #48]	; (8001534 <MX_GPIO_Init+0xd8>)
 8001504:	f001 f8f6 	bl	80026f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8001508:	2322      	movs	r3, #34	; 0x22
 800150a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150c:	2301      	movs	r3, #1
 800150e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001518:	f107 0314 	add.w	r3, r7, #20
 800151c:	4619      	mov	r1, r3
 800151e:	4804      	ldr	r0, [pc, #16]	; (8001530 <MX_GPIO_Init+0xd4>)
 8001520:	f001 f8e8 	bl	80026f4 <HAL_GPIO_Init>

}
 8001524:	bf00      	nop
 8001526:	3728      	adds	r7, #40	; 0x28
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000
 8001534:	40020800 	.word	0x40020800

08001538 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
		temp = (((rx[0]-'0')*10) + (rx[1]-'0'));
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_UART_RxCpltCallback+0x78>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	461a      	mov	r2, r3
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_UART_RxCpltCallback+0x78>)
 8001554:	785b      	ldrb	r3, [r3, #1]
 8001556:	3b30      	subs	r3, #48	; 0x30
 8001558:	4413      	add	r3, r2
 800155a:	4a16      	ldr	r2, [pc, #88]	; (80015b4 <HAL_UART_RxCpltCallback+0x7c>)
 800155c:	6013      	str	r3, [r2, #0]
		tensao_temperatura = (-0.0349 * temp) + 3.36;
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <HAL_UART_RxCpltCallback+0x7c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe fffe 	bl	8000564 <__aeabi_i2d>
 8001568:	a30d      	add	r3, pc, #52	; (adr r3, 80015a0 <HAL_UART_RxCpltCallback+0x68>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f863 	bl	8000638 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	a30b      	add	r3, pc, #44	; (adr r3, 80015a8 <HAL_UART_RxCpltCallback+0x70>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7fe fea4 	bl	80002cc <__adddf3>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	f7ff fb4c 	bl	8000c28 <__aeabi_d2f>
 8001590:	4603      	mov	r3, r0
 8001592:	4a09      	ldr	r2, [pc, #36]	; (80015b8 <HAL_UART_RxCpltCallback+0x80>)
 8001594:	6013      	str	r3, [r2, #0]
		//NTC Tendency line
	}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	ad42c3ca 	.word	0xad42c3ca
 80015a4:	bfa1de69 	.word	0xbfa1de69
 80015a8:	ae147ae1 	.word	0xae147ae1
 80015ac:	400ae147 	.word	0x400ae147
 80015b0:	2000033c 	.word	0x2000033c
 80015b4:	20000348 	.word	0x20000348
 80015b8:	2000032c 	.word	0x2000032c

080015bc <HAL_UART_TxCpltCallback>:
	//Receiving and decoding information from USART

	void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
	{}
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <HAL_TIM_PeriodElapsedCallback>:

	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
	{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
		realTemp = (tensao_ad_conv - 3.36) / -0.0349;
 80015d8:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffd3 	bl	8000588 <__aeabi_f2d>
 80015e2:	a349      	add	r3, pc, #292	; (adr r3, 8001708 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80015e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e8:	f7fe fe6e 	bl	80002c8 <__aeabi_dsub>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	a346      	add	r3, pc, #280	; (adr r3, 8001710 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7ff f947 	bl	800088c <__aeabi_ddiv>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4610      	mov	r0, r2
 8001604:	4619      	mov	r1, r3
 8001606:	f7ff fb0f 	bl	8000c28 <__aeabi_d2f>
 800160a:	4603      	mov	r3, r0
 800160c:	4a43      	ldr	r2, [pc, #268]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800160e:	6013      	str	r3, [r2, #0]
		sprintf(msg,"%.1f\r\n",realTemp);
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ffb7 	bl	8000588 <__aeabi_f2d>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4940      	ldr	r1, [pc, #256]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001620:	4840      	ldr	r0, [pc, #256]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001622:	f004 fc79 	bl	8005f18 <siprintf>
		HAL_UART_Transmit_IT(&huart2, msg, sizeof(msg));
 8001626:	2206      	movs	r2, #6
 8001628:	493e      	ldr	r1, [pc, #248]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800162a:	483f      	ldr	r0, [pc, #252]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800162c:	f002 fe5d 	bl	80042ea <HAL_UART_Transmit_IT>
		//Transmiting information from actual temperature on Thermical Chamber
		i+=0.125;
 8001630:	4b3e      	ldr	r3, [pc, #248]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001632:	edd3 7a00 	vldr	s15, [r3]
 8001636:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800163a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800163e:	4b3b      	ldr	r3, [pc, #236]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001640:	edc3 7a00 	vstr	s15, [r3]

		if(angulo_subida>=30 && angulo_subida<=170)
 8001644:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b1d      	cmp	r3, #29
 800164a:	dd46      	ble.n	80016da <HAL_TIM_PeriodElapsedCallback+0x10a>
 800164c:	4b38      	ldr	r3, [pc, #224]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2baa      	cmp	r3, #170	; 0xaa
 8001652:	dc42      	bgt.n	80016da <HAL_TIM_PeriodElapsedCallback+0x10a>
		{
			if(erro<0)
 8001654:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001656:	edd3 7a00 	vldr	s15, [r3]
 800165a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	d516      	bpl.n	8001692 <HAL_TIM_PeriodElapsedCallback+0xc2>
			{
				angulo_subida+=((erro*constante));
 8001664:	4b32      	ldr	r3, [pc, #200]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001672:	edd3 6a00 	vldr	s13, [r3]
 8001676:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001684:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001688:	ee17 2a90 	vmov	r2, s15
 800168c:	4b28      	ldr	r3, [pc, #160]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800168e:	601a      	str	r2, [r3, #0]
			if(erro<0)
 8001690:	e033      	b.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x12a>
			}
			else if(erro>0)
 8001692:	4b28      	ldr	r3, [pc, #160]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001694:	edd3 7a00 	vldr	s15, [r3]
 8001698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	dc00      	bgt.n	80016a4 <HAL_TIM_PeriodElapsedCallback+0xd4>
			if(erro<0)
 80016a2:	e02a      	b.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x12a>
			{
				angulo_subida+=((erro*constante)*10);
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	ee07 3a90 	vmov	s15, r3
 80016ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b0:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80016b2:	edd3 6a00 	vldr	s13, [r3]
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80016b8:	edd3 7a00 	vldr	s15, [r3]
 80016bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016c0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80016c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d0:	ee17 2a90 	vmov	r2, s15
 80016d4:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80016d6:	601a      	str	r2, [r3, #0]
			if(erro<0)
 80016d8:	e00f      	b.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x12a>
			}
		}
		else if(angulo_subida<30)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2b1d      	cmp	r3, #29
 80016e0:	dc03      	bgt.n	80016ea <HAL_TIM_PeriodElapsedCallback+0x11a>
		{
			angulo_subida=30;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80016e4:	221e      	movs	r2, #30
 80016e6:	601a      	str	r2, [r3, #0]
		else if(angulo_subida>170)
		{
			angulo_subida=170;
		}
		//Pulse manipulation
	}
 80016e8:	e007      	b.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x12a>
		else if(angulo_subida>170)
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2baa      	cmp	r3, #170	; 0xaa
 80016f0:	dd03      	ble.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x12a>
			angulo_subida=170;
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80016f4:	22aa      	movs	r2, #170	; 0xaa
 80016f6:	601a      	str	r2, [r3, #0]
	}
 80016f8:	e7ff      	b.n	80016fa <HAL_TIM_PeriodElapsedCallback+0x12a>
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	f3af 8000 	nop.w
 8001708:	ae147ae1 	.word	0xae147ae1
 800170c:	400ae147 	.word	0x400ae147
 8001710:	ad42c3ca 	.word	0xad42c3ca
 8001714:	bfa1de69 	.word	0xbfa1de69
 8001718:	20000324 	.word	0x20000324
 800171c:	2000034c 	.word	0x2000034c
 8001720:	08009b10 	.word	0x08009b10
 8001724:	20000340 	.word	0x20000340
 8001728:	200002dc 	.word	0x200002dc
 800172c:	20000334 	.word	0x20000334
 8001730:	20000000 	.word	0x20000000
 8001734:	20000330 	.word	0x20000330
 8001738:	20000004 	.word	0x20000004

0800173c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001740:	b672      	cpsid	i
}
 8001742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001744:	e7fe      	b.n	8001744 <Error_Handler+0x8>
	...

08001748 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	607b      	str	r3, [r7, #4]
 8001752:	4b10      	ldr	r3, [pc, #64]	; (8001794 <HAL_MspInit+0x4c>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	4a0f      	ldr	r2, [pc, #60]	; (8001794 <HAL_MspInit+0x4c>)
 8001758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800175c:	6453      	str	r3, [r2, #68]	; 0x44
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <HAL_MspInit+0x4c>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001762:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_MspInit+0x4c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a08      	ldr	r2, [pc, #32]	; (8001794 <HAL_MspInit+0x4c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_MspInit+0x4c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001786:	2007      	movs	r0, #7
 8001788:	f000 fee0 	bl	800254c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40023800 	.word	0x40023800

08001798 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a17      	ldr	r2, [pc, #92]	; (8001814 <HAL_ADC_MspInit+0x7c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d127      	bne.n	800180a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b16      	ldr	r3, [pc, #88]	; (8001818 <HAL_ADC_MspInit+0x80>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a15      	ldr	r2, [pc, #84]	; (8001818 <HAL_ADC_MspInit+0x80>)
 80017c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_ADC_MspInit+0x80>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_ADC_MspInit+0x80>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <HAL_ADC_MspInit+0x80>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <HAL_ADC_MspInit+0x80>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017f2:	2301      	movs	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017f6:	2303      	movs	r3, #3
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <HAL_ADC_MspInit+0x84>)
 8001806:	f000 ff75 	bl	80026f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40012000 	.word	0x40012000
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000

08001820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	; 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a2b      	ldr	r2, [pc, #172]	; (80018ec <HAL_TIM_Base_MspInit+0xcc>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d135      	bne.n	80018ae <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	4b2a      	ldr	r3, [pc, #168]	; (80018f0 <HAL_TIM_Base_MspInit+0xd0>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	4a29      	ldr	r2, [pc, #164]	; (80018f0 <HAL_TIM_Base_MspInit+0xd0>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6453      	str	r3, [r2, #68]	; 0x44
 8001852:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <HAL_TIM_Base_MspInit+0xd0>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_TIM_Base_MspInit+0xd0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <HAL_TIM_Base_MspInit+0xd0>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_TIM_Base_MspInit+0xd0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA12     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800187a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800188c:	2301      	movs	r3, #1
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4817      	ldr	r0, [pc, #92]	; (80018f4 <HAL_TIM_Base_MspInit+0xd4>)
 8001898:	f000 ff2c 	bl	80026f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2019      	movs	r0, #25
 80018a2:	f000 fe5e 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018a6:	2019      	movs	r0, #25
 80018a8:	f000 fe77 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80018ac:	e01a      	b.n	80018e4 <HAL_TIM_Base_MspInit+0xc4>
  else if(htim_base->Instance==TIM10)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a11      	ldr	r2, [pc, #68]	; (80018f8 <HAL_TIM_Base_MspInit+0xd8>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d115      	bne.n	80018e4 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <HAL_TIM_Base_MspInit+0xd0>)
 80018be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c0:	4a0b      	ldr	r2, [pc, #44]	; (80018f0 <HAL_TIM_Base_MspInit+0xd0>)
 80018c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c6:	6453      	str	r3, [r2, #68]	; 0x44
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_TIM_Base_MspInit+0xd0>)
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	2019      	movs	r0, #25
 80018da:	f000 fe42 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018de:	2019      	movs	r0, #25
 80018e0:	f000 fe5b 	bl	800259a <HAL_NVIC_EnableIRQ>
}
 80018e4:	bf00      	nop
 80018e6:	3728      	adds	r7, #40	; 0x28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40010000 	.word	0x40010000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000
 80018f8:	40014400 	.word	0x40014400

080018fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	609a      	str	r2, [r3, #8]
 8001910:	60da      	str	r2, [r3, #12]
 8001912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <HAL_UART_MspInit+0x94>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d133      	bne.n	8001986 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	4b1c      	ldr	r3, [pc, #112]	; (8001994 <HAL_UART_MspInit+0x98>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a1b      	ldr	r2, [pc, #108]	; (8001994 <HAL_UART_MspInit+0x98>)
 8001928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_UART_MspInit+0x98>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001936:	613b      	str	r3, [r7, #16]
 8001938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <HAL_UART_MspInit+0x98>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a14      	ldr	r2, [pc, #80]	; (8001994 <HAL_UART_MspInit+0x98>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_UART_MspInit+0x98>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	60fb      	str	r3, [r7, #12]
 8001954:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001956:	230c      	movs	r3, #12
 8001958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001966:	2307      	movs	r3, #7
 8001968:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	4809      	ldr	r0, [pc, #36]	; (8001998 <HAL_UART_MspInit+0x9c>)
 8001972:	f000 febf 	bl	80026f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2100      	movs	r1, #0
 800197a:	2026      	movs	r0, #38	; 0x26
 800197c:	f000 fdf1 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001980:	2026      	movs	r0, #38	; 0x26
 8001982:	f000 fe0a 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40004400 	.word	0x40004400
 8001994:	40023800 	.word	0x40023800
 8001998:	40020000 	.word	0x40020000

0800199c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <NMI_Handler+0x4>

080019a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <HardFault_Handler+0x4>

080019a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <MemManage_Handler+0x4>

080019ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <BusFault_Handler+0x4>

080019b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019b8:	e7fe      	b.n	80019b8 <UsageFault_Handler+0x4>

080019ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019e8:	f000 f96e 	bl	8001cc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}

080019f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80019f6:	f001 ff95 	bl	8003924 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80019fc:	f001 ff92 	bl	8003924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a00:	bf00      	nop
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000024c 	.word	0x2000024c
 8001a08:	20000294 	.word	0x20000294

08001a0c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <USART2_IRQHandler+0x10>)
 8001a12:	f002 fcdf 	bl	80043d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a16:	bf00      	nop
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	200002dc 	.word	0x200002dc

08001a20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
	return 1;
 8001a24:	2301      	movs	r3, #1
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_kill>:

int _kill(int pid, int sig)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a3a:	f003 fbbb 	bl	80051b4 <__errno>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2216      	movs	r2, #22
 8001a42:	601a      	str	r2, [r3, #0]
	return -1;
 8001a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <_exit>:

void _exit (int status)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a58:	f04f 31ff 	mov.w	r1, #4294967295
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffe7 	bl	8001a30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a62:	e7fe      	b.n	8001a62 <_exit+0x12>

08001a64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e00a      	b.n	8001a8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a76:	f3af 8000 	nop.w
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	60ba      	str	r2, [r7, #8]
 8001a82:	b2ca      	uxtb	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf0      	blt.n	8001a76 <_read+0x12>
	}

return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b086      	sub	sp, #24
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aaa:	2300      	movs	r3, #0
 8001aac:	617b      	str	r3, [r7, #20]
 8001aae:	e009      	b.n	8001ac4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	60ba      	str	r2, [r7, #8]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	dbf1      	blt.n	8001ab0 <_write+0x12>
	}
	return len;
 8001acc:	687b      	ldr	r3, [r7, #4]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <_close>:

int _close(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	return -1;
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
 8001af6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afe:	605a      	str	r2, [r3, #4]
	return 0;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <_isatty>:

int _isatty(int file)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b083      	sub	sp, #12
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
	return 1;
 8001b16:	2301      	movs	r3, #1
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b48:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <_sbrk+0x5c>)
 8001b4a:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <_sbrk+0x60>)
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b54:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <_sbrk+0x64>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b5c:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <_sbrk+0x64>)
 8001b5e:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <_sbrk+0x68>)
 8001b60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b62:	4b10      	ldr	r3, [pc, #64]	; (8001ba4 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d207      	bcs.n	8001b80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b70:	f003 fb20 	bl	80051b4 <__errno>
 8001b74:	4603      	mov	r3, r0
 8001b76:	220c      	movs	r2, #12
 8001b78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7e:	e009      	b.n	8001b94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b80:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <_sbrk+0x64>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <_sbrk+0x64>)
 8001b90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20020000 	.word	0x20020000
 8001ba0:	00000400 	.word	0x00000400
 8001ba4:	20000350 	.word	0x20000350
 8001ba8:	20000368 	.word	0x20000368

08001bac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <SystemInit+0x20>)
 8001bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb6:	4a05      	ldr	r2, [pc, #20]	; (8001bcc <SystemInit+0x20>)
 8001bb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00

08001bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bd6:	490e      	ldr	r1, [pc, #56]	; (8001c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd8:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bec:	4c0b      	ldr	r4, [pc, #44]	; (8001c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bfa:	f7ff ffd7 	bl	8001bac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfe:	f003 fadf 	bl	80051c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c02:	f7ff fa19 	bl	8001038 <main>
  bx  lr    
 8001c06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c10:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001c14:	08009fe4 	.word	0x08009fe4
  ldr r2, =_sbss
 8001c18:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001c1c:	20000368 	.word	0x20000368

08001c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC_IRQHandler>
	...

08001c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <HAL_Init+0x40>)
 8001c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_Init+0x40>)
 8001c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <HAL_Init+0x40>)
 8001c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f000 fc7d 	bl	800254c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f000 f808 	bl	8001c68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c58:	f7ff fd76 	bl	8001748 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00

08001c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c70:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <HAL_InitTick+0x54>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_InitTick+0x58>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fc95 	bl	80025b6 <HAL_SYSTICK_Config>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00e      	b.n	8001cb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b0f      	cmp	r3, #15
 8001c9a:	d80a      	bhi.n	8001cb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f000 fc5d 	bl	8002562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ca8:	4a06      	ldr	r2, [pc, #24]	; (8001cc4 <HAL_InitTick+0x5c>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e000      	b.n	8001cb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	20000010 	.word	0x20000010
 8001cc4:	2000000c 	.word	0x2000000c

08001cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <HAL_IncTick+0x20>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_IncTick+0x24>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_IncTick+0x24>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000010 	.word	0x20000010
 8001cec:	20000354 	.word	0x20000354

08001cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_GetTick+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000354 	.word	0x20000354

08001d08 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d10:	2300      	movs	r3, #0
 8001d12:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e033      	b.n	8001d86 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d109      	bne.n	8001d3a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f7ff fd36 	bl	8001798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f003 0310 	and.w	r3, r3, #16
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d118      	bne.n	8001d78 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d4e:	f023 0302 	bic.w	r3, r3, #2
 8001d52:	f043 0202 	orr.w	r2, r3, #2
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fa2a 	bl	80021b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f023 0303 	bic.w	r3, r3, #3
 8001d6e:	f043 0201 	orr.w	r2, r3, #1
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40
 8001d76:	e001      	b.n	8001d7c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_Start+0x1a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e0b2      	b.n	8001f10 <HAL_ADC_Start+0x180>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d018      	beq.n	8001df2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001dd0:	4b52      	ldr	r3, [pc, #328]	; (8001f1c <HAL_ADC_Start+0x18c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_ADC_Start+0x190>)
 8001dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dda:	0c9a      	lsrs	r2, r3, #18
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001de4:	e002      	b.n	8001dec <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d1f9      	bne.n	8001de6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d17a      	bne.n	8001ef6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3e:	d106      	bne.n	8001e4e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e44:	f023 0206 	bic.w	r2, r3, #6
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	645a      	str	r2, [r3, #68]	; 0x44
 8001e4c:	e002      	b.n	8001e54 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e5c:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <HAL_ADC_Start+0x194>)
 8001e5e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e68:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 031f 	and.w	r3, r3, #31
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d12a      	bne.n	8001ecc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a2b      	ldr	r2, [pc, #172]	; (8001f28 <HAL_ADC_Start+0x198>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d015      	beq.n	8001eac <HAL_ADC_Start+0x11c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a29      	ldr	r2, [pc, #164]	; (8001f2c <HAL_ADC_Start+0x19c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d105      	bne.n	8001e96 <HAL_ADC_Start+0x106>
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <HAL_ADC_Start+0x194>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00a      	beq.n	8001eac <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a25      	ldr	r2, [pc, #148]	; (8001f30 <HAL_ADC_Start+0x1a0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d136      	bne.n	8001f0e <HAL_ADC_Start+0x17e>
 8001ea0:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <HAL_ADC_Start+0x194>)
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d130      	bne.n	8001f0e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d129      	bne.n	8001f0e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	e020      	b.n	8001f0e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a15      	ldr	r2, [pc, #84]	; (8001f28 <HAL_ADC_Start+0x198>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d11b      	bne.n	8001f0e <HAL_ADC_Start+0x17e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d114      	bne.n	8001f0e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	e00b      	b.n	8001f0e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f043 0210 	orr.w	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f06:	f043 0201 	orr.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	20000008 	.word	0x20000008
 8001f20:	431bde83 	.word	0x431bde83
 8001f24:	40012300 	.word	0x40012300
 8001f28:	40012000 	.word	0x40012000
 8001f2c:	40012100 	.word	0x40012100
 8001f30:	40012200 	.word	0x40012200

08001f34 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x1c>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e113      	b.n	8002194 <HAL_ADC_ConfigChannel+0x244>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b09      	cmp	r3, #9
 8001f7a:	d925      	bls.n	8001fc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68d9      	ldr	r1, [r3, #12]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b1e      	subs	r3, #30
 8001f92:	2207      	movs	r2, #7
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68d9      	ldr	r1, [r3, #12]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4403      	add	r3, r0
 8001fba:	3b1e      	subs	r3, #30
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	e022      	b.n	800200e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6919      	ldr	r1, [r3, #16]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	2207      	movs	r2, #7
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	400a      	ands	r2, r1
 8001fea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6919      	ldr	r1, [r3, #16]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4403      	add	r3, r0
 8002004:	409a      	lsls	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b06      	cmp	r3, #6
 8002014:	d824      	bhi.n	8002060 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	3b05      	subs	r3, #5
 8002028:	221f      	movs	r2, #31
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	400a      	ands	r2, r1
 8002036:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	4618      	mov	r0, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	3b05      	subs	r3, #5
 8002052:	fa00 f203 	lsl.w	r2, r0, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	635a      	str	r2, [r3, #52]	; 0x34
 800205e:	e04c      	b.n	80020fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d824      	bhi.n	80020b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b23      	subs	r3, #35	; 0x23
 800207a:	221f      	movs	r2, #31
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43da      	mvns	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	400a      	ands	r2, r1
 8002088:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	4618      	mov	r0, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b23      	subs	r3, #35	; 0x23
 80020a4:	fa00 f203 	lsl.w	r2, r0, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
 80020b0:	e023      	b.n	80020fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	3b41      	subs	r3, #65	; 0x41
 80020c4:	221f      	movs	r2, #31
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	400a      	ands	r2, r1
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	3b41      	subs	r3, #65	; 0x41
 80020ee:	fa00 f203 	lsl.w	r2, r0, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_ADC_ConfigChannel+0x250>)
 80020fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <HAL_ADC_ConfigChannel+0x254>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d10f      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1d8>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b12      	cmp	r3, #18
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <HAL_ADC_ConfigChannel+0x254>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d12b      	bne.n	800218a <HAL_ADC_ConfigChannel+0x23a>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <HAL_ADC_ConfigChannel+0x258>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d003      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x1f4>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b11      	cmp	r3, #17
 8002142:	d122      	bne.n	800218a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <HAL_ADC_ConfigChannel+0x258>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d111      	bne.n	800218a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_ADC_ConfigChannel+0x25c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <HAL_ADC_ConfigChannel+0x260>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	0c9a      	lsrs	r2, r3, #18
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800217c:	e002      	b.n	8002184 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3b01      	subs	r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f9      	bne.n	800217e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40012300 	.word	0x40012300
 80021a4:	40012000 	.word	0x40012000
 80021a8:	10000012 	.word	0x10000012
 80021ac:	20000008 	.word	0x20000008
 80021b0:	431bde83 	.word	0x431bde83

080021b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021bc:	4b79      	ldr	r3, [pc, #484]	; (80023a4 <ADC_Init+0x1f0>)
 80021be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	021a      	lsls	r2, r3, #8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800220c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <ADC_Init+0x1f4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d022      	beq.n	8002292 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800227c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e00f      	b.n	80022b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0202 	bic.w	r2, r2, #2
 80022c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6899      	ldr	r1, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7e1b      	ldrb	r3, [r3, #24]
 80022cc:	005a      	lsls	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	3b01      	subs	r3, #1
 800230c:	035a      	lsls	r2, r3, #13
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	e007      	b.n	8002328 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	3b01      	subs	r3, #1
 8002344:	051a      	lsls	r2, r3, #20
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800235c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6899      	ldr	r1, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800236a:	025a      	lsls	r2, r3, #9
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	029a      	lsls	r2, r3, #10
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40012300 	.word	0x40012300
 80023a8:	0f000001 	.word	0x0f000001

080023ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <__NVIC_EnableIRQ+0x38>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002518:	d301      	bcc.n	800251e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251a:	2301      	movs	r3, #1
 800251c:	e00f      	b.n	800253e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <SysTick_Config+0x40>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002526:	210f      	movs	r1, #15
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f7ff ff8e 	bl	800244c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <SysTick_Config+0x40>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <SysTick_Config+0x40>)
 8002538:	2207      	movs	r2, #7
 800253a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	e000e010 	.word	0xe000e010

0800254c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff29 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002574:	f7ff ff3e 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 8002578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	6978      	ldr	r0, [r7, #20]
 8002580:	f7ff ff8e 	bl	80024a0 <NVIC_EncodePriority>
 8002584:	4602      	mov	r2, r0
 8002586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff5d 	bl	800244c <__NVIC_SetPriority>
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff31 	bl	8002410 <__NVIC_EnableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ffa2 	bl	8002508 <SysTick_Config>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b084      	sub	sp, #16
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80025dc:	f7ff fb88 	bl	8001cf0 <HAL_GetTick>
 80025e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d008      	beq.n	8002600 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2280      	movs	r2, #128	; 0x80
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e052      	b.n	80026a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0216 	bic.w	r2, r2, #22
 800260e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	2b00      	cmp	r3, #0
 8002626:	d103      	bne.n	8002630 <HAL_DMA_Abort+0x62>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0208 	bic.w	r2, r2, #8
 800263e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 0201 	bic.w	r2, r2, #1
 800264e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002650:	e013      	b.n	800267a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002652:	f7ff fb4d 	bl	8001cf0 <HAL_GetTick>
 8002656:	4602      	mov	r2, r0
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	1ad3      	subs	r3, r2, r3
 800265c:	2b05      	cmp	r3, #5
 800265e:	d90c      	bls.n	800267a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2203      	movs	r2, #3
 800266a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e015      	b.n	80026a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1e4      	bne.n	8002652 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800268c:	223f      	movs	r2, #63	; 0x3f
 800268e:	409a      	lsls	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d004      	beq.n	80026cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2280      	movs	r2, #128	; 0x80
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e00c      	b.n	80026e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2205      	movs	r2, #5
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b089      	sub	sp, #36	; 0x24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002702:	2300      	movs	r3, #0
 8002704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270a:	2300      	movs	r3, #0
 800270c:	61fb      	str	r3, [r7, #28]
 800270e:	e165      	b.n	80029dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002710:	2201      	movs	r2, #1
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	429a      	cmp	r2, r3
 800272a:	f040 8154 	bne.w	80029d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 0303 	and.w	r3, r3, #3
 8002736:	2b01      	cmp	r3, #1
 8002738:	d005      	beq.n	8002746 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002742:	2b02      	cmp	r3, #2
 8002744:	d130      	bne.n	80027a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	2203      	movs	r2, #3
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	43db      	mvns	r3, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4013      	ands	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800277c:	2201      	movs	r2, #1
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	43db      	mvns	r3, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4013      	ands	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 0201 	and.w	r2, r3, #1
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4313      	orrs	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d017      	beq.n	80027e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	2203      	movs	r2, #3
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d123      	bne.n	8002838 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	08da      	lsrs	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3208      	adds	r2, #8
 80027f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	220f      	movs	r2, #15
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43db      	mvns	r3, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4013      	ands	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	08da      	lsrs	r2, r3, #3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	3208      	adds	r2, #8
 8002832:	69b9      	ldr	r1, [r7, #24]
 8002834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	2203      	movs	r2, #3
 8002844:	fa02 f303 	lsl.w	r3, r2, r3
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 0203 	and.w	r2, r3, #3
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	69ba      	ldr	r2, [r7, #24]
 8002862:	4313      	orrs	r3, r2
 8002864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80ae 	beq.w	80029d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b5d      	ldr	r3, [pc, #372]	; (80029f4 <HAL_GPIO_Init+0x300>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	4a5c      	ldr	r2, [pc, #368]	; (80029f4 <HAL_GPIO_Init+0x300>)
 8002884:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002888:	6453      	str	r3, [r2, #68]	; 0x44
 800288a:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <HAL_GPIO_Init+0x300>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002896:	4a58      	ldr	r2, [pc, #352]	; (80029f8 <HAL_GPIO_Init+0x304>)
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	089b      	lsrs	r3, r3, #2
 800289c:	3302      	adds	r3, #2
 800289e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	220f      	movs	r2, #15
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a4f      	ldr	r2, [pc, #316]	; (80029fc <HAL_GPIO_Init+0x308>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d025      	beq.n	800290e <HAL_GPIO_Init+0x21a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a4e      	ldr	r2, [pc, #312]	; (8002a00 <HAL_GPIO_Init+0x30c>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d01f      	beq.n	800290a <HAL_GPIO_Init+0x216>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a4d      	ldr	r2, [pc, #308]	; (8002a04 <HAL_GPIO_Init+0x310>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d019      	beq.n	8002906 <HAL_GPIO_Init+0x212>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a4c      	ldr	r2, [pc, #304]	; (8002a08 <HAL_GPIO_Init+0x314>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d013      	beq.n	8002902 <HAL_GPIO_Init+0x20e>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a4b      	ldr	r2, [pc, #300]	; (8002a0c <HAL_GPIO_Init+0x318>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d00d      	beq.n	80028fe <HAL_GPIO_Init+0x20a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a4a      	ldr	r2, [pc, #296]	; (8002a10 <HAL_GPIO_Init+0x31c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d007      	beq.n	80028fa <HAL_GPIO_Init+0x206>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a49      	ldr	r2, [pc, #292]	; (8002a14 <HAL_GPIO_Init+0x320>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_GPIO_Init+0x202>
 80028f2:	2306      	movs	r3, #6
 80028f4:	e00c      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 80028f6:	2307      	movs	r3, #7
 80028f8:	e00a      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 80028fa:	2305      	movs	r3, #5
 80028fc:	e008      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 80028fe:	2304      	movs	r3, #4
 8002900:	e006      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 8002902:	2303      	movs	r3, #3
 8002904:	e004      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 8002906:	2302      	movs	r3, #2
 8002908:	e002      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 800290a:	2301      	movs	r3, #1
 800290c:	e000      	b.n	8002910 <HAL_GPIO_Init+0x21c>
 800290e:	2300      	movs	r3, #0
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	f002 0203 	and.w	r2, r2, #3
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	4093      	lsls	r3, r2
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002920:	4935      	ldr	r1, [pc, #212]	; (80029f8 <HAL_GPIO_Init+0x304>)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	089b      	lsrs	r3, r3, #2
 8002926:	3302      	adds	r3, #2
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800292e:	4b3a      	ldr	r3, [pc, #232]	; (8002a18 <HAL_GPIO_Init+0x324>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002952:	4a31      	ldr	r2, [pc, #196]	; (8002a18 <HAL_GPIO_Init+0x324>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002958:	4b2f      	ldr	r3, [pc, #188]	; (8002a18 <HAL_GPIO_Init+0x324>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <HAL_GPIO_Init+0x324>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002982:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <HAL_GPIO_Init+0x324>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	43db      	mvns	r3, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4013      	ands	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029a6:	4a1c      	ldr	r2, [pc, #112]	; (8002a18 <HAL_GPIO_Init+0x324>)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_GPIO_Init+0x324>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d003      	beq.n	80029d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d0:	4a11      	ldr	r2, [pc, #68]	; (8002a18 <HAL_GPIO_Init+0x324>)
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3301      	adds	r3, #1
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	2b0f      	cmp	r3, #15
 80029e0:	f67f ae96 	bls.w	8002710 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029e4:	bf00      	nop
 80029e6:	bf00      	nop
 80029e8:	3724      	adds	r7, #36	; 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40013800 	.word	0x40013800
 80029fc:	40020000 	.word	0x40020000
 8002a00:	40020400 	.word	0x40020400
 8002a04:	40020800 	.word	0x40020800
 8002a08:	40020c00 	.word	0x40020c00
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40021400 	.word	0x40021400
 8002a14:	40021800 	.word	0x40021800
 8002a18:	40013c00 	.word	0x40013c00

08002a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	807b      	strh	r3, [r7, #2]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a2c:	787b      	ldrb	r3, [r7, #1]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a32:	887a      	ldrh	r2, [r7, #2]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a38:	e003      	b.n	8002a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a3a:	887b      	ldrh	r3, [r7, #2]
 8002a3c:	041a      	lsls	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	619a      	str	r2, [r3, #24]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d101      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e0cc      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a64:	4b68      	ldr	r3, [pc, #416]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d90c      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b65      	ldr	r3, [pc, #404]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0b8      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a58      	ldr	r2, [pc, #352]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	494d      	ldr	r1, [pc, #308]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d044      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d119      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e07f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d107      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0e:	4b3f      	ldr	r3, [pc, #252]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e06f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1e:	4b3b      	ldr	r3, [pc, #236]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e067      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2e:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f023 0203 	bic.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	4934      	ldr	r1, [pc, #208]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b40:	f7ff f8d6 	bl	8001cf0 <HAL_GetTick>
 8002b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b48:	f7ff f8d2 	bl	8001cf0 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e04f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5e:	4b2b      	ldr	r3, [pc, #172]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 020c 	and.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d1eb      	bne.n	8002b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b70:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 030f 	and.w	r3, r3, #15
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d20c      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e032      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4916      	ldr	r1, [pc, #88]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	490e      	ldr	r1, [pc, #56]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bd6:	f000 f855 	bl	8002c84 <HAL_RCC_GetSysClockFreq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	490a      	ldr	r1, [pc, #40]	; (8002c10 <HAL_RCC_ClockConfig+0x1c0>)
 8002be8:	5ccb      	ldrb	r3, [r1, r3]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f836 	bl	8001c68 <HAL_InitTick>

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023c00 	.word	0x40023c00
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	08009b18 	.word	0x08009b18
 8002c14:	20000008 	.word	0x20000008
 8002c18:	2000000c 	.word	0x2000000c

08002c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000008 	.word	0x20000008

08002c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c38:	f7ff fff0 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0a9b      	lsrs	r3, r3, #10
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	08009b28 	.word	0x08009b28

08002c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c60:	f7ff ffdc 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	0b5b      	lsrs	r3, r3, #13
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4903      	ldr	r1, [pc, #12]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c72:	5ccb      	ldrb	r3, [r1, r3]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	08009b28 	.word	0x08009b28

08002c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c88:	b0ae      	sub	sp, #184	; 0xb8
 8002c8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002caa:	4bcb      	ldr	r3, [pc, #812]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b0c      	cmp	r3, #12
 8002cb4:	f200 8206 	bhi.w	80030c4 <HAL_RCC_GetSysClockFreq+0x440>
 8002cb8:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002cf5 	.word	0x08002cf5
 8002cc4:	080030c5 	.word	0x080030c5
 8002cc8:	080030c5 	.word	0x080030c5
 8002ccc:	080030c5 	.word	0x080030c5
 8002cd0:	08002cfd 	.word	0x08002cfd
 8002cd4:	080030c5 	.word	0x080030c5
 8002cd8:	080030c5 	.word	0x080030c5
 8002cdc:	080030c5 	.word	0x080030c5
 8002ce0:	08002d05 	.word	0x08002d05
 8002ce4:	080030c5 	.word	0x080030c5
 8002ce8:	080030c5 	.word	0x080030c5
 8002cec:	080030c5 	.word	0x080030c5
 8002cf0:	08002ef5 	.word	0x08002ef5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cf4:	4bb9      	ldr	r3, [pc, #740]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x358>)
 8002cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002cfa:	e1e7      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cfc:	4bb8      	ldr	r3, [pc, #736]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002cfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d02:	e1e3      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d04:	4bb4      	ldr	r3, [pc, #720]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d10:	4bb1      	ldr	r3, [pc, #708]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d071      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d1c:	4bae      	ldr	r3, [pc, #696]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	099b      	lsrs	r3, r3, #6
 8002d22:	2200      	movs	r2, #0
 8002d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d28:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002d3e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002d42:	4622      	mov	r2, r4
 8002d44:	462b      	mov	r3, r5
 8002d46:	f04f 0000 	mov.w	r0, #0
 8002d4a:	f04f 0100 	mov.w	r1, #0
 8002d4e:	0159      	lsls	r1, r3, #5
 8002d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d54:	0150      	lsls	r0, r2, #5
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4621      	mov	r1, r4
 8002d5c:	1a51      	subs	r1, r2, r1
 8002d5e:	6439      	str	r1, [r7, #64]	; 0x40
 8002d60:	4629      	mov	r1, r5
 8002d62:	eb63 0301 	sbc.w	r3, r3, r1
 8002d66:	647b      	str	r3, [r7, #68]	; 0x44
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002d74:	4649      	mov	r1, r9
 8002d76:	018b      	lsls	r3, r1, #6
 8002d78:	4641      	mov	r1, r8
 8002d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d7e:	4641      	mov	r1, r8
 8002d80:	018a      	lsls	r2, r1, #6
 8002d82:	4641      	mov	r1, r8
 8002d84:	1a51      	subs	r1, r2, r1
 8002d86:	63b9      	str	r1, [r7, #56]	; 0x38
 8002d88:	4649      	mov	r1, r9
 8002d8a:	eb63 0301 	sbc.w	r3, r3, r1
 8002d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002d9c:	4649      	mov	r1, r9
 8002d9e:	00cb      	lsls	r3, r1, #3
 8002da0:	4641      	mov	r1, r8
 8002da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002da6:	4641      	mov	r1, r8
 8002da8:	00ca      	lsls	r2, r1, #3
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	4603      	mov	r3, r0
 8002db0:	4622      	mov	r2, r4
 8002db2:	189b      	adds	r3, r3, r2
 8002db4:	633b      	str	r3, [r7, #48]	; 0x30
 8002db6:	462b      	mov	r3, r5
 8002db8:	460a      	mov	r2, r1
 8002dba:	eb42 0303 	adc.w	r3, r2, r3
 8002dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002dcc:	4629      	mov	r1, r5
 8002dce:	024b      	lsls	r3, r1, #9
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	024a      	lsls	r2, r1, #9
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002de2:	2200      	movs	r2, #0
 8002de4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002de8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002dec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002df0:	f7fd ff6a 	bl	8000cc8 <__aeabi_uldivmod>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4613      	mov	r3, r2
 8002dfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dfe:	e067      	b.n	8002ed0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e00:	4b75      	ldr	r3, [pc, #468]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	099b      	lsrs	r3, r3, #6
 8002e06:	2200      	movs	r2, #0
 8002e08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e0c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e18:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e1e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e22:	4622      	mov	r2, r4
 8002e24:	462b      	mov	r3, r5
 8002e26:	f04f 0000 	mov.w	r0, #0
 8002e2a:	f04f 0100 	mov.w	r1, #0
 8002e2e:	0159      	lsls	r1, r3, #5
 8002e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e34:	0150      	lsls	r0, r2, #5
 8002e36:	4602      	mov	r2, r0
 8002e38:	460b      	mov	r3, r1
 8002e3a:	4621      	mov	r1, r4
 8002e3c:	1a51      	subs	r1, r2, r1
 8002e3e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002e40:	4629      	mov	r1, r5
 8002e42:	eb63 0301 	sbc.w	r3, r3, r1
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	f04f 0300 	mov.w	r3, #0
 8002e50:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002e54:	4649      	mov	r1, r9
 8002e56:	018b      	lsls	r3, r1, #6
 8002e58:	4641      	mov	r1, r8
 8002e5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e5e:	4641      	mov	r1, r8
 8002e60:	018a      	lsls	r2, r1, #6
 8002e62:	4641      	mov	r1, r8
 8002e64:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e68:	4649      	mov	r1, r9
 8002e6a:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e6e:	f04f 0200 	mov.w	r2, #0
 8002e72:	f04f 0300 	mov.w	r3, #0
 8002e76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e82:	4692      	mov	sl, r2
 8002e84:	469b      	mov	fp, r3
 8002e86:	4623      	mov	r3, r4
 8002e88:	eb1a 0303 	adds.w	r3, sl, r3
 8002e8c:	623b      	str	r3, [r7, #32]
 8002e8e:	462b      	mov	r3, r5
 8002e90:	eb4b 0303 	adc.w	r3, fp, r3
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ea2:	4629      	mov	r1, r5
 8002ea4:	028b      	lsls	r3, r1, #10
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002eac:	4621      	mov	r1, r4
 8002eae:	028a      	lsls	r2, r1, #10
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eb8:	2200      	movs	r2, #0
 8002eba:	673b      	str	r3, [r7, #112]	; 0x70
 8002ebc:	677a      	str	r2, [r7, #116]	; 0x74
 8002ebe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002ec2:	f7fd ff01 	bl	8000cc8 <__aeabi_uldivmod>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	4613      	mov	r3, r2
 8002ecc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ed0:	4b41      	ldr	r3, [pc, #260]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	3301      	adds	r3, #1
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002ee2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ef2:	e0eb      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ef4:	4b38      	ldr	r3, [pc, #224]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002efc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f00:	4b35      	ldr	r3, [pc, #212]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d06b      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0c:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	099b      	lsrs	r3, r3, #6
 8002f12:	2200      	movs	r2, #0
 8002f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f1e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f20:	2300      	movs	r3, #0
 8002f22:	667b      	str	r3, [r7, #100]	; 0x64
 8002f24:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f28:	4622      	mov	r2, r4
 8002f2a:	462b      	mov	r3, r5
 8002f2c:	f04f 0000 	mov.w	r0, #0
 8002f30:	f04f 0100 	mov.w	r1, #0
 8002f34:	0159      	lsls	r1, r3, #5
 8002f36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f3a:	0150      	lsls	r0, r2, #5
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4621      	mov	r1, r4
 8002f42:	1a51      	subs	r1, r2, r1
 8002f44:	61b9      	str	r1, [r7, #24]
 8002f46:	4629      	mov	r1, r5
 8002f48:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4c:	61fb      	str	r3, [r7, #28]
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f5a:	4659      	mov	r1, fp
 8002f5c:	018b      	lsls	r3, r1, #6
 8002f5e:	4651      	mov	r1, sl
 8002f60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f64:	4651      	mov	r1, sl
 8002f66:	018a      	lsls	r2, r1, #6
 8002f68:	4651      	mov	r1, sl
 8002f6a:	ebb2 0801 	subs.w	r8, r2, r1
 8002f6e:	4659      	mov	r1, fp
 8002f70:	eb63 0901 	sbc.w	r9, r3, r1
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f88:	4690      	mov	r8, r2
 8002f8a:	4699      	mov	r9, r3
 8002f8c:	4623      	mov	r3, r4
 8002f8e:	eb18 0303 	adds.w	r3, r8, r3
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	462b      	mov	r3, r5
 8002f96:	eb49 0303 	adc.w	r3, r9, r3
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	f04f 0300 	mov.w	r3, #0
 8002fa4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002fa8:	4629      	mov	r1, r5
 8002faa:	024b      	lsls	r3, r1, #9
 8002fac:	4621      	mov	r1, r4
 8002fae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fb2:	4621      	mov	r1, r4
 8002fb4:	024a      	lsls	r2, r1, #9
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	4619      	mov	r1, r3
 8002fba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	65bb      	str	r3, [r7, #88]	; 0x58
 8002fc2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002fc4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002fc8:	f7fd fe7e 	bl	8000cc8 <__aeabi_uldivmod>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fd6:	e065      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x420>
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	00f42400 	.word	0x00f42400
 8002fe0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe4:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCC_GetSysClockFreq+0x458>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	2200      	movs	r2, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	4611      	mov	r1, r2
 8002ff0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ff4:	653b      	str	r3, [r7, #80]	; 0x50
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	657b      	str	r3, [r7, #84]	; 0x54
 8002ffa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002ffe:	4642      	mov	r2, r8
 8003000:	464b      	mov	r3, r9
 8003002:	f04f 0000 	mov.w	r0, #0
 8003006:	f04f 0100 	mov.w	r1, #0
 800300a:	0159      	lsls	r1, r3, #5
 800300c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003010:	0150      	lsls	r0, r2, #5
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4641      	mov	r1, r8
 8003018:	1a51      	subs	r1, r2, r1
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	4649      	mov	r1, r9
 800301e:	eb63 0301 	sbc.w	r3, r3, r1
 8003022:	60fb      	str	r3, [r7, #12]
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	f04f 0300 	mov.w	r3, #0
 800302c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003030:	4659      	mov	r1, fp
 8003032:	018b      	lsls	r3, r1, #6
 8003034:	4651      	mov	r1, sl
 8003036:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800303a:	4651      	mov	r1, sl
 800303c:	018a      	lsls	r2, r1, #6
 800303e:	4651      	mov	r1, sl
 8003040:	1a54      	subs	r4, r2, r1
 8003042:	4659      	mov	r1, fp
 8003044:	eb63 0501 	sbc.w	r5, r3, r1
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	00eb      	lsls	r3, r5, #3
 8003052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003056:	00e2      	lsls	r2, r4, #3
 8003058:	4614      	mov	r4, r2
 800305a:	461d      	mov	r5, r3
 800305c:	4643      	mov	r3, r8
 800305e:	18e3      	adds	r3, r4, r3
 8003060:	603b      	str	r3, [r7, #0]
 8003062:	464b      	mov	r3, r9
 8003064:	eb45 0303 	adc.w	r3, r5, r3
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	f04f 0200 	mov.w	r2, #0
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003076:	4629      	mov	r1, r5
 8003078:	028b      	lsls	r3, r1, #10
 800307a:	4621      	mov	r1, r4
 800307c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003080:	4621      	mov	r1, r4
 8003082:	028a      	lsls	r2, r1, #10
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800308c:	2200      	movs	r2, #0
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003090:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003092:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003096:	f7fd fe17 	bl	8000cc8 <__aeabi_uldivmod>
 800309a:	4602      	mov	r2, r0
 800309c:	460b      	mov	r3, r1
 800309e:	4613      	mov	r3, r2
 80030a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030a4:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_RCC_GetSysClockFreq+0x458>)
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	0f1b      	lsrs	r3, r3, #28
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80030b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030c2:	e003      	b.n	80030cc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030c4:	4b06      	ldr	r3, [pc, #24]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80030c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030ca:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	37b8      	adds	r7, #184	; 0xb8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	00f42400 	.word	0x00f42400

080030e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e28d      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8083 	beq.w	800320a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003104:	4b94      	ldr	r3, [pc, #592]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b04      	cmp	r3, #4
 800310e:	d019      	beq.n	8003144 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003110:	4b91      	ldr	r3, [pc, #580]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003118:	2b08      	cmp	r3, #8
 800311a:	d106      	bne.n	800312a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800311c:	4b8e      	ldr	r3, [pc, #568]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003124:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003128:	d00c      	beq.n	8003144 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800312a:	4b8b      	ldr	r3, [pc, #556]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003132:	2b0c      	cmp	r3, #12
 8003134:	d112      	bne.n	800315c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003136:	4b88      	ldr	r3, [pc, #544]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800313e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003142:	d10b      	bne.n	800315c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003144:	4b84      	ldr	r3, [pc, #528]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d05b      	beq.n	8003208 <HAL_RCC_OscConfig+0x124>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d157      	bne.n	8003208 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e25a      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003164:	d106      	bne.n	8003174 <HAL_RCC_OscConfig+0x90>
 8003166:	4b7c      	ldr	r3, [pc, #496]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a7b      	ldr	r2, [pc, #492]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 800316c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	e01d      	b.n	80031b0 <HAL_RCC_OscConfig+0xcc>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800317c:	d10c      	bne.n	8003198 <HAL_RCC_OscConfig+0xb4>
 800317e:	4b76      	ldr	r3, [pc, #472]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a75      	ldr	r2, [pc, #468]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003184:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b73      	ldr	r3, [pc, #460]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a72      	ldr	r2, [pc, #456]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e00b      	b.n	80031b0 <HAL_RCC_OscConfig+0xcc>
 8003198:	4b6f      	ldr	r3, [pc, #444]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a6e      	ldr	r2, [pc, #440]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 800319e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	4b6c      	ldr	r3, [pc, #432]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a6b      	ldr	r2, [pc, #428]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 80031aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d013      	beq.n	80031e0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b8:	f7fe fd9a 	bl	8001cf0 <HAL_GetTick>
 80031bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031c0:	f7fe fd96 	bl	8001cf0 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b64      	cmp	r3, #100	; 0x64
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e21f      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d2:	4b61      	ldr	r3, [pc, #388]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d0f0      	beq.n	80031c0 <HAL_RCC_OscConfig+0xdc>
 80031de:	e014      	b.n	800320a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fd86 	bl	8001cf0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031e8:	f7fe fd82 	bl	8001cf0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b64      	cmp	r3, #100	; 0x64
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e20b      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fa:	4b57      	ldr	r3, [pc, #348]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x104>
 8003206:	e000      	b.n	800320a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d06f      	beq.n	80032f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003216:	4b50      	ldr	r3, [pc, #320]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b00      	cmp	r3, #0
 8003220:	d017      	beq.n	8003252 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003222:	4b4d      	ldr	r3, [pc, #308]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800322a:	2b08      	cmp	r3, #8
 800322c:	d105      	bne.n	800323a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800322e:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00b      	beq.n	8003252 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323a:	4b47      	ldr	r3, [pc, #284]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003242:	2b0c      	cmp	r3, #12
 8003244:	d11c      	bne.n	8003280 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003246:	4b44      	ldr	r3, [pc, #272]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d116      	bne.n	8003280 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003252:	4b41      	ldr	r3, [pc, #260]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_RCC_OscConfig+0x186>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d001      	beq.n	800326a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e1d3      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800326a:	4b3b      	ldr	r3, [pc, #236]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4937      	ldr	r1, [pc, #220]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 800327a:	4313      	orrs	r3, r2
 800327c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800327e:	e03a      	b.n	80032f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d020      	beq.n	80032ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003288:	4b34      	ldr	r3, [pc, #208]	; (800335c <HAL_RCC_OscConfig+0x278>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328e:	f7fe fd2f 	bl	8001cf0 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003296:	f7fe fd2b 	bl	8001cf0 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e1b4      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a8:	4b2b      	ldr	r3, [pc, #172]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d0f0      	beq.n	8003296 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b4:	4b28      	ldr	r3, [pc, #160]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	00db      	lsls	r3, r3, #3
 80032c2:	4925      	ldr	r1, [pc, #148]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 80032c4:	4313      	orrs	r3, r2
 80032c6:	600b      	str	r3, [r1, #0]
 80032c8:	e015      	b.n	80032f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ca:	4b24      	ldr	r3, [pc, #144]	; (800335c <HAL_RCC_OscConfig+0x278>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d0:	f7fe fd0e 	bl	8001cf0 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d8:	f7fe fd0a 	bl	8001cf0 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e193      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ea:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d036      	beq.n	8003370 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d016      	beq.n	8003338 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800330c:	2201      	movs	r2, #1
 800330e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003310:	f7fe fcee 	bl	8001cf0 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003318:	f7fe fcea 	bl	8001cf0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e173      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332a:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_OscConfig+0x274>)
 800332c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x234>
 8003336:	e01b      	b.n	8003370 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <HAL_RCC_OscConfig+0x27c>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333e:	f7fe fcd7 	bl	8001cf0 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003344:	e00e      	b.n	8003364 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003346:	f7fe fcd3 	bl	8001cf0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d907      	bls.n	8003364 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e15c      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
 8003358:	40023800 	.word	0x40023800
 800335c:	42470000 	.word	0x42470000
 8003360:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003364:	4b8a      	ldr	r3, [pc, #552]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1ea      	bne.n	8003346 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8097 	beq.w	80034ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800337e:	2300      	movs	r3, #0
 8003380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003382:	4b83      	ldr	r3, [pc, #524]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10f      	bne.n	80033ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60bb      	str	r3, [r7, #8]
 8003392:	4b7f      	ldr	r3, [pc, #508]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a7e      	ldr	r2, [pc, #504]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
 800339e:	4b7c      	ldr	r3, [pc, #496]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033aa:	2301      	movs	r3, #1
 80033ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ae:	4b79      	ldr	r3, [pc, #484]	; (8003594 <HAL_RCC_OscConfig+0x4b0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d118      	bne.n	80033ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ba:	4b76      	ldr	r3, [pc, #472]	; (8003594 <HAL_RCC_OscConfig+0x4b0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a75      	ldr	r2, [pc, #468]	; (8003594 <HAL_RCC_OscConfig+0x4b0>)
 80033c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033c6:	f7fe fc93 	bl	8001cf0 <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ce:	f7fe fc8f 	bl	8001cf0 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e118      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e0:	4b6c      	ldr	r3, [pc, #432]	; (8003594 <HAL_RCC_OscConfig+0x4b0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d0f0      	beq.n	80033ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d106      	bne.n	8003402 <HAL_RCC_OscConfig+0x31e>
 80033f4:	4b66      	ldr	r3, [pc, #408]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 80033f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f8:	4a65      	ldr	r2, [pc, #404]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003400:	e01c      	b.n	800343c <HAL_RCC_OscConfig+0x358>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b05      	cmp	r3, #5
 8003408:	d10c      	bne.n	8003424 <HAL_RCC_OscConfig+0x340>
 800340a:	4b61      	ldr	r3, [pc, #388]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	4a60      	ldr	r2, [pc, #384]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	f043 0304 	orr.w	r3, r3, #4
 8003414:	6713      	str	r3, [r2, #112]	; 0x70
 8003416:	4b5e      	ldr	r3, [pc, #376]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	4a5d      	ldr	r2, [pc, #372]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6713      	str	r3, [r2, #112]	; 0x70
 8003422:	e00b      	b.n	800343c <HAL_RCC_OscConfig+0x358>
 8003424:	4b5a      	ldr	r3, [pc, #360]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a59      	ldr	r2, [pc, #356]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 800342a:	f023 0301 	bic.w	r3, r3, #1
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
 8003430:	4b57      	ldr	r3, [pc, #348]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003434:	4a56      	ldr	r2, [pc, #344]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003436:	f023 0304 	bic.w	r3, r3, #4
 800343a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d015      	beq.n	8003470 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fe fc54 	bl	8001cf0 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344a:	e00a      	b.n	8003462 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800344c:	f7fe fc50 	bl	8001cf0 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	f241 3288 	movw	r2, #5000	; 0x1388
 800345a:	4293      	cmp	r3, r2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e0d7      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003462:	4b4b      	ldr	r3, [pc, #300]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0ee      	beq.n	800344c <HAL_RCC_OscConfig+0x368>
 800346e:	e014      	b.n	800349a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003470:	f7fe fc3e 	bl	8001cf0 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003478:	f7fe fc3a 	bl	8001cf0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	; 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e0c1      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348e:	4b40      	ldr	r3, [pc, #256]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1ee      	bne.n	8003478 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d105      	bne.n	80034ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034a0:	4b3b      	ldr	r3, [pc, #236]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	4a3a      	ldr	r2, [pc, #232]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 80034a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f000 80ad 	beq.w	8003610 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034b6:	4b36      	ldr	r3, [pc, #216]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 030c 	and.w	r3, r3, #12
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d060      	beq.n	8003584 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d145      	bne.n	8003556 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ca:	4b33      	ldr	r3, [pc, #204]	; (8003598 <HAL_RCC_OscConfig+0x4b4>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe fc0e 	bl	8001cf0 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d8:	f7fe fc0a 	bl	8001cf0 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e093      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ea:	4b29      	ldr	r3, [pc, #164]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69da      	ldr	r2, [r3, #28]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	019b      	lsls	r3, r3, #6
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	085b      	lsrs	r3, r3, #1
 800350e:	3b01      	subs	r3, #1
 8003510:	041b      	lsls	r3, r3, #16
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	061b      	lsls	r3, r3, #24
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	071b      	lsls	r3, r3, #28
 8003522:	491b      	ldr	r1, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003524:	4313      	orrs	r3, r2
 8003526:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003528:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <HAL_RCC_OscConfig+0x4b4>)
 800352a:	2201      	movs	r2, #1
 800352c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352e:	f7fe fbdf 	bl	8001cf0 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003534:	e008      	b.n	8003548 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003536:	f7fe fbdb 	bl	8001cf0 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d901      	bls.n	8003548 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e064      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0f0      	beq.n	8003536 <HAL_RCC_OscConfig+0x452>
 8003554:	e05c      	b.n	8003610 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003556:	4b10      	ldr	r3, [pc, #64]	; (8003598 <HAL_RCC_OscConfig+0x4b4>)
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe fbc8 	bl	8001cf0 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003564:	f7fe fbc4 	bl	8001cf0 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e04d      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	4b06      	ldr	r3, [pc, #24]	; (8003590 <HAL_RCC_OscConfig+0x4ac>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x480>
 8003582:	e045      	b.n	8003610 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d107      	bne.n	800359c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e040      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
 8003590:	40023800 	.word	0x40023800
 8003594:	40007000 	.word	0x40007000
 8003598:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800359c:	4b1f      	ldr	r3, [pc, #124]	; (800361c <HAL_RCC_OscConfig+0x538>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d030      	beq.n	800360c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d129      	bne.n	800360c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d122      	bne.n	800360c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035cc:	4013      	ands	r3, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d119      	bne.n	800360c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e2:	085b      	lsrs	r3, r3, #1
 80035e4:	3b01      	subs	r3, #1
 80035e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d10f      	bne.n	800360c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d107      	bne.n	800360c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003608:	429a      	cmp	r2, r3
 800360a:	d001      	beq.n	8003610 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e000      	b.n	8003612 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800

08003620 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e041      	b.n	80036b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d106      	bne.n	800364c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7fe f8ea 	bl	8001820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3304      	adds	r3, #4
 800365c:	4619      	mov	r1, r3
 800365e:	4610      	mov	r0, r2
 8003660:	f000 fb9a 	bl	8003d98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
	...

080036c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d001      	beq.n	80036d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e046      	b.n	8003766 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a23      	ldr	r2, [pc, #140]	; (8003774 <HAL_TIM_Base_Start+0xb4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d022      	beq.n	8003730 <HAL_TIM_Base_Start+0x70>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f2:	d01d      	beq.n	8003730 <HAL_TIM_Base_Start+0x70>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1f      	ldr	r2, [pc, #124]	; (8003778 <HAL_TIM_Base_Start+0xb8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d018      	beq.n	8003730 <HAL_TIM_Base_Start+0x70>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1e      	ldr	r2, [pc, #120]	; (800377c <HAL_TIM_Base_Start+0xbc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <HAL_TIM_Base_Start+0x70>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <HAL_TIM_Base_Start+0xc0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_TIM_Base_Start+0x70>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <HAL_TIM_Base_Start+0xc4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d009      	beq.n	8003730 <HAL_TIM_Base_Start+0x70>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a19      	ldr	r2, [pc, #100]	; (8003788 <HAL_TIM_Base_Start+0xc8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_TIM_Base_Start+0x70>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a18      	ldr	r2, [pc, #96]	; (800378c <HAL_TIM_Base_Start+0xcc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d111      	bne.n	8003754 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d010      	beq.n	8003764 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003752:	e007      	b.n	8003764 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40010400 	.word	0x40010400
 8003788:	40014000 	.word	0x40014000
 800378c:	40001800 	.word	0x40001800

08003790 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d001      	beq.n	80037a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e04e      	b.n	8003846 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0201 	orr.w	r2, r2, #1
 80037be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a23      	ldr	r2, [pc, #140]	; (8003854 <HAL_TIM_Base_Start_IT+0xc4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d022      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037d2:	d01d      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1f      	ldr	r2, [pc, #124]	; (8003858 <HAL_TIM_Base_Start_IT+0xc8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d018      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a1e      	ldr	r2, [pc, #120]	; (800385c <HAL_TIM_Base_Start_IT+0xcc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d013      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1c      	ldr	r2, [pc, #112]	; (8003860 <HAL_TIM_Base_Start_IT+0xd0>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d00e      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <HAL_TIM_Base_Start_IT+0xd4>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d009      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a19      	ldr	r2, [pc, #100]	; (8003868 <HAL_TIM_Base_Start_IT+0xd8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d004      	beq.n	8003810 <HAL_TIM_Base_Start_IT+0x80>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a18      	ldr	r2, [pc, #96]	; (800386c <HAL_TIM_Base_Start_IT+0xdc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d111      	bne.n	8003834 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b06      	cmp	r3, #6
 8003820:	d010      	beq.n	8003844 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0201 	orr.w	r2, r2, #1
 8003830:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003832:	e007      	b.n	8003844 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40000400 	.word	0x40000400
 800385c:	40000800 	.word	0x40000800
 8003860:	40000c00 	.word	0x40000c00
 8003864:	40010400 	.word	0x40010400
 8003868:	40014000 	.word	0x40014000
 800386c:	40001800 	.word	0x40001800

08003870 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e041      	b.n	8003908 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f839 	bl	8003910 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 fa71 	bl	8003d98 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0208 	bic.w	r2, r2, #8
 80038c4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6819      	ldr	r1, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b02      	cmp	r3, #2
 8003938:	d122      	bne.n	8003980 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b02      	cmp	r3, #2
 8003946:	d11b      	bne.n	8003980 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f06f 0202 	mvn.w	r2, #2
 8003950:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f9f7 	bl	8003d5a <HAL_TIM_IC_CaptureCallback>
 800396c:	e005      	b.n	800397a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f9e9 	bl	8003d46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f9fa 	bl	8003d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	691b      	ldr	r3, [r3, #16]
 8003986:	f003 0304 	and.w	r3, r3, #4
 800398a:	2b04      	cmp	r3, #4
 800398c:	d122      	bne.n	80039d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b04      	cmp	r3, #4
 800399a:	d11b      	bne.n	80039d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0204 	mvn.w	r2, #4
 80039a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f9cd 	bl	8003d5a <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f9bf 	bl	8003d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f9d0 	bl	8003d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d122      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f003 0308 	and.w	r3, r3, #8
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d11b      	bne.n	8003a28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f06f 0208 	mvn.w	r2, #8
 80039f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2204      	movs	r2, #4
 80039fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f9a3 	bl	8003d5a <HAL_TIM_IC_CaptureCallback>
 8003a14:	e005      	b.n	8003a22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 f995 	bl	8003d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 f9a6 	bl	8003d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	f003 0310 	and.w	r3, r3, #16
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d122      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f003 0310 	and.w	r3, r3, #16
 8003a40:	2b10      	cmp	r3, #16
 8003a42:	d11b      	bne.n	8003a7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f06f 0210 	mvn.w	r2, #16
 8003a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2208      	movs	r2, #8
 8003a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	69db      	ldr	r3, [r3, #28]
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f979 	bl	8003d5a <HAL_TIM_IC_CaptureCallback>
 8003a68:	e005      	b.n	8003a76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f96b 	bl	8003d46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 f97c 	bl	8003d6e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d10e      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d107      	bne.n	8003aa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f06f 0201 	mvn.w	r2, #1
 8003aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f7fd fd94 	bl	80015d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab2:	2b80      	cmp	r3, #128	; 0x80
 8003ab4:	d10e      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac0:	2b80      	cmp	r3, #128	; 0x80
 8003ac2:	d107      	bne.n	8003ad4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003acc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fbb4 	bl	800423c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d10e      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aec:	2b40      	cmp	r3, #64	; 0x40
 8003aee:	d107      	bne.n	8003b00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f941 	bl	8003d82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0320 	and.w	r3, r3, #32
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	d10e      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d107      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0220 	mvn.w	r2, #32
 8003b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fb7e 	bl	8004228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d101      	bne.n	8003b50 <HAL_TIM_ConfigClockSource+0x1c>
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	e0b4      	b.n	8003cba <HAL_TIM_ConfigClockSource+0x186>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b88:	d03e      	beq.n	8003c08 <HAL_TIM_ConfigClockSource+0xd4>
 8003b8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b8e:	f200 8087 	bhi.w	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b96:	f000 8086 	beq.w	8003ca6 <HAL_TIM_ConfigClockSource+0x172>
 8003b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b9e:	d87f      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba0:	2b70      	cmp	r3, #112	; 0x70
 8003ba2:	d01a      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0xa6>
 8003ba4:	2b70      	cmp	r3, #112	; 0x70
 8003ba6:	d87b      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ba8:	2b60      	cmp	r3, #96	; 0x60
 8003baa:	d050      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0x11a>
 8003bac:	2b60      	cmp	r3, #96	; 0x60
 8003bae:	d877      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb0:	2b50      	cmp	r3, #80	; 0x50
 8003bb2:	d03c      	beq.n	8003c2e <HAL_TIM_ConfigClockSource+0xfa>
 8003bb4:	2b50      	cmp	r3, #80	; 0x50
 8003bb6:	d873      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb8:	2b40      	cmp	r3, #64	; 0x40
 8003bba:	d058      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x13a>
 8003bbc:	2b40      	cmp	r3, #64	; 0x40
 8003bbe:	d86f      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b30      	cmp	r3, #48	; 0x30
 8003bc2:	d064      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bc4:	2b30      	cmp	r3, #48	; 0x30
 8003bc6:	d86b      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	d060      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bcc:	2b20      	cmp	r3, #32
 8003bce:	d867      	bhi.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d05c      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d05a      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x15a>
 8003bd8:	e062      	b.n	8003ca0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6899      	ldr	r1, [r3, #8]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	f000 fa80 	bl	80040ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	609a      	str	r2, [r3, #8]
      break;
 8003c06:	e04f      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6818      	ldr	r0, [r3, #0]
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	6899      	ldr	r1, [r3, #8]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685a      	ldr	r2, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f000 fa69 	bl	80040ee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689a      	ldr	r2, [r3, #8]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c2a:	609a      	str	r2, [r3, #8]
      break;
 8003c2c:	e03c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	6859      	ldr	r1, [r3, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f000 f9dd 	bl	8003ffa <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2150      	movs	r1, #80	; 0x50
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fa36 	bl	80040b8 <TIM_ITRx_SetConfig>
      break;
 8003c4c:	e02c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6859      	ldr	r1, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f000 f9fc 	bl	8004058 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2160      	movs	r1, #96	; 0x60
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fa26 	bl	80040b8 <TIM_ITRx_SetConfig>
      break;
 8003c6c:	e01c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6859      	ldr	r1, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f000 f9bd 	bl	8003ffa <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2140      	movs	r1, #64	; 0x40
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 fa16 	bl	80040b8 <TIM_ITRx_SetConfig>
      break;
 8003c8c:	e00c      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4619      	mov	r1, r3
 8003c98:	4610      	mov	r0, r2
 8003c9a:	f000 fa0d 	bl	80040b8 <TIM_ITRx_SetConfig>
      break;
 8003c9e:	e003      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca4:	e000      	b.n	8003ca8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ca6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b082      	sub	sp, #8
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_SlaveConfigSynchro+0x18>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e031      	b.n	8003d3e <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2202      	movs	r2, #2
 8003ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003cea:	6839      	ldr	r1, [r7, #0]
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f8f3 	bl	8003ed8 <TIM_SlaveTimer_SetConfig>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d009      	beq.n	8003d0c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e018      	b.n	8003d3e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d2a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a40      	ldr	r2, [pc, #256]	; (8003eac <TIM_Base_SetConfig+0x114>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d013      	beq.n	8003dd8 <TIM_Base_SetConfig+0x40>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003db6:	d00f      	beq.n	8003dd8 <TIM_Base_SetConfig+0x40>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a3d      	ldr	r2, [pc, #244]	; (8003eb0 <TIM_Base_SetConfig+0x118>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d00b      	beq.n	8003dd8 <TIM_Base_SetConfig+0x40>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a3c      	ldr	r2, [pc, #240]	; (8003eb4 <TIM_Base_SetConfig+0x11c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d007      	beq.n	8003dd8 <TIM_Base_SetConfig+0x40>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	4a3b      	ldr	r2, [pc, #236]	; (8003eb8 <TIM_Base_SetConfig+0x120>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d003      	beq.n	8003dd8 <TIM_Base_SetConfig+0x40>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a3a      	ldr	r2, [pc, #232]	; (8003ebc <TIM_Base_SetConfig+0x124>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d108      	bne.n	8003dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a2f      	ldr	r2, [pc, #188]	; (8003eac <TIM_Base_SetConfig+0x114>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d02b      	beq.n	8003e4a <TIM_Base_SetConfig+0xb2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df8:	d027      	beq.n	8003e4a <TIM_Base_SetConfig+0xb2>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a2c      	ldr	r2, [pc, #176]	; (8003eb0 <TIM_Base_SetConfig+0x118>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d023      	beq.n	8003e4a <TIM_Base_SetConfig+0xb2>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a2b      	ldr	r2, [pc, #172]	; (8003eb4 <TIM_Base_SetConfig+0x11c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d01f      	beq.n	8003e4a <TIM_Base_SetConfig+0xb2>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a2a      	ldr	r2, [pc, #168]	; (8003eb8 <TIM_Base_SetConfig+0x120>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01b      	beq.n	8003e4a <TIM_Base_SetConfig+0xb2>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4a29      	ldr	r2, [pc, #164]	; (8003ebc <TIM_Base_SetConfig+0x124>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d017      	beq.n	8003e4a <TIM_Base_SetConfig+0xb2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a28      	ldr	r2, [pc, #160]	; (8003ec0 <TIM_Base_SetConfig+0x128>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <TIM_Base_SetConfig+0xb2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a27      	ldr	r2, [pc, #156]	; (8003ec4 <TIM_Base_SetConfig+0x12c>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00f      	beq.n	8003e4a <TIM_Base_SetConfig+0xb2>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a26      	ldr	r2, [pc, #152]	; (8003ec8 <TIM_Base_SetConfig+0x130>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00b      	beq.n	8003e4a <TIM_Base_SetConfig+0xb2>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a25      	ldr	r2, [pc, #148]	; (8003ecc <TIM_Base_SetConfig+0x134>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d007      	beq.n	8003e4a <TIM_Base_SetConfig+0xb2>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a24      	ldr	r2, [pc, #144]	; (8003ed0 <TIM_Base_SetConfig+0x138>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d003      	beq.n	8003e4a <TIM_Base_SetConfig+0xb2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a23      	ldr	r2, [pc, #140]	; (8003ed4 <TIM_Base_SetConfig+0x13c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d108      	bne.n	8003e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689a      	ldr	r2, [r3, #8]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a0a      	ldr	r2, [pc, #40]	; (8003eac <TIM_Base_SetConfig+0x114>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_Base_SetConfig+0xf8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a0c      	ldr	r2, [pc, #48]	; (8003ebc <TIM_Base_SetConfig+0x124>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d103      	bne.n	8003e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	615a      	str	r2, [r3, #20]
}
 8003e9e:	bf00      	nop
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40000400 	.word	0x40000400
 8003eb4:	40000800 	.word	0x40000800
 8003eb8:	40000c00 	.word	0x40000c00
 8003ebc:	40010400 	.word	0x40010400
 8003ec0:	40014000 	.word	0x40014000
 8003ec4:	40014400 	.word	0x40014400
 8003ec8:	40014800 	.word	0x40014800
 8003ecc:	40001800 	.word	0x40001800
 8003ed0:	40001c00 	.word	0x40001c00
 8003ed4:	40002000 	.word	0x40002000

08003ed8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f023 0307 	bic.w	r3, r3, #7
 8003f06:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	693a      	ldr	r2, [r7, #16]
 8003f18:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b70      	cmp	r3, #112	; 0x70
 8003f20:	d01a      	beq.n	8003f58 <TIM_SlaveTimer_SetConfig+0x80>
 8003f22:	2b70      	cmp	r3, #112	; 0x70
 8003f24:	d860      	bhi.n	8003fe8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f26:	2b60      	cmp	r3, #96	; 0x60
 8003f28:	d054      	beq.n	8003fd4 <TIM_SlaveTimer_SetConfig+0xfc>
 8003f2a:	2b60      	cmp	r3, #96	; 0x60
 8003f2c:	d85c      	bhi.n	8003fe8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f2e:	2b50      	cmp	r3, #80	; 0x50
 8003f30:	d046      	beq.n	8003fc0 <TIM_SlaveTimer_SetConfig+0xe8>
 8003f32:	2b50      	cmp	r3, #80	; 0x50
 8003f34:	d858      	bhi.n	8003fe8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f36:	2b40      	cmp	r3, #64	; 0x40
 8003f38:	d019      	beq.n	8003f6e <TIM_SlaveTimer_SetConfig+0x96>
 8003f3a:	2b40      	cmp	r3, #64	; 0x40
 8003f3c:	d854      	bhi.n	8003fe8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f3e:	2b30      	cmp	r3, #48	; 0x30
 8003f40:	d055      	beq.n	8003fee <TIM_SlaveTimer_SetConfig+0x116>
 8003f42:	2b30      	cmp	r3, #48	; 0x30
 8003f44:	d850      	bhi.n	8003fe8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	d051      	beq.n	8003fee <TIM_SlaveTimer_SetConfig+0x116>
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d84c      	bhi.n	8003fe8 <TIM_SlaveTimer_SetConfig+0x110>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d04d      	beq.n	8003fee <TIM_SlaveTimer_SetConfig+0x116>
 8003f52:	2b10      	cmp	r3, #16
 8003f54:	d04b      	beq.n	8003fee <TIM_SlaveTimer_SetConfig+0x116>
 8003f56:	e047      	b.n	8003fe8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68d9      	ldr	r1, [r3, #12]
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	f000 f8c1 	bl	80040ee <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003f6c:	e040      	b.n	8003ff0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d101      	bne.n	8003f7a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e03b      	b.n	8003ff2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a1a      	ldr	r2, [r3, #32]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 0201 	bic.w	r2, r2, #1
 8003f90:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fa0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68ba      	ldr	r2, [r7, #8]
 8003fb4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	621a      	str	r2, [r3, #32]
      break;
 8003fbe:	e017      	b.n	8003ff0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	6899      	ldr	r1, [r3, #8]
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	461a      	mov	r2, r3
 8003fce:	f000 f814 	bl	8003ffa <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003fd2:	e00d      	b.n	8003ff0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6818      	ldr	r0, [r3, #0]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	6899      	ldr	r1, [r3, #8]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	f000 f839 	bl	8004058 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003fe6:	e003      	b.n	8003ff0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
      break;
 8003fec:	e000      	b.n	8003ff0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003fee:	bf00      	nop
  }

  return status;
 8003ff0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3718      	adds	r7, #24
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b087      	sub	sp, #28
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	f023 0201 	bic.w	r2, r3, #1
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004024:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	f023 030a 	bic.w	r3, r3, #10
 8004036:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	693a      	ldr	r2, [r7, #16]
 8004044:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	621a      	str	r2, [r3, #32]
}
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6a1b      	ldr	r3, [r3, #32]
 8004068:	f023 0210 	bic.w	r2, r3, #16
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	6a1b      	ldr	r3, [r3, #32]
 800407a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004082:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	031b      	lsls	r3, r3, #12
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004094:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	621a      	str	r2, [r3, #32]
}
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f043 0307 	orr.w	r3, r3, #7
 80040da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	609a      	str	r2, [r3, #8]
}
 80040e2:	bf00      	nop
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b087      	sub	sp, #28
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004108:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	021a      	lsls	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	431a      	orrs	r2, r3
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	4313      	orrs	r3, r2
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	609a      	str	r2, [r3, #8]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004140:	2b01      	cmp	r3, #1
 8004142:	d101      	bne.n	8004148 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004144:	2302      	movs	r3, #2
 8004146:	e05a      	b.n	80041fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800416e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a21      	ldr	r2, [pc, #132]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d022      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004194:	d01d      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1d      	ldr	r2, [pc, #116]	; (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d018      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d013      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a1a      	ldr	r2, [pc, #104]	; (8004218 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d00e      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a18      	ldr	r2, [pc, #96]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a17      	ldr	r2, [pc, #92]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a15      	ldr	r2, [pc, #84]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d10c      	bne.n	80041ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40010000 	.word	0x40010000
 8004210:	40000400 	.word	0x40000400
 8004214:	40000800 	.word	0x40000800
 8004218:	40000c00 	.word	0x40000c00
 800421c:	40010400 	.word	0x40010400
 8004220:	40014000 	.word	0x40014000
 8004224:	40001800 	.word	0x40001800

08004228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004244:	bf00      	nop
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e03f      	b.n	80042e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd fb40 	bl	80018fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	; 0x24
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004292:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 fd19 	bl	8004ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	691a      	ldr	r2, [r3, #16]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68da      	ldr	r2, [r3, #12]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b085      	sub	sp, #20
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	4613      	mov	r3, r2
 80042f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b20      	cmp	r3, #32
 8004302:	d130      	bne.n	8004366 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_Transmit_IT+0x26>
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e029      	b.n	8004368 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800431a:	2b01      	cmp	r3, #1
 800431c:	d101      	bne.n	8004322 <HAL_UART_Transmit_IT+0x38>
 800431e:	2302      	movs	r3, #2
 8004320:	e022      	b.n	8004368 <HAL_UART_Transmit_IT+0x7e>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	88fa      	ldrh	r2, [r7, #6]
 8004334:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	88fa      	ldrh	r2, [r7, #6]
 800433a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2221      	movs	r2, #33	; 0x21
 8004346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004360:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	e000      	b.n	8004368 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004366:	2302      	movs	r3, #2
  }
}
 8004368:	4618      	mov	r0, r3
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	4613      	mov	r3, r2
 8004380:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b20      	cmp	r3, #32
 800438c:	d11d      	bne.n	80043ca <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d002      	beq.n	800439a <HAL_UART_Receive_IT+0x26>
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e016      	b.n	80043cc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_UART_Receive_IT+0x38>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e00f      	b.n	80043cc <HAL_UART_Receive_IT+0x58>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043ba:	88fb      	ldrh	r3, [r7, #6]
 80043bc:	461a      	mov	r2, r3
 80043be:	68b9      	ldr	r1, [r7, #8]
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 faab 	bl	800491c <UART_Start_Receive_IT>
 80043c6:	4603      	mov	r3, r0
 80043c8:	e000      	b.n	80043cc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80043ca:	2302      	movs	r3, #2
  }
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b0ba      	sub	sp, #232	; 0xe8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004400:	2300      	movs	r3, #0
 8004402:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004412:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10f      	bne.n	800443a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	d009      	beq.n	800443a <HAL_UART_IRQHandler+0x66>
 8004426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fb8f 	bl	8004b56 <UART_Receive_IT>
      return;
 8004438:	e256      	b.n	80048e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800443a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800443e:	2b00      	cmp	r3, #0
 8004440:	f000 80de 	beq.w	8004600 <HAL_UART_IRQHandler+0x22c>
 8004444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b00      	cmp	r3, #0
 800444e:	d106      	bne.n	800445e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004454:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80d1 	beq.w	8004600 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800445e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_UART_IRQHandler+0xae>
 800446a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d005      	beq.n	8004482 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f043 0201 	orr.w	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b00      	cmp	r3, #0
 800448c:	d00b      	beq.n	80044a6 <HAL_UART_IRQHandler+0xd2>
 800448e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d005      	beq.n	80044a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	f043 0202 	orr.w	r2, r3, #2
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00b      	beq.n	80044ca <HAL_UART_IRQHandler+0xf6>
 80044b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d005      	beq.n	80044ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c2:	f043 0204 	orr.w	r2, r3, #4
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d011      	beq.n	80044fa <HAL_UART_IRQHandler+0x126>
 80044d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044da:	f003 0320 	and.w	r3, r3, #32
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d105      	bne.n	80044ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80044e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	f043 0208 	orr.w	r2, r3, #8
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 81ed 	beq.w	80048de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_UART_IRQHandler+0x14e>
 8004510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fb1a 	bl	8004b56 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d103      	bne.n	800454e <HAL_UART_IRQHandler+0x17a>
 8004546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d04f      	beq.n	80045ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fa22 	bl	8004998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b40      	cmp	r3, #64	; 0x40
 8004560:	d141      	bne.n	80045e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3314      	adds	r3, #20
 8004568:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800457c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004580:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3314      	adds	r3, #20
 800458a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800458e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004592:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004596:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800459a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800459e:	e841 2300 	strex	r3, r2, [r1]
 80045a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1d9      	bne.n	8004562 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d013      	beq.n	80045de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ba:	4a7d      	ldr	r2, [pc, #500]	; (80047b0 <HAL_UART_IRQHandler+0x3dc>)
 80045bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fe f873 	bl	80026ae <HAL_DMA_Abort_IT>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d016      	beq.n	80045fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045d8:	4610      	mov	r0, r2
 80045da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045dc:	e00e      	b.n	80045fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f000 f986 	bl	80048f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045e4:	e00a      	b.n	80045fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f982 	bl	80048f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ec:	e006      	b.n	80045fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f97e 	bl	80048f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80045fa:	e170      	b.n	80048de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045fc:	bf00      	nop
    return;
 80045fe:	e16e      	b.n	80048de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	2b01      	cmp	r3, #1
 8004606:	f040 814a 	bne.w	800489e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800460a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8143 	beq.w	800489e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 813c 	beq.w	800489e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004646:	2b40      	cmp	r3, #64	; 0x40
 8004648:	f040 80b4 	bne.w	80047b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004658:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 8140 	beq.w	80048e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800466a:	429a      	cmp	r2, r3
 800466c:	f080 8139 	bcs.w	80048e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004676:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	f000 8088 	beq.w	8004796 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004690:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800469c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	330c      	adds	r3, #12
 80046ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80046b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80046be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80046ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1d9      	bne.n	8004686 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3314      	adds	r3, #20
 80046d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046dc:	e853 3f00 	ldrex	r3, [r3]
 80046e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80046e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046e4:	f023 0301 	bic.w	r3, r3, #1
 80046e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	3314      	adds	r3, #20
 80046f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80046f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80046fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80046fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e1      	bne.n	80046d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3314      	adds	r3, #20
 8004714:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004716:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004718:	e853 3f00 	ldrex	r3, [r3]
 800471c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800471e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004720:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3314      	adds	r3, #20
 800472e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004732:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004734:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004736:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004738:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800473a:	e841 2300 	strex	r3, r2, [r1]
 800473e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004740:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004742:	2b00      	cmp	r3, #0
 8004744:	d1e3      	bne.n	800470e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	330c      	adds	r3, #12
 800475a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004766:	f023 0310 	bic.w	r3, r3, #16
 800476a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004778:	65ba      	str	r2, [r7, #88]	; 0x58
 800477a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800477e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004780:	e841 2300 	strex	r3, r2, [r1]
 8004784:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004788:	2b00      	cmp	r3, #0
 800478a:	d1e3      	bne.n	8004754 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004790:	4618      	mov	r0, r3
 8004792:	f7fd ff1c 	bl	80025ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800479e:	b29b      	uxth	r3, r3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f8ac 	bl	8004904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80047ac:	e099      	b.n	80048e2 <HAL_UART_IRQHandler+0x50e>
 80047ae:	bf00      	nop
 80047b0:	08004a5f 	.word	0x08004a5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047bc:	b29b      	uxth	r3, r3
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 808b 	beq.w	80048e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80047d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 8086 	beq.w	80048e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80047fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004800:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004802:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004804:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004806:	e841 2300 	strex	r3, r2, [r1]
 800480a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800480c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e3      	bne.n	80047da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3314      	adds	r3, #20
 8004818:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481c:	e853 3f00 	ldrex	r3, [r3]
 8004820:	623b      	str	r3, [r7, #32]
   return(result);
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	3314      	adds	r3, #20
 8004832:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004836:	633a      	str	r2, [r7, #48]	; 0x30
 8004838:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800483c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e3      	bne.n	8004812 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	330c      	adds	r3, #12
 800485e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	e853 3f00 	ldrex	r3, [r3]
 8004866:	60fb      	str	r3, [r7, #12]
   return(result);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0310 	bic.w	r3, r3, #16
 800486e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	330c      	adds	r3, #12
 8004878:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800487c:	61fa      	str	r2, [r7, #28]
 800487e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	69b9      	ldr	r1, [r7, #24]
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	617b      	str	r3, [r7, #20]
   return(result);
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e3      	bne.n	8004858 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f000 f834 	bl	8004904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800489c:	e023      	b.n	80048e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800489e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_UART_IRQHandler+0x4ea>
 80048aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f8e5 	bl	8004a86 <UART_Transmit_IT>
    return;
 80048bc:	e014      	b.n	80048e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00e      	beq.n	80048e8 <HAL_UART_IRQHandler+0x514>
 80048ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d008      	beq.n	80048e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f925 	bl	8004b26 <UART_EndTransmit_IT>
    return;
 80048dc:	e004      	b.n	80048e8 <HAL_UART_IRQHandler+0x514>
    return;
 80048de:	bf00      	nop
 80048e0:	e002      	b.n	80048e8 <HAL_UART_IRQHandler+0x514>
      return;
 80048e2:	bf00      	nop
 80048e4:	e000      	b.n	80048e8 <HAL_UART_IRQHandler+0x514>
      return;
 80048e6:	bf00      	nop
  }
}
 80048e8:	37e8      	adds	r7, #232	; 0xe8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop

080048f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	4613      	mov	r3, r2
 8004928:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	88fa      	ldrh	r2, [r7, #6]
 8004934:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	88fa      	ldrh	r2, [r7, #6]
 800493a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2222      	movs	r2, #34	; 0x22
 8004946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004968:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f042 0201 	orr.w	r2, r2, #1
 8004978:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0220 	orr.w	r2, r2, #32
 8004988:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004998:	b480      	push	{r7}
 800499a:	b095      	sub	sp, #84	; 0x54
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	330c      	adds	r3, #12
 80049be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049c0:	643a      	str	r2, [r7, #64]	; 0x40
 80049c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e5      	bne.n	80049a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3314      	adds	r3, #20
 80049da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	e853 3f00 	ldrex	r3, [r3]
 80049e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f023 0301 	bic.w	r3, r3, #1
 80049ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3314      	adds	r3, #20
 80049f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fc:	e841 2300 	strex	r3, r2, [r1]
 8004a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1e5      	bne.n	80049d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d119      	bne.n	8004a44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f023 0310 	bic.w	r3, r3, #16
 8004a26:	647b      	str	r3, [r7, #68]	; 0x44
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a30:	61ba      	str	r2, [r7, #24]
 8004a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6979      	ldr	r1, [r7, #20]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	613b      	str	r3, [r7, #16]
   return(result);
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a52:	bf00      	nop
 8004a54:	3754      	adds	r7, #84	; 0x54
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff ff39 	bl	80048f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b085      	sub	sp, #20
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b21      	cmp	r3, #33	; 0x21
 8004a98:	d13e      	bne.n	8004b18 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa2:	d114      	bne.n	8004ace <UART_Transmit_IT+0x48>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	691b      	ldr	r3, [r3, #16]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d110      	bne.n	8004ace <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	881b      	ldrh	r3, [r3, #0]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	1c9a      	adds	r2, r3, #2
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	621a      	str	r2, [r3, #32]
 8004acc:	e008      	b.n	8004ae0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	1c59      	adds	r1, r3, #1
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6211      	str	r1, [r2, #32]
 8004ad8:	781a      	ldrb	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	4619      	mov	r1, r3
 8004aee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10f      	bne.n	8004b14 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b02:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b12:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b14:	2300      	movs	r3, #0
 8004b16:	e000      	b.n	8004b1a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b18:	2302      	movs	r3, #2
  }
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b082      	sub	sp, #8
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b3c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f7fc fd38 	bl	80015bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b4c:	2300      	movs	r3, #0
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b08c      	sub	sp, #48	; 0x30
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b22      	cmp	r3, #34	; 0x22
 8004b68:	f040 80ab 	bne.w	8004cc2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b74:	d117      	bne.n	8004ba6 <UART_Receive_IT+0x50>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d113      	bne.n	8004ba6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b98:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	1c9a      	adds	r2, r3, #2
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ba4:	e026      	b.n	8004bf4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bb8:	d007      	beq.n	8004bca <UART_Receive_IT+0x74>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10a      	bne.n	8004bd8 <UART_Receive_IT+0x82>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	b2da      	uxtb	r2, r3
 8004bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	e008      	b.n	8004bea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4619      	mov	r1, r3
 8004c02:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d15a      	bne.n	8004cbe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0220 	bic.w	r2, r2, #32
 8004c16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695a      	ldr	r2, [r3, #20]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0201 	bic.w	r2, r2, #1
 8004c36:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d135      	bne.n	8004cb4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	330c      	adds	r3, #12
 8004c54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f023 0310 	bic.w	r3, r3, #16
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6e:	623a      	str	r2, [r7, #32]
 8004c70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	69f9      	ldr	r1, [r7, #28]
 8004c74:	6a3a      	ldr	r2, [r7, #32]
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e5      	bne.n	8004c4e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0310 	and.w	r3, r3, #16
 8004c8c:	2b10      	cmp	r3, #16
 8004c8e:	d10a      	bne.n	8004ca6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff fe29 	bl	8004904 <HAL_UARTEx_RxEventCallback>
 8004cb2:	e002      	b.n	8004cba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f7fc fc3f 	bl	8001538 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	e002      	b.n	8004cc4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e000      	b.n	8004cc4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004cc2:	2302      	movs	r3, #2
  }
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3730      	adds	r7, #48	; 0x30
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004cd0:	b0c0      	sub	sp, #256	; 0x100
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce8:	68d9      	ldr	r1, [r3, #12]
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	ea40 0301 	orr.w	r3, r0, r1
 8004cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	431a      	orrs	r2, r3
 8004d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004d24:	f021 010c 	bic.w	r1, r1, #12
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004d32:	430b      	orrs	r3, r1
 8004d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d46:	6999      	ldr	r1, [r3, #24]
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	ea40 0301 	orr.w	r3, r0, r1
 8004d52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b8f      	ldr	r3, [pc, #572]	; (8004f98 <UART_SetConfig+0x2cc>)
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d005      	beq.n	8004d6c <UART_SetConfig+0xa0>
 8004d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	4b8d      	ldr	r3, [pc, #564]	; (8004f9c <UART_SetConfig+0x2d0>)
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d104      	bne.n	8004d76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7fd ff76 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 8004d70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d74:	e003      	b.n	8004d7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d76:	f7fd ff5d 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 8004d7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d82:	69db      	ldr	r3, [r3, #28]
 8004d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d88:	f040 810c 	bne.w	8004fa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d90:	2200      	movs	r2, #0
 8004d92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d9e:	4622      	mov	r2, r4
 8004da0:	462b      	mov	r3, r5
 8004da2:	1891      	adds	r1, r2, r2
 8004da4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004da6:	415b      	adcs	r3, r3
 8004da8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004dae:	4621      	mov	r1, r4
 8004db0:	eb12 0801 	adds.w	r8, r2, r1
 8004db4:	4629      	mov	r1, r5
 8004db6:	eb43 0901 	adc.w	r9, r3, r1
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dce:	4690      	mov	r8, r2
 8004dd0:	4699      	mov	r9, r3
 8004dd2:	4623      	mov	r3, r4
 8004dd4:	eb18 0303 	adds.w	r3, r8, r3
 8004dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ddc:	462b      	mov	r3, r5
 8004dde:	eb49 0303 	adc.w	r3, r9, r3
 8004de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004df2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	18db      	adds	r3, r3, r3
 8004dfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004e00:	4613      	mov	r3, r2
 8004e02:	eb42 0303 	adc.w	r3, r2, r3
 8004e06:	657b      	str	r3, [r7, #84]	; 0x54
 8004e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004e0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004e10:	f7fb ff5a 	bl	8000cc8 <__aeabi_uldivmod>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4b61      	ldr	r3, [pc, #388]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e1e:	095b      	lsrs	r3, r3, #5
 8004e20:	011c      	lsls	r4, r3, #4
 8004e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004e30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	1891      	adds	r1, r2, r2
 8004e3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004e3c:	415b      	adcs	r3, r3
 8004e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004e44:	4641      	mov	r1, r8
 8004e46:	eb12 0a01 	adds.w	sl, r2, r1
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	eb43 0b01 	adc.w	fp, r3, r1
 8004e50:	f04f 0200 	mov.w	r2, #0
 8004e54:	f04f 0300 	mov.w	r3, #0
 8004e58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e64:	4692      	mov	sl, r2
 8004e66:	469b      	mov	fp, r3
 8004e68:	4643      	mov	r3, r8
 8004e6a:	eb1a 0303 	adds.w	r3, sl, r3
 8004e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e72:	464b      	mov	r3, r9
 8004e74:	eb4b 0303 	adc.w	r3, fp, r3
 8004e78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e90:	460b      	mov	r3, r1
 8004e92:	18db      	adds	r3, r3, r3
 8004e94:	643b      	str	r3, [r7, #64]	; 0x40
 8004e96:	4613      	mov	r3, r2
 8004e98:	eb42 0303 	adc.w	r3, r2, r3
 8004e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ea6:	f7fb ff0f 	bl	8000cc8 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4b3b      	ldr	r3, [pc, #236]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	2264      	movs	r2, #100	; 0x64
 8004eba:	fb02 f303 	mul.w	r3, r2, r3
 8004ebe:	1acb      	subs	r3, r1, r3
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ec6:	4b36      	ldr	r3, [pc, #216]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ecc:	095b      	lsrs	r3, r3, #5
 8004ece:	005b      	lsls	r3, r3, #1
 8004ed0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ed4:	441c      	add	r4, r3
 8004ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ee0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ee8:	4642      	mov	r2, r8
 8004eea:	464b      	mov	r3, r9
 8004eec:	1891      	adds	r1, r2, r2
 8004eee:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ef0:	415b      	adcs	r3, r3
 8004ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ef8:	4641      	mov	r1, r8
 8004efa:	1851      	adds	r1, r2, r1
 8004efc:	6339      	str	r1, [r7, #48]	; 0x30
 8004efe:	4649      	mov	r1, r9
 8004f00:	414b      	adcs	r3, r1
 8004f02:	637b      	str	r3, [r7, #52]	; 0x34
 8004f04:	f04f 0200 	mov.w	r2, #0
 8004f08:	f04f 0300 	mov.w	r3, #0
 8004f0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004f10:	4659      	mov	r1, fp
 8004f12:	00cb      	lsls	r3, r1, #3
 8004f14:	4651      	mov	r1, sl
 8004f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f1a:	4651      	mov	r1, sl
 8004f1c:	00ca      	lsls	r2, r1, #3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	4619      	mov	r1, r3
 8004f22:	4603      	mov	r3, r0
 8004f24:	4642      	mov	r2, r8
 8004f26:	189b      	adds	r3, r3, r2
 8004f28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	460a      	mov	r2, r1
 8004f30:	eb42 0303 	adc.w	r3, r2, r3
 8004f34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004f44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	18db      	adds	r3, r3, r3
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f52:	4613      	mov	r3, r2
 8004f54:	eb42 0303 	adc.w	r3, r2, r3
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004f62:	f7fb feb1 	bl	8000cc8 <__aeabi_uldivmod>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f70:	095b      	lsrs	r3, r3, #5
 8004f72:	2164      	movs	r1, #100	; 0x64
 8004f74:	fb01 f303 	mul.w	r3, r1, r3
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	3332      	adds	r3, #50	; 0x32
 8004f7e:	4a08      	ldr	r2, [pc, #32]	; (8004fa0 <UART_SetConfig+0x2d4>)
 8004f80:	fba2 2303 	umull	r2, r3, r2, r3
 8004f84:	095b      	lsrs	r3, r3, #5
 8004f86:	f003 0207 	and.w	r2, r3, #7
 8004f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4422      	add	r2, r4
 8004f92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f94:	e105      	b.n	80051a2 <UART_SetConfig+0x4d6>
 8004f96:	bf00      	nop
 8004f98:	40011000 	.word	0x40011000
 8004f9c:	40011400 	.word	0x40011400
 8004fa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004fb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004fb6:	4642      	mov	r2, r8
 8004fb8:	464b      	mov	r3, r9
 8004fba:	1891      	adds	r1, r2, r2
 8004fbc:	6239      	str	r1, [r7, #32]
 8004fbe:	415b      	adcs	r3, r3
 8004fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004fc6:	4641      	mov	r1, r8
 8004fc8:	1854      	adds	r4, r2, r1
 8004fca:	4649      	mov	r1, r9
 8004fcc:	eb43 0501 	adc.w	r5, r3, r1
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	00eb      	lsls	r3, r5, #3
 8004fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fde:	00e2      	lsls	r2, r4, #3
 8004fe0:	4614      	mov	r4, r2
 8004fe2:	461d      	mov	r5, r3
 8004fe4:	4643      	mov	r3, r8
 8004fe6:	18e3      	adds	r3, r4, r3
 8004fe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004fec:	464b      	mov	r3, r9
 8004fee:	eb45 0303 	adc.w	r3, r5, r3
 8004ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005006:	f04f 0200 	mov.w	r2, #0
 800500a:	f04f 0300 	mov.w	r3, #0
 800500e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005012:	4629      	mov	r1, r5
 8005014:	008b      	lsls	r3, r1, #2
 8005016:	4621      	mov	r1, r4
 8005018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501c:	4621      	mov	r1, r4
 800501e:	008a      	lsls	r2, r1, #2
 8005020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005024:	f7fb fe50 	bl	8000cc8 <__aeabi_uldivmod>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4b60      	ldr	r3, [pc, #384]	; (80051b0 <UART_SetConfig+0x4e4>)
 800502e:	fba3 2302 	umull	r2, r3, r3, r2
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	011c      	lsls	r4, r3, #4
 8005036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800503a:	2200      	movs	r2, #0
 800503c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005040:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005048:	4642      	mov	r2, r8
 800504a:	464b      	mov	r3, r9
 800504c:	1891      	adds	r1, r2, r2
 800504e:	61b9      	str	r1, [r7, #24]
 8005050:	415b      	adcs	r3, r3
 8005052:	61fb      	str	r3, [r7, #28]
 8005054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005058:	4641      	mov	r1, r8
 800505a:	1851      	adds	r1, r2, r1
 800505c:	6139      	str	r1, [r7, #16]
 800505e:	4649      	mov	r1, r9
 8005060:	414b      	adcs	r3, r1
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005070:	4659      	mov	r1, fp
 8005072:	00cb      	lsls	r3, r1, #3
 8005074:	4651      	mov	r1, sl
 8005076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800507a:	4651      	mov	r1, sl
 800507c:	00ca      	lsls	r2, r1, #3
 800507e:	4610      	mov	r0, r2
 8005080:	4619      	mov	r1, r3
 8005082:	4603      	mov	r3, r0
 8005084:	4642      	mov	r2, r8
 8005086:	189b      	adds	r3, r3, r2
 8005088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800508c:	464b      	mov	r3, r9
 800508e:	460a      	mov	r2, r1
 8005090:	eb42 0303 	adc.w	r3, r2, r3
 8005094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80050a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	f04f 0300 	mov.w	r3, #0
 80050ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80050b0:	4649      	mov	r1, r9
 80050b2:	008b      	lsls	r3, r1, #2
 80050b4:	4641      	mov	r1, r8
 80050b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ba:	4641      	mov	r1, r8
 80050bc:	008a      	lsls	r2, r1, #2
 80050be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80050c2:	f7fb fe01 	bl	8000cc8 <__aeabi_uldivmod>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <UART_SetConfig+0x4e4>)
 80050cc:	fba3 1302 	umull	r1, r3, r3, r2
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	2164      	movs	r1, #100	; 0x64
 80050d4:	fb01 f303 	mul.w	r3, r1, r3
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	3332      	adds	r3, #50	; 0x32
 80050de:	4a34      	ldr	r2, [pc, #208]	; (80051b0 <UART_SetConfig+0x4e4>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ea:	441c      	add	r4, r3
 80050ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050f0:	2200      	movs	r2, #0
 80050f2:	673b      	str	r3, [r7, #112]	; 0x70
 80050f4:	677a      	str	r2, [r7, #116]	; 0x74
 80050f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80050fa:	4642      	mov	r2, r8
 80050fc:	464b      	mov	r3, r9
 80050fe:	1891      	adds	r1, r2, r2
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	415b      	adcs	r3, r3
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800510a:	4641      	mov	r1, r8
 800510c:	1851      	adds	r1, r2, r1
 800510e:	6039      	str	r1, [r7, #0]
 8005110:	4649      	mov	r1, r9
 8005112:	414b      	adcs	r3, r1
 8005114:	607b      	str	r3, [r7, #4]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005122:	4659      	mov	r1, fp
 8005124:	00cb      	lsls	r3, r1, #3
 8005126:	4651      	mov	r1, sl
 8005128:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800512c:	4651      	mov	r1, sl
 800512e:	00ca      	lsls	r2, r1, #3
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	4603      	mov	r3, r0
 8005136:	4642      	mov	r2, r8
 8005138:	189b      	adds	r3, r3, r2
 800513a:	66bb      	str	r3, [r7, #104]	; 0x68
 800513c:	464b      	mov	r3, r9
 800513e:	460a      	mov	r2, r1
 8005140:	eb42 0303 	adc.w	r3, r2, r3
 8005144:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	663b      	str	r3, [r7, #96]	; 0x60
 8005150:	667a      	str	r2, [r7, #100]	; 0x64
 8005152:	f04f 0200 	mov.w	r2, #0
 8005156:	f04f 0300 	mov.w	r3, #0
 800515a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800515e:	4649      	mov	r1, r9
 8005160:	008b      	lsls	r3, r1, #2
 8005162:	4641      	mov	r1, r8
 8005164:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005168:	4641      	mov	r1, r8
 800516a:	008a      	lsls	r2, r1, #2
 800516c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005170:	f7fb fdaa 	bl	8000cc8 <__aeabi_uldivmod>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <UART_SetConfig+0x4e4>)
 800517a:	fba3 1302 	umull	r1, r3, r3, r2
 800517e:	095b      	lsrs	r3, r3, #5
 8005180:	2164      	movs	r1, #100	; 0x64
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	3332      	adds	r3, #50	; 0x32
 800518c:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <UART_SetConfig+0x4e4>)
 800518e:	fba2 2303 	umull	r2, r3, r2, r3
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	f003 020f 	and.w	r2, r3, #15
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4422      	add	r2, r4
 80051a0:	609a      	str	r2, [r3, #8]
}
 80051a2:	bf00      	nop
 80051a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80051a8:	46bd      	mov	sp, r7
 80051aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ae:	bf00      	nop
 80051b0:	51eb851f 	.word	0x51eb851f

080051b4 <__errno>:
 80051b4:	4b01      	ldr	r3, [pc, #4]	; (80051bc <__errno+0x8>)
 80051b6:	6818      	ldr	r0, [r3, #0]
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20000014 	.word	0x20000014

080051c0 <__libc_init_array>:
 80051c0:	b570      	push	{r4, r5, r6, lr}
 80051c2:	4d0d      	ldr	r5, [pc, #52]	; (80051f8 <__libc_init_array+0x38>)
 80051c4:	4c0d      	ldr	r4, [pc, #52]	; (80051fc <__libc_init_array+0x3c>)
 80051c6:	1b64      	subs	r4, r4, r5
 80051c8:	10a4      	asrs	r4, r4, #2
 80051ca:	2600      	movs	r6, #0
 80051cc:	42a6      	cmp	r6, r4
 80051ce:	d109      	bne.n	80051e4 <__libc_init_array+0x24>
 80051d0:	4d0b      	ldr	r5, [pc, #44]	; (8005200 <__libc_init_array+0x40>)
 80051d2:	4c0c      	ldr	r4, [pc, #48]	; (8005204 <__libc_init_array+0x44>)
 80051d4:	f004 fc90 	bl	8009af8 <_init>
 80051d8:	1b64      	subs	r4, r4, r5
 80051da:	10a4      	asrs	r4, r4, #2
 80051dc:	2600      	movs	r6, #0
 80051de:	42a6      	cmp	r6, r4
 80051e0:	d105      	bne.n	80051ee <__libc_init_array+0x2e>
 80051e2:	bd70      	pop	{r4, r5, r6, pc}
 80051e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e8:	4798      	blx	r3
 80051ea:	3601      	adds	r6, #1
 80051ec:	e7ee      	b.n	80051cc <__libc_init_array+0xc>
 80051ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f2:	4798      	blx	r3
 80051f4:	3601      	adds	r6, #1
 80051f6:	e7f2      	b.n	80051de <__libc_init_array+0x1e>
 80051f8:	08009fdc 	.word	0x08009fdc
 80051fc:	08009fdc 	.word	0x08009fdc
 8005200:	08009fdc 	.word	0x08009fdc
 8005204:	08009fe0 	.word	0x08009fe0

08005208 <memset>:
 8005208:	4402      	add	r2, r0
 800520a:	4603      	mov	r3, r0
 800520c:	4293      	cmp	r3, r2
 800520e:	d100      	bne.n	8005212 <memset+0xa>
 8005210:	4770      	bx	lr
 8005212:	f803 1b01 	strb.w	r1, [r3], #1
 8005216:	e7f9      	b.n	800520c <memset+0x4>

08005218 <__cvt>:
 8005218:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800521c:	ec55 4b10 	vmov	r4, r5, d0
 8005220:	2d00      	cmp	r5, #0
 8005222:	460e      	mov	r6, r1
 8005224:	4619      	mov	r1, r3
 8005226:	462b      	mov	r3, r5
 8005228:	bfbb      	ittet	lt
 800522a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800522e:	461d      	movlt	r5, r3
 8005230:	2300      	movge	r3, #0
 8005232:	232d      	movlt	r3, #45	; 0x2d
 8005234:	700b      	strb	r3, [r1, #0]
 8005236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005238:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800523c:	4691      	mov	r9, r2
 800523e:	f023 0820 	bic.w	r8, r3, #32
 8005242:	bfbc      	itt	lt
 8005244:	4622      	movlt	r2, r4
 8005246:	4614      	movlt	r4, r2
 8005248:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800524c:	d005      	beq.n	800525a <__cvt+0x42>
 800524e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005252:	d100      	bne.n	8005256 <__cvt+0x3e>
 8005254:	3601      	adds	r6, #1
 8005256:	2102      	movs	r1, #2
 8005258:	e000      	b.n	800525c <__cvt+0x44>
 800525a:	2103      	movs	r1, #3
 800525c:	ab03      	add	r3, sp, #12
 800525e:	9301      	str	r3, [sp, #4]
 8005260:	ab02      	add	r3, sp, #8
 8005262:	9300      	str	r3, [sp, #0]
 8005264:	ec45 4b10 	vmov	d0, r4, r5
 8005268:	4653      	mov	r3, sl
 800526a:	4632      	mov	r2, r6
 800526c:	f001 fdac 	bl	8006dc8 <_dtoa_r>
 8005270:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005274:	4607      	mov	r7, r0
 8005276:	d102      	bne.n	800527e <__cvt+0x66>
 8005278:	f019 0f01 	tst.w	r9, #1
 800527c:	d022      	beq.n	80052c4 <__cvt+0xac>
 800527e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005282:	eb07 0906 	add.w	r9, r7, r6
 8005286:	d110      	bne.n	80052aa <__cvt+0x92>
 8005288:	783b      	ldrb	r3, [r7, #0]
 800528a:	2b30      	cmp	r3, #48	; 0x30
 800528c:	d10a      	bne.n	80052a4 <__cvt+0x8c>
 800528e:	2200      	movs	r2, #0
 8005290:	2300      	movs	r3, #0
 8005292:	4620      	mov	r0, r4
 8005294:	4629      	mov	r1, r5
 8005296:	f7fb fc37 	bl	8000b08 <__aeabi_dcmpeq>
 800529a:	b918      	cbnz	r0, 80052a4 <__cvt+0x8c>
 800529c:	f1c6 0601 	rsb	r6, r6, #1
 80052a0:	f8ca 6000 	str.w	r6, [sl]
 80052a4:	f8da 3000 	ldr.w	r3, [sl]
 80052a8:	4499      	add	r9, r3
 80052aa:	2200      	movs	r2, #0
 80052ac:	2300      	movs	r3, #0
 80052ae:	4620      	mov	r0, r4
 80052b0:	4629      	mov	r1, r5
 80052b2:	f7fb fc29 	bl	8000b08 <__aeabi_dcmpeq>
 80052b6:	b108      	cbz	r0, 80052bc <__cvt+0xa4>
 80052b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80052bc:	2230      	movs	r2, #48	; 0x30
 80052be:	9b03      	ldr	r3, [sp, #12]
 80052c0:	454b      	cmp	r3, r9
 80052c2:	d307      	bcc.n	80052d4 <__cvt+0xbc>
 80052c4:	9b03      	ldr	r3, [sp, #12]
 80052c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052c8:	1bdb      	subs	r3, r3, r7
 80052ca:	4638      	mov	r0, r7
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	b004      	add	sp, #16
 80052d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d4:	1c59      	adds	r1, r3, #1
 80052d6:	9103      	str	r1, [sp, #12]
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	e7f0      	b.n	80052be <__cvt+0xa6>

080052dc <__exponent>:
 80052dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052de:	4603      	mov	r3, r0
 80052e0:	2900      	cmp	r1, #0
 80052e2:	bfb8      	it	lt
 80052e4:	4249      	neglt	r1, r1
 80052e6:	f803 2b02 	strb.w	r2, [r3], #2
 80052ea:	bfb4      	ite	lt
 80052ec:	222d      	movlt	r2, #45	; 0x2d
 80052ee:	222b      	movge	r2, #43	; 0x2b
 80052f0:	2909      	cmp	r1, #9
 80052f2:	7042      	strb	r2, [r0, #1]
 80052f4:	dd2a      	ble.n	800534c <__exponent+0x70>
 80052f6:	f10d 0407 	add.w	r4, sp, #7
 80052fa:	46a4      	mov	ip, r4
 80052fc:	270a      	movs	r7, #10
 80052fe:	46a6      	mov	lr, r4
 8005300:	460a      	mov	r2, r1
 8005302:	fb91 f6f7 	sdiv	r6, r1, r7
 8005306:	fb07 1516 	mls	r5, r7, r6, r1
 800530a:	3530      	adds	r5, #48	; 0x30
 800530c:	2a63      	cmp	r2, #99	; 0x63
 800530e:	f104 34ff 	add.w	r4, r4, #4294967295
 8005312:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005316:	4631      	mov	r1, r6
 8005318:	dcf1      	bgt.n	80052fe <__exponent+0x22>
 800531a:	3130      	adds	r1, #48	; 0x30
 800531c:	f1ae 0502 	sub.w	r5, lr, #2
 8005320:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005324:	1c44      	adds	r4, r0, #1
 8005326:	4629      	mov	r1, r5
 8005328:	4561      	cmp	r1, ip
 800532a:	d30a      	bcc.n	8005342 <__exponent+0x66>
 800532c:	f10d 0209 	add.w	r2, sp, #9
 8005330:	eba2 020e 	sub.w	r2, r2, lr
 8005334:	4565      	cmp	r5, ip
 8005336:	bf88      	it	hi
 8005338:	2200      	movhi	r2, #0
 800533a:	4413      	add	r3, r2
 800533c:	1a18      	subs	r0, r3, r0
 800533e:	b003      	add	sp, #12
 8005340:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005342:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005346:	f804 2f01 	strb.w	r2, [r4, #1]!
 800534a:	e7ed      	b.n	8005328 <__exponent+0x4c>
 800534c:	2330      	movs	r3, #48	; 0x30
 800534e:	3130      	adds	r1, #48	; 0x30
 8005350:	7083      	strb	r3, [r0, #2]
 8005352:	70c1      	strb	r1, [r0, #3]
 8005354:	1d03      	adds	r3, r0, #4
 8005356:	e7f1      	b.n	800533c <__exponent+0x60>

08005358 <_printf_float>:
 8005358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800535c:	ed2d 8b02 	vpush	{d8}
 8005360:	b08d      	sub	sp, #52	; 0x34
 8005362:	460c      	mov	r4, r1
 8005364:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005368:	4616      	mov	r6, r2
 800536a:	461f      	mov	r7, r3
 800536c:	4605      	mov	r5, r0
 800536e:	f002 fe89 	bl	8008084 <_localeconv_r>
 8005372:	f8d0 a000 	ldr.w	sl, [r0]
 8005376:	4650      	mov	r0, sl
 8005378:	f7fa ff4a 	bl	8000210 <strlen>
 800537c:	2300      	movs	r3, #0
 800537e:	930a      	str	r3, [sp, #40]	; 0x28
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	9305      	str	r3, [sp, #20]
 8005384:	f8d8 3000 	ldr.w	r3, [r8]
 8005388:	f894 b018 	ldrb.w	fp, [r4, #24]
 800538c:	3307      	adds	r3, #7
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	f103 0208 	add.w	r2, r3, #8
 8005396:	f8c8 2000 	str.w	r2, [r8]
 800539a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053aa:	9307      	str	r3, [sp, #28]
 80053ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80053b0:	ee08 0a10 	vmov	s16, r0
 80053b4:	4b9f      	ldr	r3, [pc, #636]	; (8005634 <_printf_float+0x2dc>)
 80053b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053ba:	f04f 32ff 	mov.w	r2, #4294967295
 80053be:	f7fb fbd5 	bl	8000b6c <__aeabi_dcmpun>
 80053c2:	bb88      	cbnz	r0, 8005428 <_printf_float+0xd0>
 80053c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053c8:	4b9a      	ldr	r3, [pc, #616]	; (8005634 <_printf_float+0x2dc>)
 80053ca:	f04f 32ff 	mov.w	r2, #4294967295
 80053ce:	f7fb fbaf 	bl	8000b30 <__aeabi_dcmple>
 80053d2:	bb48      	cbnz	r0, 8005428 <_printf_float+0xd0>
 80053d4:	2200      	movs	r2, #0
 80053d6:	2300      	movs	r3, #0
 80053d8:	4640      	mov	r0, r8
 80053da:	4649      	mov	r1, r9
 80053dc:	f7fb fb9e 	bl	8000b1c <__aeabi_dcmplt>
 80053e0:	b110      	cbz	r0, 80053e8 <_printf_float+0x90>
 80053e2:	232d      	movs	r3, #45	; 0x2d
 80053e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053e8:	4b93      	ldr	r3, [pc, #588]	; (8005638 <_printf_float+0x2e0>)
 80053ea:	4894      	ldr	r0, [pc, #592]	; (800563c <_printf_float+0x2e4>)
 80053ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80053f0:	bf94      	ite	ls
 80053f2:	4698      	movls	r8, r3
 80053f4:	4680      	movhi	r8, r0
 80053f6:	2303      	movs	r3, #3
 80053f8:	6123      	str	r3, [r4, #16]
 80053fa:	9b05      	ldr	r3, [sp, #20]
 80053fc:	f023 0204 	bic.w	r2, r3, #4
 8005400:	6022      	str	r2, [r4, #0]
 8005402:	f04f 0900 	mov.w	r9, #0
 8005406:	9700      	str	r7, [sp, #0]
 8005408:	4633      	mov	r3, r6
 800540a:	aa0b      	add	r2, sp, #44	; 0x2c
 800540c:	4621      	mov	r1, r4
 800540e:	4628      	mov	r0, r5
 8005410:	f000 f9d8 	bl	80057c4 <_printf_common>
 8005414:	3001      	adds	r0, #1
 8005416:	f040 8090 	bne.w	800553a <_printf_float+0x1e2>
 800541a:	f04f 30ff 	mov.w	r0, #4294967295
 800541e:	b00d      	add	sp, #52	; 0x34
 8005420:	ecbd 8b02 	vpop	{d8}
 8005424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005428:	4642      	mov	r2, r8
 800542a:	464b      	mov	r3, r9
 800542c:	4640      	mov	r0, r8
 800542e:	4649      	mov	r1, r9
 8005430:	f7fb fb9c 	bl	8000b6c <__aeabi_dcmpun>
 8005434:	b140      	cbz	r0, 8005448 <_printf_float+0xf0>
 8005436:	464b      	mov	r3, r9
 8005438:	2b00      	cmp	r3, #0
 800543a:	bfbc      	itt	lt
 800543c:	232d      	movlt	r3, #45	; 0x2d
 800543e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005442:	487f      	ldr	r0, [pc, #508]	; (8005640 <_printf_float+0x2e8>)
 8005444:	4b7f      	ldr	r3, [pc, #508]	; (8005644 <_printf_float+0x2ec>)
 8005446:	e7d1      	b.n	80053ec <_printf_float+0x94>
 8005448:	6863      	ldr	r3, [r4, #4]
 800544a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800544e:	9206      	str	r2, [sp, #24]
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	d13f      	bne.n	80054d4 <_printf_float+0x17c>
 8005454:	2306      	movs	r3, #6
 8005456:	6063      	str	r3, [r4, #4]
 8005458:	9b05      	ldr	r3, [sp, #20]
 800545a:	6861      	ldr	r1, [r4, #4]
 800545c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005460:	2300      	movs	r3, #0
 8005462:	9303      	str	r3, [sp, #12]
 8005464:	ab0a      	add	r3, sp, #40	; 0x28
 8005466:	e9cd b301 	strd	fp, r3, [sp, #4]
 800546a:	ab09      	add	r3, sp, #36	; 0x24
 800546c:	ec49 8b10 	vmov	d0, r8, r9
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	6022      	str	r2, [r4, #0]
 8005474:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005478:	4628      	mov	r0, r5
 800547a:	f7ff fecd 	bl	8005218 <__cvt>
 800547e:	9b06      	ldr	r3, [sp, #24]
 8005480:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005482:	2b47      	cmp	r3, #71	; 0x47
 8005484:	4680      	mov	r8, r0
 8005486:	d108      	bne.n	800549a <_printf_float+0x142>
 8005488:	1cc8      	adds	r0, r1, #3
 800548a:	db02      	blt.n	8005492 <_printf_float+0x13a>
 800548c:	6863      	ldr	r3, [r4, #4]
 800548e:	4299      	cmp	r1, r3
 8005490:	dd41      	ble.n	8005516 <_printf_float+0x1be>
 8005492:	f1ab 0b02 	sub.w	fp, fp, #2
 8005496:	fa5f fb8b 	uxtb.w	fp, fp
 800549a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800549e:	d820      	bhi.n	80054e2 <_printf_float+0x18a>
 80054a0:	3901      	subs	r1, #1
 80054a2:	465a      	mov	r2, fp
 80054a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054a8:	9109      	str	r1, [sp, #36]	; 0x24
 80054aa:	f7ff ff17 	bl	80052dc <__exponent>
 80054ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054b0:	1813      	adds	r3, r2, r0
 80054b2:	2a01      	cmp	r2, #1
 80054b4:	4681      	mov	r9, r0
 80054b6:	6123      	str	r3, [r4, #16]
 80054b8:	dc02      	bgt.n	80054c0 <_printf_float+0x168>
 80054ba:	6822      	ldr	r2, [r4, #0]
 80054bc:	07d2      	lsls	r2, r2, #31
 80054be:	d501      	bpl.n	80054c4 <_printf_float+0x16c>
 80054c0:	3301      	adds	r3, #1
 80054c2:	6123      	str	r3, [r4, #16]
 80054c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d09c      	beq.n	8005406 <_printf_float+0xae>
 80054cc:	232d      	movs	r3, #45	; 0x2d
 80054ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054d2:	e798      	b.n	8005406 <_printf_float+0xae>
 80054d4:	9a06      	ldr	r2, [sp, #24]
 80054d6:	2a47      	cmp	r2, #71	; 0x47
 80054d8:	d1be      	bne.n	8005458 <_printf_float+0x100>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d1bc      	bne.n	8005458 <_printf_float+0x100>
 80054de:	2301      	movs	r3, #1
 80054e0:	e7b9      	b.n	8005456 <_printf_float+0xfe>
 80054e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054e6:	d118      	bne.n	800551a <_printf_float+0x1c2>
 80054e8:	2900      	cmp	r1, #0
 80054ea:	6863      	ldr	r3, [r4, #4]
 80054ec:	dd0b      	ble.n	8005506 <_printf_float+0x1ae>
 80054ee:	6121      	str	r1, [r4, #16]
 80054f0:	b913      	cbnz	r3, 80054f8 <_printf_float+0x1a0>
 80054f2:	6822      	ldr	r2, [r4, #0]
 80054f4:	07d0      	lsls	r0, r2, #31
 80054f6:	d502      	bpl.n	80054fe <_printf_float+0x1a6>
 80054f8:	3301      	adds	r3, #1
 80054fa:	440b      	add	r3, r1
 80054fc:	6123      	str	r3, [r4, #16]
 80054fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8005500:	f04f 0900 	mov.w	r9, #0
 8005504:	e7de      	b.n	80054c4 <_printf_float+0x16c>
 8005506:	b913      	cbnz	r3, 800550e <_printf_float+0x1b6>
 8005508:	6822      	ldr	r2, [r4, #0]
 800550a:	07d2      	lsls	r2, r2, #31
 800550c:	d501      	bpl.n	8005512 <_printf_float+0x1ba>
 800550e:	3302      	adds	r3, #2
 8005510:	e7f4      	b.n	80054fc <_printf_float+0x1a4>
 8005512:	2301      	movs	r3, #1
 8005514:	e7f2      	b.n	80054fc <_printf_float+0x1a4>
 8005516:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800551a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800551c:	4299      	cmp	r1, r3
 800551e:	db05      	blt.n	800552c <_printf_float+0x1d4>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	6121      	str	r1, [r4, #16]
 8005524:	07d8      	lsls	r0, r3, #31
 8005526:	d5ea      	bpl.n	80054fe <_printf_float+0x1a6>
 8005528:	1c4b      	adds	r3, r1, #1
 800552a:	e7e7      	b.n	80054fc <_printf_float+0x1a4>
 800552c:	2900      	cmp	r1, #0
 800552e:	bfd4      	ite	le
 8005530:	f1c1 0202 	rsble	r2, r1, #2
 8005534:	2201      	movgt	r2, #1
 8005536:	4413      	add	r3, r2
 8005538:	e7e0      	b.n	80054fc <_printf_float+0x1a4>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	055a      	lsls	r2, r3, #21
 800553e:	d407      	bmi.n	8005550 <_printf_float+0x1f8>
 8005540:	6923      	ldr	r3, [r4, #16]
 8005542:	4642      	mov	r2, r8
 8005544:	4631      	mov	r1, r6
 8005546:	4628      	mov	r0, r5
 8005548:	47b8      	blx	r7
 800554a:	3001      	adds	r0, #1
 800554c:	d12c      	bne.n	80055a8 <_printf_float+0x250>
 800554e:	e764      	b.n	800541a <_printf_float+0xc2>
 8005550:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005554:	f240 80e0 	bls.w	8005718 <_printf_float+0x3c0>
 8005558:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800555c:	2200      	movs	r2, #0
 800555e:	2300      	movs	r3, #0
 8005560:	f7fb fad2 	bl	8000b08 <__aeabi_dcmpeq>
 8005564:	2800      	cmp	r0, #0
 8005566:	d034      	beq.n	80055d2 <_printf_float+0x27a>
 8005568:	4a37      	ldr	r2, [pc, #220]	; (8005648 <_printf_float+0x2f0>)
 800556a:	2301      	movs	r3, #1
 800556c:	4631      	mov	r1, r6
 800556e:	4628      	mov	r0, r5
 8005570:	47b8      	blx	r7
 8005572:	3001      	adds	r0, #1
 8005574:	f43f af51 	beq.w	800541a <_printf_float+0xc2>
 8005578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800557c:	429a      	cmp	r2, r3
 800557e:	db02      	blt.n	8005586 <_printf_float+0x22e>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	07d8      	lsls	r0, r3, #31
 8005584:	d510      	bpl.n	80055a8 <_printf_float+0x250>
 8005586:	ee18 3a10 	vmov	r3, s16
 800558a:	4652      	mov	r2, sl
 800558c:	4631      	mov	r1, r6
 800558e:	4628      	mov	r0, r5
 8005590:	47b8      	blx	r7
 8005592:	3001      	adds	r0, #1
 8005594:	f43f af41 	beq.w	800541a <_printf_float+0xc2>
 8005598:	f04f 0800 	mov.w	r8, #0
 800559c:	f104 091a 	add.w	r9, r4, #26
 80055a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055a2:	3b01      	subs	r3, #1
 80055a4:	4543      	cmp	r3, r8
 80055a6:	dc09      	bgt.n	80055bc <_printf_float+0x264>
 80055a8:	6823      	ldr	r3, [r4, #0]
 80055aa:	079b      	lsls	r3, r3, #30
 80055ac:	f100 8105 	bmi.w	80057ba <_printf_float+0x462>
 80055b0:	68e0      	ldr	r0, [r4, #12]
 80055b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055b4:	4298      	cmp	r0, r3
 80055b6:	bfb8      	it	lt
 80055b8:	4618      	movlt	r0, r3
 80055ba:	e730      	b.n	800541e <_printf_float+0xc6>
 80055bc:	2301      	movs	r3, #1
 80055be:	464a      	mov	r2, r9
 80055c0:	4631      	mov	r1, r6
 80055c2:	4628      	mov	r0, r5
 80055c4:	47b8      	blx	r7
 80055c6:	3001      	adds	r0, #1
 80055c8:	f43f af27 	beq.w	800541a <_printf_float+0xc2>
 80055cc:	f108 0801 	add.w	r8, r8, #1
 80055d0:	e7e6      	b.n	80055a0 <_printf_float+0x248>
 80055d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	dc39      	bgt.n	800564c <_printf_float+0x2f4>
 80055d8:	4a1b      	ldr	r2, [pc, #108]	; (8005648 <_printf_float+0x2f0>)
 80055da:	2301      	movs	r3, #1
 80055dc:	4631      	mov	r1, r6
 80055de:	4628      	mov	r0, r5
 80055e0:	47b8      	blx	r7
 80055e2:	3001      	adds	r0, #1
 80055e4:	f43f af19 	beq.w	800541a <_printf_float+0xc2>
 80055e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055ec:	4313      	orrs	r3, r2
 80055ee:	d102      	bne.n	80055f6 <_printf_float+0x29e>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	07d9      	lsls	r1, r3, #31
 80055f4:	d5d8      	bpl.n	80055a8 <_printf_float+0x250>
 80055f6:	ee18 3a10 	vmov	r3, s16
 80055fa:	4652      	mov	r2, sl
 80055fc:	4631      	mov	r1, r6
 80055fe:	4628      	mov	r0, r5
 8005600:	47b8      	blx	r7
 8005602:	3001      	adds	r0, #1
 8005604:	f43f af09 	beq.w	800541a <_printf_float+0xc2>
 8005608:	f04f 0900 	mov.w	r9, #0
 800560c:	f104 0a1a 	add.w	sl, r4, #26
 8005610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005612:	425b      	negs	r3, r3
 8005614:	454b      	cmp	r3, r9
 8005616:	dc01      	bgt.n	800561c <_printf_float+0x2c4>
 8005618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800561a:	e792      	b.n	8005542 <_printf_float+0x1ea>
 800561c:	2301      	movs	r3, #1
 800561e:	4652      	mov	r2, sl
 8005620:	4631      	mov	r1, r6
 8005622:	4628      	mov	r0, r5
 8005624:	47b8      	blx	r7
 8005626:	3001      	adds	r0, #1
 8005628:	f43f aef7 	beq.w	800541a <_printf_float+0xc2>
 800562c:	f109 0901 	add.w	r9, r9, #1
 8005630:	e7ee      	b.n	8005610 <_printf_float+0x2b8>
 8005632:	bf00      	nop
 8005634:	7fefffff 	.word	0x7fefffff
 8005638:	08009b34 	.word	0x08009b34
 800563c:	08009b38 	.word	0x08009b38
 8005640:	08009b40 	.word	0x08009b40
 8005644:	08009b3c 	.word	0x08009b3c
 8005648:	08009b44 	.word	0x08009b44
 800564c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800564e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005650:	429a      	cmp	r2, r3
 8005652:	bfa8      	it	ge
 8005654:	461a      	movge	r2, r3
 8005656:	2a00      	cmp	r2, #0
 8005658:	4691      	mov	r9, r2
 800565a:	dc37      	bgt.n	80056cc <_printf_float+0x374>
 800565c:	f04f 0b00 	mov.w	fp, #0
 8005660:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005664:	f104 021a 	add.w	r2, r4, #26
 8005668:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800566a:	9305      	str	r3, [sp, #20]
 800566c:	eba3 0309 	sub.w	r3, r3, r9
 8005670:	455b      	cmp	r3, fp
 8005672:	dc33      	bgt.n	80056dc <_printf_float+0x384>
 8005674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005678:	429a      	cmp	r2, r3
 800567a:	db3b      	blt.n	80056f4 <_printf_float+0x39c>
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	07da      	lsls	r2, r3, #31
 8005680:	d438      	bmi.n	80056f4 <_printf_float+0x39c>
 8005682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005684:	9a05      	ldr	r2, [sp, #20]
 8005686:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005688:	1a9a      	subs	r2, r3, r2
 800568a:	eba3 0901 	sub.w	r9, r3, r1
 800568e:	4591      	cmp	r9, r2
 8005690:	bfa8      	it	ge
 8005692:	4691      	movge	r9, r2
 8005694:	f1b9 0f00 	cmp.w	r9, #0
 8005698:	dc35      	bgt.n	8005706 <_printf_float+0x3ae>
 800569a:	f04f 0800 	mov.w	r8, #0
 800569e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056a2:	f104 0a1a 	add.w	sl, r4, #26
 80056a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	eba3 0309 	sub.w	r3, r3, r9
 80056b0:	4543      	cmp	r3, r8
 80056b2:	f77f af79 	ble.w	80055a8 <_printf_float+0x250>
 80056b6:	2301      	movs	r3, #1
 80056b8:	4652      	mov	r2, sl
 80056ba:	4631      	mov	r1, r6
 80056bc:	4628      	mov	r0, r5
 80056be:	47b8      	blx	r7
 80056c0:	3001      	adds	r0, #1
 80056c2:	f43f aeaa 	beq.w	800541a <_printf_float+0xc2>
 80056c6:	f108 0801 	add.w	r8, r8, #1
 80056ca:	e7ec      	b.n	80056a6 <_printf_float+0x34e>
 80056cc:	4613      	mov	r3, r2
 80056ce:	4631      	mov	r1, r6
 80056d0:	4642      	mov	r2, r8
 80056d2:	4628      	mov	r0, r5
 80056d4:	47b8      	blx	r7
 80056d6:	3001      	adds	r0, #1
 80056d8:	d1c0      	bne.n	800565c <_printf_float+0x304>
 80056da:	e69e      	b.n	800541a <_printf_float+0xc2>
 80056dc:	2301      	movs	r3, #1
 80056de:	4631      	mov	r1, r6
 80056e0:	4628      	mov	r0, r5
 80056e2:	9205      	str	r2, [sp, #20]
 80056e4:	47b8      	blx	r7
 80056e6:	3001      	adds	r0, #1
 80056e8:	f43f ae97 	beq.w	800541a <_printf_float+0xc2>
 80056ec:	9a05      	ldr	r2, [sp, #20]
 80056ee:	f10b 0b01 	add.w	fp, fp, #1
 80056f2:	e7b9      	b.n	8005668 <_printf_float+0x310>
 80056f4:	ee18 3a10 	vmov	r3, s16
 80056f8:	4652      	mov	r2, sl
 80056fa:	4631      	mov	r1, r6
 80056fc:	4628      	mov	r0, r5
 80056fe:	47b8      	blx	r7
 8005700:	3001      	adds	r0, #1
 8005702:	d1be      	bne.n	8005682 <_printf_float+0x32a>
 8005704:	e689      	b.n	800541a <_printf_float+0xc2>
 8005706:	9a05      	ldr	r2, [sp, #20]
 8005708:	464b      	mov	r3, r9
 800570a:	4442      	add	r2, r8
 800570c:	4631      	mov	r1, r6
 800570e:	4628      	mov	r0, r5
 8005710:	47b8      	blx	r7
 8005712:	3001      	adds	r0, #1
 8005714:	d1c1      	bne.n	800569a <_printf_float+0x342>
 8005716:	e680      	b.n	800541a <_printf_float+0xc2>
 8005718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800571a:	2a01      	cmp	r2, #1
 800571c:	dc01      	bgt.n	8005722 <_printf_float+0x3ca>
 800571e:	07db      	lsls	r3, r3, #31
 8005720:	d538      	bpl.n	8005794 <_printf_float+0x43c>
 8005722:	2301      	movs	r3, #1
 8005724:	4642      	mov	r2, r8
 8005726:	4631      	mov	r1, r6
 8005728:	4628      	mov	r0, r5
 800572a:	47b8      	blx	r7
 800572c:	3001      	adds	r0, #1
 800572e:	f43f ae74 	beq.w	800541a <_printf_float+0xc2>
 8005732:	ee18 3a10 	vmov	r3, s16
 8005736:	4652      	mov	r2, sl
 8005738:	4631      	mov	r1, r6
 800573a:	4628      	mov	r0, r5
 800573c:	47b8      	blx	r7
 800573e:	3001      	adds	r0, #1
 8005740:	f43f ae6b 	beq.w	800541a <_printf_float+0xc2>
 8005744:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005748:	2200      	movs	r2, #0
 800574a:	2300      	movs	r3, #0
 800574c:	f7fb f9dc 	bl	8000b08 <__aeabi_dcmpeq>
 8005750:	b9d8      	cbnz	r0, 800578a <_printf_float+0x432>
 8005752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005754:	f108 0201 	add.w	r2, r8, #1
 8005758:	3b01      	subs	r3, #1
 800575a:	4631      	mov	r1, r6
 800575c:	4628      	mov	r0, r5
 800575e:	47b8      	blx	r7
 8005760:	3001      	adds	r0, #1
 8005762:	d10e      	bne.n	8005782 <_printf_float+0x42a>
 8005764:	e659      	b.n	800541a <_printf_float+0xc2>
 8005766:	2301      	movs	r3, #1
 8005768:	4652      	mov	r2, sl
 800576a:	4631      	mov	r1, r6
 800576c:	4628      	mov	r0, r5
 800576e:	47b8      	blx	r7
 8005770:	3001      	adds	r0, #1
 8005772:	f43f ae52 	beq.w	800541a <_printf_float+0xc2>
 8005776:	f108 0801 	add.w	r8, r8, #1
 800577a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800577c:	3b01      	subs	r3, #1
 800577e:	4543      	cmp	r3, r8
 8005780:	dcf1      	bgt.n	8005766 <_printf_float+0x40e>
 8005782:	464b      	mov	r3, r9
 8005784:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005788:	e6dc      	b.n	8005544 <_printf_float+0x1ec>
 800578a:	f04f 0800 	mov.w	r8, #0
 800578e:	f104 0a1a 	add.w	sl, r4, #26
 8005792:	e7f2      	b.n	800577a <_printf_float+0x422>
 8005794:	2301      	movs	r3, #1
 8005796:	4642      	mov	r2, r8
 8005798:	e7df      	b.n	800575a <_printf_float+0x402>
 800579a:	2301      	movs	r3, #1
 800579c:	464a      	mov	r2, r9
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	f43f ae38 	beq.w	800541a <_printf_float+0xc2>
 80057aa:	f108 0801 	add.w	r8, r8, #1
 80057ae:	68e3      	ldr	r3, [r4, #12]
 80057b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80057b2:	1a5b      	subs	r3, r3, r1
 80057b4:	4543      	cmp	r3, r8
 80057b6:	dcf0      	bgt.n	800579a <_printf_float+0x442>
 80057b8:	e6fa      	b.n	80055b0 <_printf_float+0x258>
 80057ba:	f04f 0800 	mov.w	r8, #0
 80057be:	f104 0919 	add.w	r9, r4, #25
 80057c2:	e7f4      	b.n	80057ae <_printf_float+0x456>

080057c4 <_printf_common>:
 80057c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c8:	4616      	mov	r6, r2
 80057ca:	4699      	mov	r9, r3
 80057cc:	688a      	ldr	r2, [r1, #8]
 80057ce:	690b      	ldr	r3, [r1, #16]
 80057d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057d4:	4293      	cmp	r3, r2
 80057d6:	bfb8      	it	lt
 80057d8:	4613      	movlt	r3, r2
 80057da:	6033      	str	r3, [r6, #0]
 80057dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057e0:	4607      	mov	r7, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	b10a      	cbz	r2, 80057ea <_printf_common+0x26>
 80057e6:	3301      	adds	r3, #1
 80057e8:	6033      	str	r3, [r6, #0]
 80057ea:	6823      	ldr	r3, [r4, #0]
 80057ec:	0699      	lsls	r1, r3, #26
 80057ee:	bf42      	ittt	mi
 80057f0:	6833      	ldrmi	r3, [r6, #0]
 80057f2:	3302      	addmi	r3, #2
 80057f4:	6033      	strmi	r3, [r6, #0]
 80057f6:	6825      	ldr	r5, [r4, #0]
 80057f8:	f015 0506 	ands.w	r5, r5, #6
 80057fc:	d106      	bne.n	800580c <_printf_common+0x48>
 80057fe:	f104 0a19 	add.w	sl, r4, #25
 8005802:	68e3      	ldr	r3, [r4, #12]
 8005804:	6832      	ldr	r2, [r6, #0]
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	42ab      	cmp	r3, r5
 800580a:	dc26      	bgt.n	800585a <_printf_common+0x96>
 800580c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005810:	1e13      	subs	r3, r2, #0
 8005812:	6822      	ldr	r2, [r4, #0]
 8005814:	bf18      	it	ne
 8005816:	2301      	movne	r3, #1
 8005818:	0692      	lsls	r2, r2, #26
 800581a:	d42b      	bmi.n	8005874 <_printf_common+0xb0>
 800581c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005820:	4649      	mov	r1, r9
 8005822:	4638      	mov	r0, r7
 8005824:	47c0      	blx	r8
 8005826:	3001      	adds	r0, #1
 8005828:	d01e      	beq.n	8005868 <_printf_common+0xa4>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	68e5      	ldr	r5, [r4, #12]
 800582e:	6832      	ldr	r2, [r6, #0]
 8005830:	f003 0306 	and.w	r3, r3, #6
 8005834:	2b04      	cmp	r3, #4
 8005836:	bf08      	it	eq
 8005838:	1aad      	subeq	r5, r5, r2
 800583a:	68a3      	ldr	r3, [r4, #8]
 800583c:	6922      	ldr	r2, [r4, #16]
 800583e:	bf0c      	ite	eq
 8005840:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005844:	2500      	movne	r5, #0
 8005846:	4293      	cmp	r3, r2
 8005848:	bfc4      	itt	gt
 800584a:	1a9b      	subgt	r3, r3, r2
 800584c:	18ed      	addgt	r5, r5, r3
 800584e:	2600      	movs	r6, #0
 8005850:	341a      	adds	r4, #26
 8005852:	42b5      	cmp	r5, r6
 8005854:	d11a      	bne.n	800588c <_printf_common+0xc8>
 8005856:	2000      	movs	r0, #0
 8005858:	e008      	b.n	800586c <_printf_common+0xa8>
 800585a:	2301      	movs	r3, #1
 800585c:	4652      	mov	r2, sl
 800585e:	4649      	mov	r1, r9
 8005860:	4638      	mov	r0, r7
 8005862:	47c0      	blx	r8
 8005864:	3001      	adds	r0, #1
 8005866:	d103      	bne.n	8005870 <_printf_common+0xac>
 8005868:	f04f 30ff 	mov.w	r0, #4294967295
 800586c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005870:	3501      	adds	r5, #1
 8005872:	e7c6      	b.n	8005802 <_printf_common+0x3e>
 8005874:	18e1      	adds	r1, r4, r3
 8005876:	1c5a      	adds	r2, r3, #1
 8005878:	2030      	movs	r0, #48	; 0x30
 800587a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800587e:	4422      	add	r2, r4
 8005880:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005884:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005888:	3302      	adds	r3, #2
 800588a:	e7c7      	b.n	800581c <_printf_common+0x58>
 800588c:	2301      	movs	r3, #1
 800588e:	4622      	mov	r2, r4
 8005890:	4649      	mov	r1, r9
 8005892:	4638      	mov	r0, r7
 8005894:	47c0      	blx	r8
 8005896:	3001      	adds	r0, #1
 8005898:	d0e6      	beq.n	8005868 <_printf_common+0xa4>
 800589a:	3601      	adds	r6, #1
 800589c:	e7d9      	b.n	8005852 <_printf_common+0x8e>
	...

080058a0 <_printf_i>:
 80058a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058a4:	7e0f      	ldrb	r7, [r1, #24]
 80058a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058a8:	2f78      	cmp	r7, #120	; 0x78
 80058aa:	4691      	mov	r9, r2
 80058ac:	4680      	mov	r8, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	469a      	mov	sl, r3
 80058b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058b6:	d807      	bhi.n	80058c8 <_printf_i+0x28>
 80058b8:	2f62      	cmp	r7, #98	; 0x62
 80058ba:	d80a      	bhi.n	80058d2 <_printf_i+0x32>
 80058bc:	2f00      	cmp	r7, #0
 80058be:	f000 80d8 	beq.w	8005a72 <_printf_i+0x1d2>
 80058c2:	2f58      	cmp	r7, #88	; 0x58
 80058c4:	f000 80a3 	beq.w	8005a0e <_printf_i+0x16e>
 80058c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058d0:	e03a      	b.n	8005948 <_printf_i+0xa8>
 80058d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058d6:	2b15      	cmp	r3, #21
 80058d8:	d8f6      	bhi.n	80058c8 <_printf_i+0x28>
 80058da:	a101      	add	r1, pc, #4	; (adr r1, 80058e0 <_printf_i+0x40>)
 80058dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058e0:	08005939 	.word	0x08005939
 80058e4:	0800594d 	.word	0x0800594d
 80058e8:	080058c9 	.word	0x080058c9
 80058ec:	080058c9 	.word	0x080058c9
 80058f0:	080058c9 	.word	0x080058c9
 80058f4:	080058c9 	.word	0x080058c9
 80058f8:	0800594d 	.word	0x0800594d
 80058fc:	080058c9 	.word	0x080058c9
 8005900:	080058c9 	.word	0x080058c9
 8005904:	080058c9 	.word	0x080058c9
 8005908:	080058c9 	.word	0x080058c9
 800590c:	08005a59 	.word	0x08005a59
 8005910:	0800597d 	.word	0x0800597d
 8005914:	08005a3b 	.word	0x08005a3b
 8005918:	080058c9 	.word	0x080058c9
 800591c:	080058c9 	.word	0x080058c9
 8005920:	08005a7b 	.word	0x08005a7b
 8005924:	080058c9 	.word	0x080058c9
 8005928:	0800597d 	.word	0x0800597d
 800592c:	080058c9 	.word	0x080058c9
 8005930:	080058c9 	.word	0x080058c9
 8005934:	08005a43 	.word	0x08005a43
 8005938:	682b      	ldr	r3, [r5, #0]
 800593a:	1d1a      	adds	r2, r3, #4
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	602a      	str	r2, [r5, #0]
 8005940:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005944:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005948:	2301      	movs	r3, #1
 800594a:	e0a3      	b.n	8005a94 <_printf_i+0x1f4>
 800594c:	6820      	ldr	r0, [r4, #0]
 800594e:	6829      	ldr	r1, [r5, #0]
 8005950:	0606      	lsls	r6, r0, #24
 8005952:	f101 0304 	add.w	r3, r1, #4
 8005956:	d50a      	bpl.n	800596e <_printf_i+0xce>
 8005958:	680e      	ldr	r6, [r1, #0]
 800595a:	602b      	str	r3, [r5, #0]
 800595c:	2e00      	cmp	r6, #0
 800595e:	da03      	bge.n	8005968 <_printf_i+0xc8>
 8005960:	232d      	movs	r3, #45	; 0x2d
 8005962:	4276      	negs	r6, r6
 8005964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005968:	485e      	ldr	r0, [pc, #376]	; (8005ae4 <_printf_i+0x244>)
 800596a:	230a      	movs	r3, #10
 800596c:	e019      	b.n	80059a2 <_printf_i+0x102>
 800596e:	680e      	ldr	r6, [r1, #0]
 8005970:	602b      	str	r3, [r5, #0]
 8005972:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005976:	bf18      	it	ne
 8005978:	b236      	sxthne	r6, r6
 800597a:	e7ef      	b.n	800595c <_printf_i+0xbc>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	1d19      	adds	r1, r3, #4
 8005982:	6029      	str	r1, [r5, #0]
 8005984:	0601      	lsls	r1, r0, #24
 8005986:	d501      	bpl.n	800598c <_printf_i+0xec>
 8005988:	681e      	ldr	r6, [r3, #0]
 800598a:	e002      	b.n	8005992 <_printf_i+0xf2>
 800598c:	0646      	lsls	r6, r0, #25
 800598e:	d5fb      	bpl.n	8005988 <_printf_i+0xe8>
 8005990:	881e      	ldrh	r6, [r3, #0]
 8005992:	4854      	ldr	r0, [pc, #336]	; (8005ae4 <_printf_i+0x244>)
 8005994:	2f6f      	cmp	r7, #111	; 0x6f
 8005996:	bf0c      	ite	eq
 8005998:	2308      	moveq	r3, #8
 800599a:	230a      	movne	r3, #10
 800599c:	2100      	movs	r1, #0
 800599e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059a2:	6865      	ldr	r5, [r4, #4]
 80059a4:	60a5      	str	r5, [r4, #8]
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	bfa2      	ittt	ge
 80059aa:	6821      	ldrge	r1, [r4, #0]
 80059ac:	f021 0104 	bicge.w	r1, r1, #4
 80059b0:	6021      	strge	r1, [r4, #0]
 80059b2:	b90e      	cbnz	r6, 80059b8 <_printf_i+0x118>
 80059b4:	2d00      	cmp	r5, #0
 80059b6:	d04d      	beq.n	8005a54 <_printf_i+0x1b4>
 80059b8:	4615      	mov	r5, r2
 80059ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80059be:	fb03 6711 	mls	r7, r3, r1, r6
 80059c2:	5dc7      	ldrb	r7, [r0, r7]
 80059c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059c8:	4637      	mov	r7, r6
 80059ca:	42bb      	cmp	r3, r7
 80059cc:	460e      	mov	r6, r1
 80059ce:	d9f4      	bls.n	80059ba <_printf_i+0x11a>
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d10b      	bne.n	80059ec <_printf_i+0x14c>
 80059d4:	6823      	ldr	r3, [r4, #0]
 80059d6:	07de      	lsls	r6, r3, #31
 80059d8:	d508      	bpl.n	80059ec <_printf_i+0x14c>
 80059da:	6923      	ldr	r3, [r4, #16]
 80059dc:	6861      	ldr	r1, [r4, #4]
 80059de:	4299      	cmp	r1, r3
 80059e0:	bfde      	ittt	le
 80059e2:	2330      	movle	r3, #48	; 0x30
 80059e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059ec:	1b52      	subs	r2, r2, r5
 80059ee:	6122      	str	r2, [r4, #16]
 80059f0:	f8cd a000 	str.w	sl, [sp]
 80059f4:	464b      	mov	r3, r9
 80059f6:	aa03      	add	r2, sp, #12
 80059f8:	4621      	mov	r1, r4
 80059fa:	4640      	mov	r0, r8
 80059fc:	f7ff fee2 	bl	80057c4 <_printf_common>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d14c      	bne.n	8005a9e <_printf_i+0x1fe>
 8005a04:	f04f 30ff 	mov.w	r0, #4294967295
 8005a08:	b004      	add	sp, #16
 8005a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a0e:	4835      	ldr	r0, [pc, #212]	; (8005ae4 <_printf_i+0x244>)
 8005a10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005a14:	6829      	ldr	r1, [r5, #0]
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a1c:	6029      	str	r1, [r5, #0]
 8005a1e:	061d      	lsls	r5, r3, #24
 8005a20:	d514      	bpl.n	8005a4c <_printf_i+0x1ac>
 8005a22:	07df      	lsls	r7, r3, #31
 8005a24:	bf44      	itt	mi
 8005a26:	f043 0320 	orrmi.w	r3, r3, #32
 8005a2a:	6023      	strmi	r3, [r4, #0]
 8005a2c:	b91e      	cbnz	r6, 8005a36 <_printf_i+0x196>
 8005a2e:	6823      	ldr	r3, [r4, #0]
 8005a30:	f023 0320 	bic.w	r3, r3, #32
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	2310      	movs	r3, #16
 8005a38:	e7b0      	b.n	800599c <_printf_i+0xfc>
 8005a3a:	6823      	ldr	r3, [r4, #0]
 8005a3c:	f043 0320 	orr.w	r3, r3, #32
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	2378      	movs	r3, #120	; 0x78
 8005a44:	4828      	ldr	r0, [pc, #160]	; (8005ae8 <_printf_i+0x248>)
 8005a46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a4a:	e7e3      	b.n	8005a14 <_printf_i+0x174>
 8005a4c:	0659      	lsls	r1, r3, #25
 8005a4e:	bf48      	it	mi
 8005a50:	b2b6      	uxthmi	r6, r6
 8005a52:	e7e6      	b.n	8005a22 <_printf_i+0x182>
 8005a54:	4615      	mov	r5, r2
 8005a56:	e7bb      	b.n	80059d0 <_printf_i+0x130>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	6826      	ldr	r6, [r4, #0]
 8005a5c:	6961      	ldr	r1, [r4, #20]
 8005a5e:	1d18      	adds	r0, r3, #4
 8005a60:	6028      	str	r0, [r5, #0]
 8005a62:	0635      	lsls	r5, r6, #24
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	d501      	bpl.n	8005a6c <_printf_i+0x1cc>
 8005a68:	6019      	str	r1, [r3, #0]
 8005a6a:	e002      	b.n	8005a72 <_printf_i+0x1d2>
 8005a6c:	0670      	lsls	r0, r6, #25
 8005a6e:	d5fb      	bpl.n	8005a68 <_printf_i+0x1c8>
 8005a70:	8019      	strh	r1, [r3, #0]
 8005a72:	2300      	movs	r3, #0
 8005a74:	6123      	str	r3, [r4, #16]
 8005a76:	4615      	mov	r5, r2
 8005a78:	e7ba      	b.n	80059f0 <_printf_i+0x150>
 8005a7a:	682b      	ldr	r3, [r5, #0]
 8005a7c:	1d1a      	adds	r2, r3, #4
 8005a7e:	602a      	str	r2, [r5, #0]
 8005a80:	681d      	ldr	r5, [r3, #0]
 8005a82:	6862      	ldr	r2, [r4, #4]
 8005a84:	2100      	movs	r1, #0
 8005a86:	4628      	mov	r0, r5
 8005a88:	f7fa fbca 	bl	8000220 <memchr>
 8005a8c:	b108      	cbz	r0, 8005a92 <_printf_i+0x1f2>
 8005a8e:	1b40      	subs	r0, r0, r5
 8005a90:	6060      	str	r0, [r4, #4]
 8005a92:	6863      	ldr	r3, [r4, #4]
 8005a94:	6123      	str	r3, [r4, #16]
 8005a96:	2300      	movs	r3, #0
 8005a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a9c:	e7a8      	b.n	80059f0 <_printf_i+0x150>
 8005a9e:	6923      	ldr	r3, [r4, #16]
 8005aa0:	462a      	mov	r2, r5
 8005aa2:	4649      	mov	r1, r9
 8005aa4:	4640      	mov	r0, r8
 8005aa6:	47d0      	blx	sl
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	d0ab      	beq.n	8005a04 <_printf_i+0x164>
 8005aac:	6823      	ldr	r3, [r4, #0]
 8005aae:	079b      	lsls	r3, r3, #30
 8005ab0:	d413      	bmi.n	8005ada <_printf_i+0x23a>
 8005ab2:	68e0      	ldr	r0, [r4, #12]
 8005ab4:	9b03      	ldr	r3, [sp, #12]
 8005ab6:	4298      	cmp	r0, r3
 8005ab8:	bfb8      	it	lt
 8005aba:	4618      	movlt	r0, r3
 8005abc:	e7a4      	b.n	8005a08 <_printf_i+0x168>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	4632      	mov	r2, r6
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	4640      	mov	r0, r8
 8005ac6:	47d0      	blx	sl
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d09b      	beq.n	8005a04 <_printf_i+0x164>
 8005acc:	3501      	adds	r5, #1
 8005ace:	68e3      	ldr	r3, [r4, #12]
 8005ad0:	9903      	ldr	r1, [sp, #12]
 8005ad2:	1a5b      	subs	r3, r3, r1
 8005ad4:	42ab      	cmp	r3, r5
 8005ad6:	dcf2      	bgt.n	8005abe <_printf_i+0x21e>
 8005ad8:	e7eb      	b.n	8005ab2 <_printf_i+0x212>
 8005ada:	2500      	movs	r5, #0
 8005adc:	f104 0619 	add.w	r6, r4, #25
 8005ae0:	e7f5      	b.n	8005ace <_printf_i+0x22e>
 8005ae2:	bf00      	nop
 8005ae4:	08009b46 	.word	0x08009b46
 8005ae8:	08009b57 	.word	0x08009b57

08005aec <_scanf_float>:
 8005aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af0:	b087      	sub	sp, #28
 8005af2:	4617      	mov	r7, r2
 8005af4:	9303      	str	r3, [sp, #12]
 8005af6:	688b      	ldr	r3, [r1, #8]
 8005af8:	1e5a      	subs	r2, r3, #1
 8005afa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005afe:	bf83      	ittte	hi
 8005b00:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005b04:	195b      	addhi	r3, r3, r5
 8005b06:	9302      	strhi	r3, [sp, #8]
 8005b08:	2300      	movls	r3, #0
 8005b0a:	bf86      	itte	hi
 8005b0c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005b10:	608b      	strhi	r3, [r1, #8]
 8005b12:	9302      	strls	r3, [sp, #8]
 8005b14:	680b      	ldr	r3, [r1, #0]
 8005b16:	468b      	mov	fp, r1
 8005b18:	2500      	movs	r5, #0
 8005b1a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005b1e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005b22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005b26:	4680      	mov	r8, r0
 8005b28:	460c      	mov	r4, r1
 8005b2a:	465e      	mov	r6, fp
 8005b2c:	46aa      	mov	sl, r5
 8005b2e:	46a9      	mov	r9, r5
 8005b30:	9501      	str	r5, [sp, #4]
 8005b32:	68a2      	ldr	r2, [r4, #8]
 8005b34:	b152      	cbz	r2, 8005b4c <_scanf_float+0x60>
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	2b4e      	cmp	r3, #78	; 0x4e
 8005b3c:	d864      	bhi.n	8005c08 <_scanf_float+0x11c>
 8005b3e:	2b40      	cmp	r3, #64	; 0x40
 8005b40:	d83c      	bhi.n	8005bbc <_scanf_float+0xd0>
 8005b42:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005b46:	b2c8      	uxtb	r0, r1
 8005b48:	280e      	cmp	r0, #14
 8005b4a:	d93a      	bls.n	8005bc2 <_scanf_float+0xd6>
 8005b4c:	f1b9 0f00 	cmp.w	r9, #0
 8005b50:	d003      	beq.n	8005b5a <_scanf_float+0x6e>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b58:	6023      	str	r3, [r4, #0]
 8005b5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b5e:	f1ba 0f01 	cmp.w	sl, #1
 8005b62:	f200 8113 	bhi.w	8005d8c <_scanf_float+0x2a0>
 8005b66:	455e      	cmp	r6, fp
 8005b68:	f200 8105 	bhi.w	8005d76 <_scanf_float+0x28a>
 8005b6c:	2501      	movs	r5, #1
 8005b6e:	4628      	mov	r0, r5
 8005b70:	b007      	add	sp, #28
 8005b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b76:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005b7a:	2a0d      	cmp	r2, #13
 8005b7c:	d8e6      	bhi.n	8005b4c <_scanf_float+0x60>
 8005b7e:	a101      	add	r1, pc, #4	; (adr r1, 8005b84 <_scanf_float+0x98>)
 8005b80:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b84:	08005cc3 	.word	0x08005cc3
 8005b88:	08005b4d 	.word	0x08005b4d
 8005b8c:	08005b4d 	.word	0x08005b4d
 8005b90:	08005b4d 	.word	0x08005b4d
 8005b94:	08005d23 	.word	0x08005d23
 8005b98:	08005cfb 	.word	0x08005cfb
 8005b9c:	08005b4d 	.word	0x08005b4d
 8005ba0:	08005b4d 	.word	0x08005b4d
 8005ba4:	08005cd1 	.word	0x08005cd1
 8005ba8:	08005b4d 	.word	0x08005b4d
 8005bac:	08005b4d 	.word	0x08005b4d
 8005bb0:	08005b4d 	.word	0x08005b4d
 8005bb4:	08005b4d 	.word	0x08005b4d
 8005bb8:	08005c89 	.word	0x08005c89
 8005bbc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005bc0:	e7db      	b.n	8005b7a <_scanf_float+0x8e>
 8005bc2:	290e      	cmp	r1, #14
 8005bc4:	d8c2      	bhi.n	8005b4c <_scanf_float+0x60>
 8005bc6:	a001      	add	r0, pc, #4	; (adr r0, 8005bcc <_scanf_float+0xe0>)
 8005bc8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005bcc:	08005c7b 	.word	0x08005c7b
 8005bd0:	08005b4d 	.word	0x08005b4d
 8005bd4:	08005c7b 	.word	0x08005c7b
 8005bd8:	08005d0f 	.word	0x08005d0f
 8005bdc:	08005b4d 	.word	0x08005b4d
 8005be0:	08005c29 	.word	0x08005c29
 8005be4:	08005c65 	.word	0x08005c65
 8005be8:	08005c65 	.word	0x08005c65
 8005bec:	08005c65 	.word	0x08005c65
 8005bf0:	08005c65 	.word	0x08005c65
 8005bf4:	08005c65 	.word	0x08005c65
 8005bf8:	08005c65 	.word	0x08005c65
 8005bfc:	08005c65 	.word	0x08005c65
 8005c00:	08005c65 	.word	0x08005c65
 8005c04:	08005c65 	.word	0x08005c65
 8005c08:	2b6e      	cmp	r3, #110	; 0x6e
 8005c0a:	d809      	bhi.n	8005c20 <_scanf_float+0x134>
 8005c0c:	2b60      	cmp	r3, #96	; 0x60
 8005c0e:	d8b2      	bhi.n	8005b76 <_scanf_float+0x8a>
 8005c10:	2b54      	cmp	r3, #84	; 0x54
 8005c12:	d077      	beq.n	8005d04 <_scanf_float+0x218>
 8005c14:	2b59      	cmp	r3, #89	; 0x59
 8005c16:	d199      	bne.n	8005b4c <_scanf_float+0x60>
 8005c18:	2d07      	cmp	r5, #7
 8005c1a:	d197      	bne.n	8005b4c <_scanf_float+0x60>
 8005c1c:	2508      	movs	r5, #8
 8005c1e:	e029      	b.n	8005c74 <_scanf_float+0x188>
 8005c20:	2b74      	cmp	r3, #116	; 0x74
 8005c22:	d06f      	beq.n	8005d04 <_scanf_float+0x218>
 8005c24:	2b79      	cmp	r3, #121	; 0x79
 8005c26:	e7f6      	b.n	8005c16 <_scanf_float+0x12a>
 8005c28:	6821      	ldr	r1, [r4, #0]
 8005c2a:	05c8      	lsls	r0, r1, #23
 8005c2c:	d51a      	bpl.n	8005c64 <_scanf_float+0x178>
 8005c2e:	9b02      	ldr	r3, [sp, #8]
 8005c30:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005c34:	6021      	str	r1, [r4, #0]
 8005c36:	f109 0901 	add.w	r9, r9, #1
 8005c3a:	b11b      	cbz	r3, 8005c44 <_scanf_float+0x158>
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	3201      	adds	r2, #1
 8005c40:	9302      	str	r3, [sp, #8]
 8005c42:	60a2      	str	r2, [r4, #8]
 8005c44:	68a3      	ldr	r3, [r4, #8]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	60a3      	str	r3, [r4, #8]
 8005c4a:	6923      	ldr	r3, [r4, #16]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	6123      	str	r3, [r4, #16]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	607b      	str	r3, [r7, #4]
 8005c58:	f340 8084 	ble.w	8005d64 <_scanf_float+0x278>
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	603b      	str	r3, [r7, #0]
 8005c62:	e766      	b.n	8005b32 <_scanf_float+0x46>
 8005c64:	eb1a 0f05 	cmn.w	sl, r5
 8005c68:	f47f af70 	bne.w	8005b4c <_scanf_float+0x60>
 8005c6c:	6822      	ldr	r2, [r4, #0]
 8005c6e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005c72:	6022      	str	r2, [r4, #0]
 8005c74:	f806 3b01 	strb.w	r3, [r6], #1
 8005c78:	e7e4      	b.n	8005c44 <_scanf_float+0x158>
 8005c7a:	6822      	ldr	r2, [r4, #0]
 8005c7c:	0610      	lsls	r0, r2, #24
 8005c7e:	f57f af65 	bpl.w	8005b4c <_scanf_float+0x60>
 8005c82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c86:	e7f4      	b.n	8005c72 <_scanf_float+0x186>
 8005c88:	f1ba 0f00 	cmp.w	sl, #0
 8005c8c:	d10e      	bne.n	8005cac <_scanf_float+0x1c0>
 8005c8e:	f1b9 0f00 	cmp.w	r9, #0
 8005c92:	d10e      	bne.n	8005cb2 <_scanf_float+0x1c6>
 8005c94:	6822      	ldr	r2, [r4, #0]
 8005c96:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c9a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c9e:	d108      	bne.n	8005cb2 <_scanf_float+0x1c6>
 8005ca0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ca4:	6022      	str	r2, [r4, #0]
 8005ca6:	f04f 0a01 	mov.w	sl, #1
 8005caa:	e7e3      	b.n	8005c74 <_scanf_float+0x188>
 8005cac:	f1ba 0f02 	cmp.w	sl, #2
 8005cb0:	d055      	beq.n	8005d5e <_scanf_float+0x272>
 8005cb2:	2d01      	cmp	r5, #1
 8005cb4:	d002      	beq.n	8005cbc <_scanf_float+0x1d0>
 8005cb6:	2d04      	cmp	r5, #4
 8005cb8:	f47f af48 	bne.w	8005b4c <_scanf_float+0x60>
 8005cbc:	3501      	adds	r5, #1
 8005cbe:	b2ed      	uxtb	r5, r5
 8005cc0:	e7d8      	b.n	8005c74 <_scanf_float+0x188>
 8005cc2:	f1ba 0f01 	cmp.w	sl, #1
 8005cc6:	f47f af41 	bne.w	8005b4c <_scanf_float+0x60>
 8005cca:	f04f 0a02 	mov.w	sl, #2
 8005cce:	e7d1      	b.n	8005c74 <_scanf_float+0x188>
 8005cd0:	b97d      	cbnz	r5, 8005cf2 <_scanf_float+0x206>
 8005cd2:	f1b9 0f00 	cmp.w	r9, #0
 8005cd6:	f47f af3c 	bne.w	8005b52 <_scanf_float+0x66>
 8005cda:	6822      	ldr	r2, [r4, #0]
 8005cdc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005ce0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ce4:	f47f af39 	bne.w	8005b5a <_scanf_float+0x6e>
 8005ce8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005cec:	6022      	str	r2, [r4, #0]
 8005cee:	2501      	movs	r5, #1
 8005cf0:	e7c0      	b.n	8005c74 <_scanf_float+0x188>
 8005cf2:	2d03      	cmp	r5, #3
 8005cf4:	d0e2      	beq.n	8005cbc <_scanf_float+0x1d0>
 8005cf6:	2d05      	cmp	r5, #5
 8005cf8:	e7de      	b.n	8005cb8 <_scanf_float+0x1cc>
 8005cfa:	2d02      	cmp	r5, #2
 8005cfc:	f47f af26 	bne.w	8005b4c <_scanf_float+0x60>
 8005d00:	2503      	movs	r5, #3
 8005d02:	e7b7      	b.n	8005c74 <_scanf_float+0x188>
 8005d04:	2d06      	cmp	r5, #6
 8005d06:	f47f af21 	bne.w	8005b4c <_scanf_float+0x60>
 8005d0a:	2507      	movs	r5, #7
 8005d0c:	e7b2      	b.n	8005c74 <_scanf_float+0x188>
 8005d0e:	6822      	ldr	r2, [r4, #0]
 8005d10:	0591      	lsls	r1, r2, #22
 8005d12:	f57f af1b 	bpl.w	8005b4c <_scanf_float+0x60>
 8005d16:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005d1a:	6022      	str	r2, [r4, #0]
 8005d1c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005d20:	e7a8      	b.n	8005c74 <_scanf_float+0x188>
 8005d22:	6822      	ldr	r2, [r4, #0]
 8005d24:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005d28:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005d2c:	d006      	beq.n	8005d3c <_scanf_float+0x250>
 8005d2e:	0550      	lsls	r0, r2, #21
 8005d30:	f57f af0c 	bpl.w	8005b4c <_scanf_float+0x60>
 8005d34:	f1b9 0f00 	cmp.w	r9, #0
 8005d38:	f43f af0f 	beq.w	8005b5a <_scanf_float+0x6e>
 8005d3c:	0591      	lsls	r1, r2, #22
 8005d3e:	bf58      	it	pl
 8005d40:	9901      	ldrpl	r1, [sp, #4]
 8005d42:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d46:	bf58      	it	pl
 8005d48:	eba9 0101 	subpl.w	r1, r9, r1
 8005d4c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005d50:	bf58      	it	pl
 8005d52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005d56:	6022      	str	r2, [r4, #0]
 8005d58:	f04f 0900 	mov.w	r9, #0
 8005d5c:	e78a      	b.n	8005c74 <_scanf_float+0x188>
 8005d5e:	f04f 0a03 	mov.w	sl, #3
 8005d62:	e787      	b.n	8005c74 <_scanf_float+0x188>
 8005d64:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005d68:	4639      	mov	r1, r7
 8005d6a:	4640      	mov	r0, r8
 8005d6c:	4798      	blx	r3
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	f43f aedf 	beq.w	8005b32 <_scanf_float+0x46>
 8005d74:	e6ea      	b.n	8005b4c <_scanf_float+0x60>
 8005d76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d7e:	463a      	mov	r2, r7
 8005d80:	4640      	mov	r0, r8
 8005d82:	4798      	blx	r3
 8005d84:	6923      	ldr	r3, [r4, #16]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	6123      	str	r3, [r4, #16]
 8005d8a:	e6ec      	b.n	8005b66 <_scanf_float+0x7a>
 8005d8c:	1e6b      	subs	r3, r5, #1
 8005d8e:	2b06      	cmp	r3, #6
 8005d90:	d825      	bhi.n	8005dde <_scanf_float+0x2f2>
 8005d92:	2d02      	cmp	r5, #2
 8005d94:	d836      	bhi.n	8005e04 <_scanf_float+0x318>
 8005d96:	455e      	cmp	r6, fp
 8005d98:	f67f aee8 	bls.w	8005b6c <_scanf_float+0x80>
 8005d9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005da0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005da4:	463a      	mov	r2, r7
 8005da6:	4640      	mov	r0, r8
 8005da8:	4798      	blx	r3
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	6123      	str	r3, [r4, #16]
 8005db0:	e7f1      	b.n	8005d96 <_scanf_float+0x2aa>
 8005db2:	9802      	ldr	r0, [sp, #8]
 8005db4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005db8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005dbc:	9002      	str	r0, [sp, #8]
 8005dbe:	463a      	mov	r2, r7
 8005dc0:	4640      	mov	r0, r8
 8005dc2:	4798      	blx	r3
 8005dc4:	6923      	ldr	r3, [r4, #16]
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	6123      	str	r3, [r4, #16]
 8005dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dce:	fa5f fa8a 	uxtb.w	sl, sl
 8005dd2:	f1ba 0f02 	cmp.w	sl, #2
 8005dd6:	d1ec      	bne.n	8005db2 <_scanf_float+0x2c6>
 8005dd8:	3d03      	subs	r5, #3
 8005dda:	b2ed      	uxtb	r5, r5
 8005ddc:	1b76      	subs	r6, r6, r5
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	05da      	lsls	r2, r3, #23
 8005de2:	d52f      	bpl.n	8005e44 <_scanf_float+0x358>
 8005de4:	055b      	lsls	r3, r3, #21
 8005de6:	d510      	bpl.n	8005e0a <_scanf_float+0x31e>
 8005de8:	455e      	cmp	r6, fp
 8005dea:	f67f aebf 	bls.w	8005b6c <_scanf_float+0x80>
 8005dee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005df2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005df6:	463a      	mov	r2, r7
 8005df8:	4640      	mov	r0, r8
 8005dfa:	4798      	blx	r3
 8005dfc:	6923      	ldr	r3, [r4, #16]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	6123      	str	r3, [r4, #16]
 8005e02:	e7f1      	b.n	8005de8 <_scanf_float+0x2fc>
 8005e04:	46aa      	mov	sl, r5
 8005e06:	9602      	str	r6, [sp, #8]
 8005e08:	e7df      	b.n	8005dca <_scanf_float+0x2de>
 8005e0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005e0e:	6923      	ldr	r3, [r4, #16]
 8005e10:	2965      	cmp	r1, #101	; 0x65
 8005e12:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e16:	f106 35ff 	add.w	r5, r6, #4294967295
 8005e1a:	6123      	str	r3, [r4, #16]
 8005e1c:	d00c      	beq.n	8005e38 <_scanf_float+0x34c>
 8005e1e:	2945      	cmp	r1, #69	; 0x45
 8005e20:	d00a      	beq.n	8005e38 <_scanf_float+0x34c>
 8005e22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e26:	463a      	mov	r2, r7
 8005e28:	4640      	mov	r0, r8
 8005e2a:	4798      	blx	r3
 8005e2c:	6923      	ldr	r3, [r4, #16]
 8005e2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	1eb5      	subs	r5, r6, #2
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e3c:	463a      	mov	r2, r7
 8005e3e:	4640      	mov	r0, r8
 8005e40:	4798      	blx	r3
 8005e42:	462e      	mov	r6, r5
 8005e44:	6825      	ldr	r5, [r4, #0]
 8005e46:	f015 0510 	ands.w	r5, r5, #16
 8005e4a:	d159      	bne.n	8005f00 <_scanf_float+0x414>
 8005e4c:	7035      	strb	r5, [r6, #0]
 8005e4e:	6823      	ldr	r3, [r4, #0]
 8005e50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e58:	d11b      	bne.n	8005e92 <_scanf_float+0x3a6>
 8005e5a:	9b01      	ldr	r3, [sp, #4]
 8005e5c:	454b      	cmp	r3, r9
 8005e5e:	eba3 0209 	sub.w	r2, r3, r9
 8005e62:	d123      	bne.n	8005eac <_scanf_float+0x3c0>
 8005e64:	2200      	movs	r2, #0
 8005e66:	4659      	mov	r1, fp
 8005e68:	4640      	mov	r0, r8
 8005e6a:	f000 fe97 	bl	8006b9c <_strtod_r>
 8005e6e:	6822      	ldr	r2, [r4, #0]
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	f012 0f02 	tst.w	r2, #2
 8005e76:	ec57 6b10 	vmov	r6, r7, d0
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	d021      	beq.n	8005ec2 <_scanf_float+0x3d6>
 8005e7e:	9903      	ldr	r1, [sp, #12]
 8005e80:	1d1a      	adds	r2, r3, #4
 8005e82:	600a      	str	r2, [r1, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	e9c3 6700 	strd	r6, r7, [r3]
 8005e8a:	68e3      	ldr	r3, [r4, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60e3      	str	r3, [r4, #12]
 8005e90:	e66d      	b.n	8005b6e <_scanf_float+0x82>
 8005e92:	9b04      	ldr	r3, [sp, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0e5      	beq.n	8005e64 <_scanf_float+0x378>
 8005e98:	9905      	ldr	r1, [sp, #20]
 8005e9a:	230a      	movs	r3, #10
 8005e9c:	462a      	mov	r2, r5
 8005e9e:	3101      	adds	r1, #1
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	f000 ff03 	bl	8006cac <_strtol_r>
 8005ea6:	9b04      	ldr	r3, [sp, #16]
 8005ea8:	9e05      	ldr	r6, [sp, #20]
 8005eaa:	1ac2      	subs	r2, r0, r3
 8005eac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005eb0:	429e      	cmp	r6, r3
 8005eb2:	bf28      	it	cs
 8005eb4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005eb8:	4912      	ldr	r1, [pc, #72]	; (8005f04 <_scanf_float+0x418>)
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f000 f82c 	bl	8005f18 <siprintf>
 8005ec0:	e7d0      	b.n	8005e64 <_scanf_float+0x378>
 8005ec2:	9903      	ldr	r1, [sp, #12]
 8005ec4:	f012 0f04 	tst.w	r2, #4
 8005ec8:	f103 0204 	add.w	r2, r3, #4
 8005ecc:	600a      	str	r2, [r1, #0]
 8005ece:	d1d9      	bne.n	8005e84 <_scanf_float+0x398>
 8005ed0:	f8d3 8000 	ldr.w	r8, [r3]
 8005ed4:	ee10 2a10 	vmov	r2, s0
 8005ed8:	ee10 0a10 	vmov	r0, s0
 8005edc:	463b      	mov	r3, r7
 8005ede:	4639      	mov	r1, r7
 8005ee0:	f7fa fe44 	bl	8000b6c <__aeabi_dcmpun>
 8005ee4:	b128      	cbz	r0, 8005ef2 <_scanf_float+0x406>
 8005ee6:	4808      	ldr	r0, [pc, #32]	; (8005f08 <_scanf_float+0x41c>)
 8005ee8:	f000 f810 	bl	8005f0c <nanf>
 8005eec:	ed88 0a00 	vstr	s0, [r8]
 8005ef0:	e7cb      	b.n	8005e8a <_scanf_float+0x39e>
 8005ef2:	4630      	mov	r0, r6
 8005ef4:	4639      	mov	r1, r7
 8005ef6:	f7fa fe97 	bl	8000c28 <__aeabi_d2f>
 8005efa:	f8c8 0000 	str.w	r0, [r8]
 8005efe:	e7c4      	b.n	8005e8a <_scanf_float+0x39e>
 8005f00:	2500      	movs	r5, #0
 8005f02:	e634      	b.n	8005b6e <_scanf_float+0x82>
 8005f04:	08009b68 	.word	0x08009b68
 8005f08:	08009f70 	.word	0x08009f70

08005f0c <nanf>:
 8005f0c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005f14 <nanf+0x8>
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	7fc00000 	.word	0x7fc00000

08005f18 <siprintf>:
 8005f18:	b40e      	push	{r1, r2, r3}
 8005f1a:	b500      	push	{lr}
 8005f1c:	b09c      	sub	sp, #112	; 0x70
 8005f1e:	ab1d      	add	r3, sp, #116	; 0x74
 8005f20:	9002      	str	r0, [sp, #8]
 8005f22:	9006      	str	r0, [sp, #24]
 8005f24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f28:	4809      	ldr	r0, [pc, #36]	; (8005f50 <siprintf+0x38>)
 8005f2a:	9107      	str	r1, [sp, #28]
 8005f2c:	9104      	str	r1, [sp, #16]
 8005f2e:	4909      	ldr	r1, [pc, #36]	; (8005f54 <siprintf+0x3c>)
 8005f30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f34:	9105      	str	r1, [sp, #20]
 8005f36:	6800      	ldr	r0, [r0, #0]
 8005f38:	9301      	str	r3, [sp, #4]
 8005f3a:	a902      	add	r1, sp, #8
 8005f3c:	f002 fee2 	bl	8008d04 <_svfiprintf_r>
 8005f40:	9b02      	ldr	r3, [sp, #8]
 8005f42:	2200      	movs	r2, #0
 8005f44:	701a      	strb	r2, [r3, #0]
 8005f46:	b01c      	add	sp, #112	; 0x70
 8005f48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f4c:	b003      	add	sp, #12
 8005f4e:	4770      	bx	lr
 8005f50:	20000014 	.word	0x20000014
 8005f54:	ffff0208 	.word	0xffff0208

08005f58 <sulp>:
 8005f58:	b570      	push	{r4, r5, r6, lr}
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	460d      	mov	r5, r1
 8005f5e:	ec45 4b10 	vmov	d0, r4, r5
 8005f62:	4616      	mov	r6, r2
 8005f64:	f002 fc2c 	bl	80087c0 <__ulp>
 8005f68:	ec51 0b10 	vmov	r0, r1, d0
 8005f6c:	b17e      	cbz	r6, 8005f8e <sulp+0x36>
 8005f6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005f72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	dd09      	ble.n	8005f8e <sulp+0x36>
 8005f7a:	051b      	lsls	r3, r3, #20
 8005f7c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f80:	2400      	movs	r4, #0
 8005f82:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f86:	4622      	mov	r2, r4
 8005f88:	462b      	mov	r3, r5
 8005f8a:	f7fa fb55 	bl	8000638 <__aeabi_dmul>
 8005f8e:	bd70      	pop	{r4, r5, r6, pc}

08005f90 <_strtod_l>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	ed2d 8b02 	vpush	{d8}
 8005f98:	b09d      	sub	sp, #116	; 0x74
 8005f9a:	461f      	mov	r7, r3
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	9318      	str	r3, [sp, #96]	; 0x60
 8005fa0:	4ba2      	ldr	r3, [pc, #648]	; (800622c <_strtod_l+0x29c>)
 8005fa2:	9213      	str	r2, [sp, #76]	; 0x4c
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	9305      	str	r3, [sp, #20]
 8005fa8:	4604      	mov	r4, r0
 8005faa:	4618      	mov	r0, r3
 8005fac:	4688      	mov	r8, r1
 8005fae:	f7fa f92f 	bl	8000210 <strlen>
 8005fb2:	f04f 0a00 	mov.w	sl, #0
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	f04f 0b00 	mov.w	fp, #0
 8005fbc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005fc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fc2:	781a      	ldrb	r2, [r3, #0]
 8005fc4:	2a2b      	cmp	r2, #43	; 0x2b
 8005fc6:	d04e      	beq.n	8006066 <_strtod_l+0xd6>
 8005fc8:	d83b      	bhi.n	8006042 <_strtod_l+0xb2>
 8005fca:	2a0d      	cmp	r2, #13
 8005fcc:	d834      	bhi.n	8006038 <_strtod_l+0xa8>
 8005fce:	2a08      	cmp	r2, #8
 8005fd0:	d834      	bhi.n	800603c <_strtod_l+0xac>
 8005fd2:	2a00      	cmp	r2, #0
 8005fd4:	d03e      	beq.n	8006054 <_strtod_l+0xc4>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	930a      	str	r3, [sp, #40]	; 0x28
 8005fda:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005fdc:	7833      	ldrb	r3, [r6, #0]
 8005fde:	2b30      	cmp	r3, #48	; 0x30
 8005fe0:	f040 80b0 	bne.w	8006144 <_strtod_l+0x1b4>
 8005fe4:	7873      	ldrb	r3, [r6, #1]
 8005fe6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fea:	2b58      	cmp	r3, #88	; 0x58
 8005fec:	d168      	bne.n	80060c0 <_strtod_l+0x130>
 8005fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	ab18      	add	r3, sp, #96	; 0x60
 8005ff4:	9702      	str	r7, [sp, #8]
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	4a8d      	ldr	r2, [pc, #564]	; (8006230 <_strtod_l+0x2a0>)
 8005ffa:	ab19      	add	r3, sp, #100	; 0x64
 8005ffc:	a917      	add	r1, sp, #92	; 0x5c
 8005ffe:	4620      	mov	r0, r4
 8006000:	f001 fd38 	bl	8007a74 <__gethex>
 8006004:	f010 0707 	ands.w	r7, r0, #7
 8006008:	4605      	mov	r5, r0
 800600a:	d005      	beq.n	8006018 <_strtod_l+0x88>
 800600c:	2f06      	cmp	r7, #6
 800600e:	d12c      	bne.n	800606a <_strtod_l+0xda>
 8006010:	3601      	adds	r6, #1
 8006012:	2300      	movs	r3, #0
 8006014:	9617      	str	r6, [sp, #92]	; 0x5c
 8006016:	930a      	str	r3, [sp, #40]	; 0x28
 8006018:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800601a:	2b00      	cmp	r3, #0
 800601c:	f040 8590 	bne.w	8006b40 <_strtod_l+0xbb0>
 8006020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006022:	b1eb      	cbz	r3, 8006060 <_strtod_l+0xd0>
 8006024:	4652      	mov	r2, sl
 8006026:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800602a:	ec43 2b10 	vmov	d0, r2, r3
 800602e:	b01d      	add	sp, #116	; 0x74
 8006030:	ecbd 8b02 	vpop	{d8}
 8006034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006038:	2a20      	cmp	r2, #32
 800603a:	d1cc      	bne.n	8005fd6 <_strtod_l+0x46>
 800603c:	3301      	adds	r3, #1
 800603e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006040:	e7be      	b.n	8005fc0 <_strtod_l+0x30>
 8006042:	2a2d      	cmp	r2, #45	; 0x2d
 8006044:	d1c7      	bne.n	8005fd6 <_strtod_l+0x46>
 8006046:	2201      	movs	r2, #1
 8006048:	920a      	str	r2, [sp, #40]	; 0x28
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	9217      	str	r2, [sp, #92]	; 0x5c
 800604e:	785b      	ldrb	r3, [r3, #1]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1c2      	bne.n	8005fda <_strtod_l+0x4a>
 8006054:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006056:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800605a:	2b00      	cmp	r3, #0
 800605c:	f040 856e 	bne.w	8006b3c <_strtod_l+0xbac>
 8006060:	4652      	mov	r2, sl
 8006062:	465b      	mov	r3, fp
 8006064:	e7e1      	b.n	800602a <_strtod_l+0x9a>
 8006066:	2200      	movs	r2, #0
 8006068:	e7ee      	b.n	8006048 <_strtod_l+0xb8>
 800606a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800606c:	b13a      	cbz	r2, 800607e <_strtod_l+0xee>
 800606e:	2135      	movs	r1, #53	; 0x35
 8006070:	a81a      	add	r0, sp, #104	; 0x68
 8006072:	f002 fcb0 	bl	80089d6 <__copybits>
 8006076:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006078:	4620      	mov	r0, r4
 800607a:	f002 f86f 	bl	800815c <_Bfree>
 800607e:	3f01      	subs	r7, #1
 8006080:	2f04      	cmp	r7, #4
 8006082:	d806      	bhi.n	8006092 <_strtod_l+0x102>
 8006084:	e8df f007 	tbb	[pc, r7]
 8006088:	1714030a 	.word	0x1714030a
 800608c:	0a          	.byte	0x0a
 800608d:	00          	.byte	0x00
 800608e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006092:	0728      	lsls	r0, r5, #28
 8006094:	d5c0      	bpl.n	8006018 <_strtod_l+0x88>
 8006096:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800609a:	e7bd      	b.n	8006018 <_strtod_l+0x88>
 800609c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80060a0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80060a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80060a6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80060aa:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80060ae:	e7f0      	b.n	8006092 <_strtod_l+0x102>
 80060b0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006234 <_strtod_l+0x2a4>
 80060b4:	e7ed      	b.n	8006092 <_strtod_l+0x102>
 80060b6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80060ba:	f04f 3aff 	mov.w	sl, #4294967295
 80060be:	e7e8      	b.n	8006092 <_strtod_l+0x102>
 80060c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80060c6:	785b      	ldrb	r3, [r3, #1]
 80060c8:	2b30      	cmp	r3, #48	; 0x30
 80060ca:	d0f9      	beq.n	80060c0 <_strtod_l+0x130>
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d0a3      	beq.n	8006018 <_strtod_l+0x88>
 80060d0:	2301      	movs	r3, #1
 80060d2:	f04f 0900 	mov.w	r9, #0
 80060d6:	9304      	str	r3, [sp, #16]
 80060d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060da:	9308      	str	r3, [sp, #32]
 80060dc:	f8cd 901c 	str.w	r9, [sp, #28]
 80060e0:	464f      	mov	r7, r9
 80060e2:	220a      	movs	r2, #10
 80060e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80060e6:	7806      	ldrb	r6, [r0, #0]
 80060e8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80060ec:	b2d9      	uxtb	r1, r3
 80060ee:	2909      	cmp	r1, #9
 80060f0:	d92a      	bls.n	8006148 <_strtod_l+0x1b8>
 80060f2:	9905      	ldr	r1, [sp, #20]
 80060f4:	462a      	mov	r2, r5
 80060f6:	f002 ff1f 	bl	8008f38 <strncmp>
 80060fa:	b398      	cbz	r0, 8006164 <_strtod_l+0x1d4>
 80060fc:	2000      	movs	r0, #0
 80060fe:	4632      	mov	r2, r6
 8006100:	463d      	mov	r5, r7
 8006102:	9005      	str	r0, [sp, #20]
 8006104:	4603      	mov	r3, r0
 8006106:	2a65      	cmp	r2, #101	; 0x65
 8006108:	d001      	beq.n	800610e <_strtod_l+0x17e>
 800610a:	2a45      	cmp	r2, #69	; 0x45
 800610c:	d118      	bne.n	8006140 <_strtod_l+0x1b0>
 800610e:	b91d      	cbnz	r5, 8006118 <_strtod_l+0x188>
 8006110:	9a04      	ldr	r2, [sp, #16]
 8006112:	4302      	orrs	r2, r0
 8006114:	d09e      	beq.n	8006054 <_strtod_l+0xc4>
 8006116:	2500      	movs	r5, #0
 8006118:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800611c:	f108 0201 	add.w	r2, r8, #1
 8006120:	9217      	str	r2, [sp, #92]	; 0x5c
 8006122:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006126:	2a2b      	cmp	r2, #43	; 0x2b
 8006128:	d075      	beq.n	8006216 <_strtod_l+0x286>
 800612a:	2a2d      	cmp	r2, #45	; 0x2d
 800612c:	d07b      	beq.n	8006226 <_strtod_l+0x296>
 800612e:	f04f 0c00 	mov.w	ip, #0
 8006132:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006136:	2909      	cmp	r1, #9
 8006138:	f240 8082 	bls.w	8006240 <_strtod_l+0x2b0>
 800613c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006140:	2600      	movs	r6, #0
 8006142:	e09d      	b.n	8006280 <_strtod_l+0x2f0>
 8006144:	2300      	movs	r3, #0
 8006146:	e7c4      	b.n	80060d2 <_strtod_l+0x142>
 8006148:	2f08      	cmp	r7, #8
 800614a:	bfd8      	it	le
 800614c:	9907      	ldrle	r1, [sp, #28]
 800614e:	f100 0001 	add.w	r0, r0, #1
 8006152:	bfda      	itte	le
 8006154:	fb02 3301 	mlale	r3, r2, r1, r3
 8006158:	9307      	strle	r3, [sp, #28]
 800615a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800615e:	3701      	adds	r7, #1
 8006160:	9017      	str	r0, [sp, #92]	; 0x5c
 8006162:	e7bf      	b.n	80060e4 <_strtod_l+0x154>
 8006164:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006166:	195a      	adds	r2, r3, r5
 8006168:	9217      	str	r2, [sp, #92]	; 0x5c
 800616a:	5d5a      	ldrb	r2, [r3, r5]
 800616c:	2f00      	cmp	r7, #0
 800616e:	d037      	beq.n	80061e0 <_strtod_l+0x250>
 8006170:	9005      	str	r0, [sp, #20]
 8006172:	463d      	mov	r5, r7
 8006174:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006178:	2b09      	cmp	r3, #9
 800617a:	d912      	bls.n	80061a2 <_strtod_l+0x212>
 800617c:	2301      	movs	r3, #1
 800617e:	e7c2      	b.n	8006106 <_strtod_l+0x176>
 8006180:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	9217      	str	r2, [sp, #92]	; 0x5c
 8006186:	785a      	ldrb	r2, [r3, #1]
 8006188:	3001      	adds	r0, #1
 800618a:	2a30      	cmp	r2, #48	; 0x30
 800618c:	d0f8      	beq.n	8006180 <_strtod_l+0x1f0>
 800618e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006192:	2b08      	cmp	r3, #8
 8006194:	f200 84d9 	bhi.w	8006b4a <_strtod_l+0xbba>
 8006198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800619a:	9005      	str	r0, [sp, #20]
 800619c:	2000      	movs	r0, #0
 800619e:	9308      	str	r3, [sp, #32]
 80061a0:	4605      	mov	r5, r0
 80061a2:	3a30      	subs	r2, #48	; 0x30
 80061a4:	f100 0301 	add.w	r3, r0, #1
 80061a8:	d014      	beq.n	80061d4 <_strtod_l+0x244>
 80061aa:	9905      	ldr	r1, [sp, #20]
 80061ac:	4419      	add	r1, r3
 80061ae:	9105      	str	r1, [sp, #20]
 80061b0:	462b      	mov	r3, r5
 80061b2:	eb00 0e05 	add.w	lr, r0, r5
 80061b6:	210a      	movs	r1, #10
 80061b8:	4573      	cmp	r3, lr
 80061ba:	d113      	bne.n	80061e4 <_strtod_l+0x254>
 80061bc:	182b      	adds	r3, r5, r0
 80061be:	2b08      	cmp	r3, #8
 80061c0:	f105 0501 	add.w	r5, r5, #1
 80061c4:	4405      	add	r5, r0
 80061c6:	dc1c      	bgt.n	8006202 <_strtod_l+0x272>
 80061c8:	9907      	ldr	r1, [sp, #28]
 80061ca:	230a      	movs	r3, #10
 80061cc:	fb03 2301 	mla	r3, r3, r1, r2
 80061d0:	9307      	str	r3, [sp, #28]
 80061d2:	2300      	movs	r3, #0
 80061d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80061d6:	1c51      	adds	r1, r2, #1
 80061d8:	9117      	str	r1, [sp, #92]	; 0x5c
 80061da:	7852      	ldrb	r2, [r2, #1]
 80061dc:	4618      	mov	r0, r3
 80061de:	e7c9      	b.n	8006174 <_strtod_l+0x1e4>
 80061e0:	4638      	mov	r0, r7
 80061e2:	e7d2      	b.n	800618a <_strtod_l+0x1fa>
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	dc04      	bgt.n	80061f2 <_strtod_l+0x262>
 80061e8:	9e07      	ldr	r6, [sp, #28]
 80061ea:	434e      	muls	r6, r1
 80061ec:	9607      	str	r6, [sp, #28]
 80061ee:	3301      	adds	r3, #1
 80061f0:	e7e2      	b.n	80061b8 <_strtod_l+0x228>
 80061f2:	f103 0c01 	add.w	ip, r3, #1
 80061f6:	f1bc 0f10 	cmp.w	ip, #16
 80061fa:	bfd8      	it	le
 80061fc:	fb01 f909 	mulle.w	r9, r1, r9
 8006200:	e7f5      	b.n	80061ee <_strtod_l+0x25e>
 8006202:	2d10      	cmp	r5, #16
 8006204:	bfdc      	itt	le
 8006206:	230a      	movle	r3, #10
 8006208:	fb03 2909 	mlale	r9, r3, r9, r2
 800620c:	e7e1      	b.n	80061d2 <_strtod_l+0x242>
 800620e:	2300      	movs	r3, #0
 8006210:	9305      	str	r3, [sp, #20]
 8006212:	2301      	movs	r3, #1
 8006214:	e77c      	b.n	8006110 <_strtod_l+0x180>
 8006216:	f04f 0c00 	mov.w	ip, #0
 800621a:	f108 0202 	add.w	r2, r8, #2
 800621e:	9217      	str	r2, [sp, #92]	; 0x5c
 8006220:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006224:	e785      	b.n	8006132 <_strtod_l+0x1a2>
 8006226:	f04f 0c01 	mov.w	ip, #1
 800622a:	e7f6      	b.n	800621a <_strtod_l+0x28a>
 800622c:	08009db8 	.word	0x08009db8
 8006230:	08009b70 	.word	0x08009b70
 8006234:	7ff00000 	.word	0x7ff00000
 8006238:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800623a:	1c51      	adds	r1, r2, #1
 800623c:	9117      	str	r1, [sp, #92]	; 0x5c
 800623e:	7852      	ldrb	r2, [r2, #1]
 8006240:	2a30      	cmp	r2, #48	; 0x30
 8006242:	d0f9      	beq.n	8006238 <_strtod_l+0x2a8>
 8006244:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006248:	2908      	cmp	r1, #8
 800624a:	f63f af79 	bhi.w	8006140 <_strtod_l+0x1b0>
 800624e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006252:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006254:	9206      	str	r2, [sp, #24]
 8006256:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006258:	1c51      	adds	r1, r2, #1
 800625a:	9117      	str	r1, [sp, #92]	; 0x5c
 800625c:	7852      	ldrb	r2, [r2, #1]
 800625e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006262:	2e09      	cmp	r6, #9
 8006264:	d937      	bls.n	80062d6 <_strtod_l+0x346>
 8006266:	9e06      	ldr	r6, [sp, #24]
 8006268:	1b89      	subs	r1, r1, r6
 800626a:	2908      	cmp	r1, #8
 800626c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006270:	dc02      	bgt.n	8006278 <_strtod_l+0x2e8>
 8006272:	4576      	cmp	r6, lr
 8006274:	bfa8      	it	ge
 8006276:	4676      	movge	r6, lr
 8006278:	f1bc 0f00 	cmp.w	ip, #0
 800627c:	d000      	beq.n	8006280 <_strtod_l+0x2f0>
 800627e:	4276      	negs	r6, r6
 8006280:	2d00      	cmp	r5, #0
 8006282:	d14d      	bne.n	8006320 <_strtod_l+0x390>
 8006284:	9904      	ldr	r1, [sp, #16]
 8006286:	4301      	orrs	r1, r0
 8006288:	f47f aec6 	bne.w	8006018 <_strtod_l+0x88>
 800628c:	2b00      	cmp	r3, #0
 800628e:	f47f aee1 	bne.w	8006054 <_strtod_l+0xc4>
 8006292:	2a69      	cmp	r2, #105	; 0x69
 8006294:	d027      	beq.n	80062e6 <_strtod_l+0x356>
 8006296:	dc24      	bgt.n	80062e2 <_strtod_l+0x352>
 8006298:	2a49      	cmp	r2, #73	; 0x49
 800629a:	d024      	beq.n	80062e6 <_strtod_l+0x356>
 800629c:	2a4e      	cmp	r2, #78	; 0x4e
 800629e:	f47f aed9 	bne.w	8006054 <_strtod_l+0xc4>
 80062a2:	499f      	ldr	r1, [pc, #636]	; (8006520 <_strtod_l+0x590>)
 80062a4:	a817      	add	r0, sp, #92	; 0x5c
 80062a6:	f001 fe3d 	bl	8007f24 <__match>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	f43f aed2 	beq.w	8006054 <_strtod_l+0xc4>
 80062b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	2b28      	cmp	r3, #40	; 0x28
 80062b6:	d12d      	bne.n	8006314 <_strtod_l+0x384>
 80062b8:	499a      	ldr	r1, [pc, #616]	; (8006524 <_strtod_l+0x594>)
 80062ba:	aa1a      	add	r2, sp, #104	; 0x68
 80062bc:	a817      	add	r0, sp, #92	; 0x5c
 80062be:	f001 fe45 	bl	8007f4c <__hexnan>
 80062c2:	2805      	cmp	r0, #5
 80062c4:	d126      	bne.n	8006314 <_strtod_l+0x384>
 80062c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062c8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80062cc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80062d0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80062d4:	e6a0      	b.n	8006018 <_strtod_l+0x88>
 80062d6:	210a      	movs	r1, #10
 80062d8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80062dc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80062e0:	e7b9      	b.n	8006256 <_strtod_l+0x2c6>
 80062e2:	2a6e      	cmp	r2, #110	; 0x6e
 80062e4:	e7db      	b.n	800629e <_strtod_l+0x30e>
 80062e6:	4990      	ldr	r1, [pc, #576]	; (8006528 <_strtod_l+0x598>)
 80062e8:	a817      	add	r0, sp, #92	; 0x5c
 80062ea:	f001 fe1b 	bl	8007f24 <__match>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	f43f aeb0 	beq.w	8006054 <_strtod_l+0xc4>
 80062f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062f6:	498d      	ldr	r1, [pc, #564]	; (800652c <_strtod_l+0x59c>)
 80062f8:	3b01      	subs	r3, #1
 80062fa:	a817      	add	r0, sp, #92	; 0x5c
 80062fc:	9317      	str	r3, [sp, #92]	; 0x5c
 80062fe:	f001 fe11 	bl	8007f24 <__match>
 8006302:	b910      	cbnz	r0, 800630a <_strtod_l+0x37a>
 8006304:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006306:	3301      	adds	r3, #1
 8006308:	9317      	str	r3, [sp, #92]	; 0x5c
 800630a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800653c <_strtod_l+0x5ac>
 800630e:	f04f 0a00 	mov.w	sl, #0
 8006312:	e681      	b.n	8006018 <_strtod_l+0x88>
 8006314:	4886      	ldr	r0, [pc, #536]	; (8006530 <_strtod_l+0x5a0>)
 8006316:	f002 fdf7 	bl	8008f08 <nan>
 800631a:	ec5b ab10 	vmov	sl, fp, d0
 800631e:	e67b      	b.n	8006018 <_strtod_l+0x88>
 8006320:	9b05      	ldr	r3, [sp, #20]
 8006322:	9807      	ldr	r0, [sp, #28]
 8006324:	1af3      	subs	r3, r6, r3
 8006326:	2f00      	cmp	r7, #0
 8006328:	bf08      	it	eq
 800632a:	462f      	moveq	r7, r5
 800632c:	2d10      	cmp	r5, #16
 800632e:	9306      	str	r3, [sp, #24]
 8006330:	46a8      	mov	r8, r5
 8006332:	bfa8      	it	ge
 8006334:	f04f 0810 	movge.w	r8, #16
 8006338:	f7fa f904 	bl	8000544 <__aeabi_ui2d>
 800633c:	2d09      	cmp	r5, #9
 800633e:	4682      	mov	sl, r0
 8006340:	468b      	mov	fp, r1
 8006342:	dd13      	ble.n	800636c <_strtod_l+0x3dc>
 8006344:	4b7b      	ldr	r3, [pc, #492]	; (8006534 <_strtod_l+0x5a4>)
 8006346:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800634a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800634e:	f7fa f973 	bl	8000638 <__aeabi_dmul>
 8006352:	4682      	mov	sl, r0
 8006354:	4648      	mov	r0, r9
 8006356:	468b      	mov	fp, r1
 8006358:	f7fa f8f4 	bl	8000544 <__aeabi_ui2d>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4650      	mov	r0, sl
 8006362:	4659      	mov	r1, fp
 8006364:	f7f9 ffb2 	bl	80002cc <__adddf3>
 8006368:	4682      	mov	sl, r0
 800636a:	468b      	mov	fp, r1
 800636c:	2d0f      	cmp	r5, #15
 800636e:	dc38      	bgt.n	80063e2 <_strtod_l+0x452>
 8006370:	9b06      	ldr	r3, [sp, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	f43f ae50 	beq.w	8006018 <_strtod_l+0x88>
 8006378:	dd24      	ble.n	80063c4 <_strtod_l+0x434>
 800637a:	2b16      	cmp	r3, #22
 800637c:	dc0b      	bgt.n	8006396 <_strtod_l+0x406>
 800637e:	496d      	ldr	r1, [pc, #436]	; (8006534 <_strtod_l+0x5a4>)
 8006380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006384:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006388:	4652      	mov	r2, sl
 800638a:	465b      	mov	r3, fp
 800638c:	f7fa f954 	bl	8000638 <__aeabi_dmul>
 8006390:	4682      	mov	sl, r0
 8006392:	468b      	mov	fp, r1
 8006394:	e640      	b.n	8006018 <_strtod_l+0x88>
 8006396:	9a06      	ldr	r2, [sp, #24]
 8006398:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800639c:	4293      	cmp	r3, r2
 800639e:	db20      	blt.n	80063e2 <_strtod_l+0x452>
 80063a0:	4c64      	ldr	r4, [pc, #400]	; (8006534 <_strtod_l+0x5a4>)
 80063a2:	f1c5 050f 	rsb	r5, r5, #15
 80063a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80063aa:	4652      	mov	r2, sl
 80063ac:	465b      	mov	r3, fp
 80063ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063b2:	f7fa f941 	bl	8000638 <__aeabi_dmul>
 80063b6:	9b06      	ldr	r3, [sp, #24]
 80063b8:	1b5d      	subs	r5, r3, r5
 80063ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80063be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063c2:	e7e3      	b.n	800638c <_strtod_l+0x3fc>
 80063c4:	9b06      	ldr	r3, [sp, #24]
 80063c6:	3316      	adds	r3, #22
 80063c8:	db0b      	blt.n	80063e2 <_strtod_l+0x452>
 80063ca:	9b05      	ldr	r3, [sp, #20]
 80063cc:	1b9e      	subs	r6, r3, r6
 80063ce:	4b59      	ldr	r3, [pc, #356]	; (8006534 <_strtod_l+0x5a4>)
 80063d0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80063d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063d8:	4650      	mov	r0, sl
 80063da:	4659      	mov	r1, fp
 80063dc:	f7fa fa56 	bl	800088c <__aeabi_ddiv>
 80063e0:	e7d6      	b.n	8006390 <_strtod_l+0x400>
 80063e2:	9b06      	ldr	r3, [sp, #24]
 80063e4:	eba5 0808 	sub.w	r8, r5, r8
 80063e8:	4498      	add	r8, r3
 80063ea:	f1b8 0f00 	cmp.w	r8, #0
 80063ee:	dd74      	ble.n	80064da <_strtod_l+0x54a>
 80063f0:	f018 030f 	ands.w	r3, r8, #15
 80063f4:	d00a      	beq.n	800640c <_strtod_l+0x47c>
 80063f6:	494f      	ldr	r1, [pc, #316]	; (8006534 <_strtod_l+0x5a4>)
 80063f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063fc:	4652      	mov	r2, sl
 80063fe:	465b      	mov	r3, fp
 8006400:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006404:	f7fa f918 	bl	8000638 <__aeabi_dmul>
 8006408:	4682      	mov	sl, r0
 800640a:	468b      	mov	fp, r1
 800640c:	f038 080f 	bics.w	r8, r8, #15
 8006410:	d04f      	beq.n	80064b2 <_strtod_l+0x522>
 8006412:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006416:	dd22      	ble.n	800645e <_strtod_l+0x4ce>
 8006418:	2500      	movs	r5, #0
 800641a:	462e      	mov	r6, r5
 800641c:	9507      	str	r5, [sp, #28]
 800641e:	9505      	str	r5, [sp, #20]
 8006420:	2322      	movs	r3, #34	; 0x22
 8006422:	f8df b118 	ldr.w	fp, [pc, #280]	; 800653c <_strtod_l+0x5ac>
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	f04f 0a00 	mov.w	sl, #0
 800642c:	9b07      	ldr	r3, [sp, #28]
 800642e:	2b00      	cmp	r3, #0
 8006430:	f43f adf2 	beq.w	8006018 <_strtod_l+0x88>
 8006434:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006436:	4620      	mov	r0, r4
 8006438:	f001 fe90 	bl	800815c <_Bfree>
 800643c:	9905      	ldr	r1, [sp, #20]
 800643e:	4620      	mov	r0, r4
 8006440:	f001 fe8c 	bl	800815c <_Bfree>
 8006444:	4631      	mov	r1, r6
 8006446:	4620      	mov	r0, r4
 8006448:	f001 fe88 	bl	800815c <_Bfree>
 800644c:	9907      	ldr	r1, [sp, #28]
 800644e:	4620      	mov	r0, r4
 8006450:	f001 fe84 	bl	800815c <_Bfree>
 8006454:	4629      	mov	r1, r5
 8006456:	4620      	mov	r0, r4
 8006458:	f001 fe80 	bl	800815c <_Bfree>
 800645c:	e5dc      	b.n	8006018 <_strtod_l+0x88>
 800645e:	4b36      	ldr	r3, [pc, #216]	; (8006538 <_strtod_l+0x5a8>)
 8006460:	9304      	str	r3, [sp, #16]
 8006462:	2300      	movs	r3, #0
 8006464:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006468:	4650      	mov	r0, sl
 800646a:	4659      	mov	r1, fp
 800646c:	4699      	mov	r9, r3
 800646e:	f1b8 0f01 	cmp.w	r8, #1
 8006472:	dc21      	bgt.n	80064b8 <_strtod_l+0x528>
 8006474:	b10b      	cbz	r3, 800647a <_strtod_l+0x4ea>
 8006476:	4682      	mov	sl, r0
 8006478:	468b      	mov	fp, r1
 800647a:	4b2f      	ldr	r3, [pc, #188]	; (8006538 <_strtod_l+0x5a8>)
 800647c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006480:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006484:	4652      	mov	r2, sl
 8006486:	465b      	mov	r3, fp
 8006488:	e9d9 0100 	ldrd	r0, r1, [r9]
 800648c:	f7fa f8d4 	bl	8000638 <__aeabi_dmul>
 8006490:	4b2a      	ldr	r3, [pc, #168]	; (800653c <_strtod_l+0x5ac>)
 8006492:	460a      	mov	r2, r1
 8006494:	400b      	ands	r3, r1
 8006496:	492a      	ldr	r1, [pc, #168]	; (8006540 <_strtod_l+0x5b0>)
 8006498:	428b      	cmp	r3, r1
 800649a:	4682      	mov	sl, r0
 800649c:	d8bc      	bhi.n	8006418 <_strtod_l+0x488>
 800649e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80064a2:	428b      	cmp	r3, r1
 80064a4:	bf86      	itte	hi
 80064a6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006544 <_strtod_l+0x5b4>
 80064aa:	f04f 3aff 	movhi.w	sl, #4294967295
 80064ae:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80064b2:	2300      	movs	r3, #0
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	e084      	b.n	80065c2 <_strtod_l+0x632>
 80064b8:	f018 0f01 	tst.w	r8, #1
 80064bc:	d005      	beq.n	80064ca <_strtod_l+0x53a>
 80064be:	9b04      	ldr	r3, [sp, #16]
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	f7fa f8b8 	bl	8000638 <__aeabi_dmul>
 80064c8:	2301      	movs	r3, #1
 80064ca:	9a04      	ldr	r2, [sp, #16]
 80064cc:	3208      	adds	r2, #8
 80064ce:	f109 0901 	add.w	r9, r9, #1
 80064d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80064d6:	9204      	str	r2, [sp, #16]
 80064d8:	e7c9      	b.n	800646e <_strtod_l+0x4de>
 80064da:	d0ea      	beq.n	80064b2 <_strtod_l+0x522>
 80064dc:	f1c8 0800 	rsb	r8, r8, #0
 80064e0:	f018 020f 	ands.w	r2, r8, #15
 80064e4:	d00a      	beq.n	80064fc <_strtod_l+0x56c>
 80064e6:	4b13      	ldr	r3, [pc, #76]	; (8006534 <_strtod_l+0x5a4>)
 80064e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064ec:	4650      	mov	r0, sl
 80064ee:	4659      	mov	r1, fp
 80064f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f4:	f7fa f9ca 	bl	800088c <__aeabi_ddiv>
 80064f8:	4682      	mov	sl, r0
 80064fa:	468b      	mov	fp, r1
 80064fc:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006500:	d0d7      	beq.n	80064b2 <_strtod_l+0x522>
 8006502:	f1b8 0f1f 	cmp.w	r8, #31
 8006506:	dd1f      	ble.n	8006548 <_strtod_l+0x5b8>
 8006508:	2500      	movs	r5, #0
 800650a:	462e      	mov	r6, r5
 800650c:	9507      	str	r5, [sp, #28]
 800650e:	9505      	str	r5, [sp, #20]
 8006510:	2322      	movs	r3, #34	; 0x22
 8006512:	f04f 0a00 	mov.w	sl, #0
 8006516:	f04f 0b00 	mov.w	fp, #0
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	e786      	b.n	800642c <_strtod_l+0x49c>
 800651e:	bf00      	nop
 8006520:	08009b41 	.word	0x08009b41
 8006524:	08009b84 	.word	0x08009b84
 8006528:	08009b39 	.word	0x08009b39
 800652c:	08009cc4 	.word	0x08009cc4
 8006530:	08009f70 	.word	0x08009f70
 8006534:	08009e50 	.word	0x08009e50
 8006538:	08009e28 	.word	0x08009e28
 800653c:	7ff00000 	.word	0x7ff00000
 8006540:	7ca00000 	.word	0x7ca00000
 8006544:	7fefffff 	.word	0x7fefffff
 8006548:	f018 0310 	ands.w	r3, r8, #16
 800654c:	bf18      	it	ne
 800654e:	236a      	movne	r3, #106	; 0x6a
 8006550:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006900 <_strtod_l+0x970>
 8006554:	9304      	str	r3, [sp, #16]
 8006556:	4650      	mov	r0, sl
 8006558:	4659      	mov	r1, fp
 800655a:	2300      	movs	r3, #0
 800655c:	f018 0f01 	tst.w	r8, #1
 8006560:	d004      	beq.n	800656c <_strtod_l+0x5dc>
 8006562:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006566:	f7fa f867 	bl	8000638 <__aeabi_dmul>
 800656a:	2301      	movs	r3, #1
 800656c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006570:	f109 0908 	add.w	r9, r9, #8
 8006574:	d1f2      	bne.n	800655c <_strtod_l+0x5cc>
 8006576:	b10b      	cbz	r3, 800657c <_strtod_l+0x5ec>
 8006578:	4682      	mov	sl, r0
 800657a:	468b      	mov	fp, r1
 800657c:	9b04      	ldr	r3, [sp, #16]
 800657e:	b1c3      	cbz	r3, 80065b2 <_strtod_l+0x622>
 8006580:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006584:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006588:	2b00      	cmp	r3, #0
 800658a:	4659      	mov	r1, fp
 800658c:	dd11      	ble.n	80065b2 <_strtod_l+0x622>
 800658e:	2b1f      	cmp	r3, #31
 8006590:	f340 8124 	ble.w	80067dc <_strtod_l+0x84c>
 8006594:	2b34      	cmp	r3, #52	; 0x34
 8006596:	bfde      	ittt	le
 8006598:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800659c:	f04f 33ff 	movle.w	r3, #4294967295
 80065a0:	fa03 f202 	lslle.w	r2, r3, r2
 80065a4:	f04f 0a00 	mov.w	sl, #0
 80065a8:	bfcc      	ite	gt
 80065aa:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80065ae:	ea02 0b01 	andle.w	fp, r2, r1
 80065b2:	2200      	movs	r2, #0
 80065b4:	2300      	movs	r3, #0
 80065b6:	4650      	mov	r0, sl
 80065b8:	4659      	mov	r1, fp
 80065ba:	f7fa faa5 	bl	8000b08 <__aeabi_dcmpeq>
 80065be:	2800      	cmp	r0, #0
 80065c0:	d1a2      	bne.n	8006508 <_strtod_l+0x578>
 80065c2:	9b07      	ldr	r3, [sp, #28]
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	9908      	ldr	r1, [sp, #32]
 80065c8:	462b      	mov	r3, r5
 80065ca:	463a      	mov	r2, r7
 80065cc:	4620      	mov	r0, r4
 80065ce:	f001 fe2d 	bl	800822c <__s2b>
 80065d2:	9007      	str	r0, [sp, #28]
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f43f af1f 	beq.w	8006418 <_strtod_l+0x488>
 80065da:	9b05      	ldr	r3, [sp, #20]
 80065dc:	1b9e      	subs	r6, r3, r6
 80065de:	9b06      	ldr	r3, [sp, #24]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bfb4      	ite	lt
 80065e4:	4633      	movlt	r3, r6
 80065e6:	2300      	movge	r3, #0
 80065e8:	930c      	str	r3, [sp, #48]	; 0x30
 80065ea:	9b06      	ldr	r3, [sp, #24]
 80065ec:	2500      	movs	r5, #0
 80065ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80065f2:	9312      	str	r3, [sp, #72]	; 0x48
 80065f4:	462e      	mov	r6, r5
 80065f6:	9b07      	ldr	r3, [sp, #28]
 80065f8:	4620      	mov	r0, r4
 80065fa:	6859      	ldr	r1, [r3, #4]
 80065fc:	f001 fd6e 	bl	80080dc <_Balloc>
 8006600:	9005      	str	r0, [sp, #20]
 8006602:	2800      	cmp	r0, #0
 8006604:	f43f af0c 	beq.w	8006420 <_strtod_l+0x490>
 8006608:	9b07      	ldr	r3, [sp, #28]
 800660a:	691a      	ldr	r2, [r3, #16]
 800660c:	3202      	adds	r2, #2
 800660e:	f103 010c 	add.w	r1, r3, #12
 8006612:	0092      	lsls	r2, r2, #2
 8006614:	300c      	adds	r0, #12
 8006616:	f001 fd53 	bl	80080c0 <memcpy>
 800661a:	ec4b ab10 	vmov	d0, sl, fp
 800661e:	aa1a      	add	r2, sp, #104	; 0x68
 8006620:	a919      	add	r1, sp, #100	; 0x64
 8006622:	4620      	mov	r0, r4
 8006624:	f002 f948 	bl	80088b8 <__d2b>
 8006628:	ec4b ab18 	vmov	d8, sl, fp
 800662c:	9018      	str	r0, [sp, #96]	; 0x60
 800662e:	2800      	cmp	r0, #0
 8006630:	f43f aef6 	beq.w	8006420 <_strtod_l+0x490>
 8006634:	2101      	movs	r1, #1
 8006636:	4620      	mov	r0, r4
 8006638:	f001 fe92 	bl	8008360 <__i2b>
 800663c:	4606      	mov	r6, r0
 800663e:	2800      	cmp	r0, #0
 8006640:	f43f aeee 	beq.w	8006420 <_strtod_l+0x490>
 8006644:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006646:	9904      	ldr	r1, [sp, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	bfab      	itete	ge
 800664c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800664e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006650:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006652:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006656:	bfac      	ite	ge
 8006658:	eb03 0902 	addge.w	r9, r3, r2
 800665c:	1ad7      	sublt	r7, r2, r3
 800665e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006660:	eba3 0801 	sub.w	r8, r3, r1
 8006664:	4490      	add	r8, r2
 8006666:	4ba1      	ldr	r3, [pc, #644]	; (80068ec <_strtod_l+0x95c>)
 8006668:	f108 38ff 	add.w	r8, r8, #4294967295
 800666c:	4598      	cmp	r8, r3
 800666e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006672:	f280 80c7 	bge.w	8006804 <_strtod_l+0x874>
 8006676:	eba3 0308 	sub.w	r3, r3, r8
 800667a:	2b1f      	cmp	r3, #31
 800667c:	eba2 0203 	sub.w	r2, r2, r3
 8006680:	f04f 0101 	mov.w	r1, #1
 8006684:	f300 80b1 	bgt.w	80067ea <_strtod_l+0x85a>
 8006688:	fa01 f303 	lsl.w	r3, r1, r3
 800668c:	930d      	str	r3, [sp, #52]	; 0x34
 800668e:	2300      	movs	r3, #0
 8006690:	9308      	str	r3, [sp, #32]
 8006692:	eb09 0802 	add.w	r8, r9, r2
 8006696:	9b04      	ldr	r3, [sp, #16]
 8006698:	45c1      	cmp	r9, r8
 800669a:	4417      	add	r7, r2
 800669c:	441f      	add	r7, r3
 800669e:	464b      	mov	r3, r9
 80066a0:	bfa8      	it	ge
 80066a2:	4643      	movge	r3, r8
 80066a4:	42bb      	cmp	r3, r7
 80066a6:	bfa8      	it	ge
 80066a8:	463b      	movge	r3, r7
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	bfc2      	ittt	gt
 80066ae:	eba8 0803 	subgt.w	r8, r8, r3
 80066b2:	1aff      	subgt	r7, r7, r3
 80066b4:	eba9 0903 	subgt.w	r9, r9, r3
 80066b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	dd17      	ble.n	80066ee <_strtod_l+0x75e>
 80066be:	4631      	mov	r1, r6
 80066c0:	461a      	mov	r2, r3
 80066c2:	4620      	mov	r0, r4
 80066c4:	f001 ff0c 	bl	80084e0 <__pow5mult>
 80066c8:	4606      	mov	r6, r0
 80066ca:	2800      	cmp	r0, #0
 80066cc:	f43f aea8 	beq.w	8006420 <_strtod_l+0x490>
 80066d0:	4601      	mov	r1, r0
 80066d2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80066d4:	4620      	mov	r0, r4
 80066d6:	f001 fe59 	bl	800838c <__multiply>
 80066da:	900b      	str	r0, [sp, #44]	; 0x2c
 80066dc:	2800      	cmp	r0, #0
 80066de:	f43f ae9f 	beq.w	8006420 <_strtod_l+0x490>
 80066e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066e4:	4620      	mov	r0, r4
 80066e6:	f001 fd39 	bl	800815c <_Bfree>
 80066ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066ec:	9318      	str	r3, [sp, #96]	; 0x60
 80066ee:	f1b8 0f00 	cmp.w	r8, #0
 80066f2:	f300 808c 	bgt.w	800680e <_strtod_l+0x87e>
 80066f6:	9b06      	ldr	r3, [sp, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	dd08      	ble.n	800670e <_strtod_l+0x77e>
 80066fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066fe:	9905      	ldr	r1, [sp, #20]
 8006700:	4620      	mov	r0, r4
 8006702:	f001 feed 	bl	80084e0 <__pow5mult>
 8006706:	9005      	str	r0, [sp, #20]
 8006708:	2800      	cmp	r0, #0
 800670a:	f43f ae89 	beq.w	8006420 <_strtod_l+0x490>
 800670e:	2f00      	cmp	r7, #0
 8006710:	dd08      	ble.n	8006724 <_strtod_l+0x794>
 8006712:	9905      	ldr	r1, [sp, #20]
 8006714:	463a      	mov	r2, r7
 8006716:	4620      	mov	r0, r4
 8006718:	f001 ff3c 	bl	8008594 <__lshift>
 800671c:	9005      	str	r0, [sp, #20]
 800671e:	2800      	cmp	r0, #0
 8006720:	f43f ae7e 	beq.w	8006420 <_strtod_l+0x490>
 8006724:	f1b9 0f00 	cmp.w	r9, #0
 8006728:	dd08      	ble.n	800673c <_strtod_l+0x7ac>
 800672a:	4631      	mov	r1, r6
 800672c:	464a      	mov	r2, r9
 800672e:	4620      	mov	r0, r4
 8006730:	f001 ff30 	bl	8008594 <__lshift>
 8006734:	4606      	mov	r6, r0
 8006736:	2800      	cmp	r0, #0
 8006738:	f43f ae72 	beq.w	8006420 <_strtod_l+0x490>
 800673c:	9a05      	ldr	r2, [sp, #20]
 800673e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006740:	4620      	mov	r0, r4
 8006742:	f001 ffb3 	bl	80086ac <__mdiff>
 8006746:	4605      	mov	r5, r0
 8006748:	2800      	cmp	r0, #0
 800674a:	f43f ae69 	beq.w	8006420 <_strtod_l+0x490>
 800674e:	68c3      	ldr	r3, [r0, #12]
 8006750:	930b      	str	r3, [sp, #44]	; 0x2c
 8006752:	2300      	movs	r3, #0
 8006754:	60c3      	str	r3, [r0, #12]
 8006756:	4631      	mov	r1, r6
 8006758:	f001 ff8c 	bl	8008674 <__mcmp>
 800675c:	2800      	cmp	r0, #0
 800675e:	da60      	bge.n	8006822 <_strtod_l+0x892>
 8006760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006762:	ea53 030a 	orrs.w	r3, r3, sl
 8006766:	f040 8082 	bne.w	800686e <_strtod_l+0x8de>
 800676a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800676e:	2b00      	cmp	r3, #0
 8006770:	d17d      	bne.n	800686e <_strtod_l+0x8de>
 8006772:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006776:	0d1b      	lsrs	r3, r3, #20
 8006778:	051b      	lsls	r3, r3, #20
 800677a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800677e:	d976      	bls.n	800686e <_strtod_l+0x8de>
 8006780:	696b      	ldr	r3, [r5, #20]
 8006782:	b913      	cbnz	r3, 800678a <_strtod_l+0x7fa>
 8006784:	692b      	ldr	r3, [r5, #16]
 8006786:	2b01      	cmp	r3, #1
 8006788:	dd71      	ble.n	800686e <_strtod_l+0x8de>
 800678a:	4629      	mov	r1, r5
 800678c:	2201      	movs	r2, #1
 800678e:	4620      	mov	r0, r4
 8006790:	f001 ff00 	bl	8008594 <__lshift>
 8006794:	4631      	mov	r1, r6
 8006796:	4605      	mov	r5, r0
 8006798:	f001 ff6c 	bl	8008674 <__mcmp>
 800679c:	2800      	cmp	r0, #0
 800679e:	dd66      	ble.n	800686e <_strtod_l+0x8de>
 80067a0:	9904      	ldr	r1, [sp, #16]
 80067a2:	4a53      	ldr	r2, [pc, #332]	; (80068f0 <_strtod_l+0x960>)
 80067a4:	465b      	mov	r3, fp
 80067a6:	2900      	cmp	r1, #0
 80067a8:	f000 8081 	beq.w	80068ae <_strtod_l+0x91e>
 80067ac:	ea02 010b 	and.w	r1, r2, fp
 80067b0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80067b4:	dc7b      	bgt.n	80068ae <_strtod_l+0x91e>
 80067b6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80067ba:	f77f aea9 	ble.w	8006510 <_strtod_l+0x580>
 80067be:	4b4d      	ldr	r3, [pc, #308]	; (80068f4 <_strtod_l+0x964>)
 80067c0:	4650      	mov	r0, sl
 80067c2:	4659      	mov	r1, fp
 80067c4:	2200      	movs	r2, #0
 80067c6:	f7f9 ff37 	bl	8000638 <__aeabi_dmul>
 80067ca:	460b      	mov	r3, r1
 80067cc:	4303      	orrs	r3, r0
 80067ce:	bf08      	it	eq
 80067d0:	2322      	moveq	r3, #34	; 0x22
 80067d2:	4682      	mov	sl, r0
 80067d4:	468b      	mov	fp, r1
 80067d6:	bf08      	it	eq
 80067d8:	6023      	streq	r3, [r4, #0]
 80067da:	e62b      	b.n	8006434 <_strtod_l+0x4a4>
 80067dc:	f04f 32ff 	mov.w	r2, #4294967295
 80067e0:	fa02 f303 	lsl.w	r3, r2, r3
 80067e4:	ea03 0a0a 	and.w	sl, r3, sl
 80067e8:	e6e3      	b.n	80065b2 <_strtod_l+0x622>
 80067ea:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80067ee:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80067f2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80067f6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80067fa:	fa01 f308 	lsl.w	r3, r1, r8
 80067fe:	9308      	str	r3, [sp, #32]
 8006800:	910d      	str	r1, [sp, #52]	; 0x34
 8006802:	e746      	b.n	8006692 <_strtod_l+0x702>
 8006804:	2300      	movs	r3, #0
 8006806:	9308      	str	r3, [sp, #32]
 8006808:	2301      	movs	r3, #1
 800680a:	930d      	str	r3, [sp, #52]	; 0x34
 800680c:	e741      	b.n	8006692 <_strtod_l+0x702>
 800680e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006810:	4642      	mov	r2, r8
 8006812:	4620      	mov	r0, r4
 8006814:	f001 febe 	bl	8008594 <__lshift>
 8006818:	9018      	str	r0, [sp, #96]	; 0x60
 800681a:	2800      	cmp	r0, #0
 800681c:	f47f af6b 	bne.w	80066f6 <_strtod_l+0x766>
 8006820:	e5fe      	b.n	8006420 <_strtod_l+0x490>
 8006822:	465f      	mov	r7, fp
 8006824:	d16e      	bne.n	8006904 <_strtod_l+0x974>
 8006826:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006828:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800682c:	b342      	cbz	r2, 8006880 <_strtod_l+0x8f0>
 800682e:	4a32      	ldr	r2, [pc, #200]	; (80068f8 <_strtod_l+0x968>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d128      	bne.n	8006886 <_strtod_l+0x8f6>
 8006834:	9b04      	ldr	r3, [sp, #16]
 8006836:	4651      	mov	r1, sl
 8006838:	b1eb      	cbz	r3, 8006876 <_strtod_l+0x8e6>
 800683a:	4b2d      	ldr	r3, [pc, #180]	; (80068f0 <_strtod_l+0x960>)
 800683c:	403b      	ands	r3, r7
 800683e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006842:	f04f 32ff 	mov.w	r2, #4294967295
 8006846:	d819      	bhi.n	800687c <_strtod_l+0x8ec>
 8006848:	0d1b      	lsrs	r3, r3, #20
 800684a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800684e:	fa02 f303 	lsl.w	r3, r2, r3
 8006852:	4299      	cmp	r1, r3
 8006854:	d117      	bne.n	8006886 <_strtod_l+0x8f6>
 8006856:	4b29      	ldr	r3, [pc, #164]	; (80068fc <_strtod_l+0x96c>)
 8006858:	429f      	cmp	r7, r3
 800685a:	d102      	bne.n	8006862 <_strtod_l+0x8d2>
 800685c:	3101      	adds	r1, #1
 800685e:	f43f addf 	beq.w	8006420 <_strtod_l+0x490>
 8006862:	4b23      	ldr	r3, [pc, #140]	; (80068f0 <_strtod_l+0x960>)
 8006864:	403b      	ands	r3, r7
 8006866:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800686a:	f04f 0a00 	mov.w	sl, #0
 800686e:	9b04      	ldr	r3, [sp, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1a4      	bne.n	80067be <_strtod_l+0x82e>
 8006874:	e5de      	b.n	8006434 <_strtod_l+0x4a4>
 8006876:	f04f 33ff 	mov.w	r3, #4294967295
 800687a:	e7ea      	b.n	8006852 <_strtod_l+0x8c2>
 800687c:	4613      	mov	r3, r2
 800687e:	e7e8      	b.n	8006852 <_strtod_l+0x8c2>
 8006880:	ea53 030a 	orrs.w	r3, r3, sl
 8006884:	d08c      	beq.n	80067a0 <_strtod_l+0x810>
 8006886:	9b08      	ldr	r3, [sp, #32]
 8006888:	b1db      	cbz	r3, 80068c2 <_strtod_l+0x932>
 800688a:	423b      	tst	r3, r7
 800688c:	d0ef      	beq.n	800686e <_strtod_l+0x8de>
 800688e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006890:	9a04      	ldr	r2, [sp, #16]
 8006892:	4650      	mov	r0, sl
 8006894:	4659      	mov	r1, fp
 8006896:	b1c3      	cbz	r3, 80068ca <_strtod_l+0x93a>
 8006898:	f7ff fb5e 	bl	8005f58 <sulp>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	ec51 0b18 	vmov	r0, r1, d8
 80068a4:	f7f9 fd12 	bl	80002cc <__adddf3>
 80068a8:	4682      	mov	sl, r0
 80068aa:	468b      	mov	fp, r1
 80068ac:	e7df      	b.n	800686e <_strtod_l+0x8de>
 80068ae:	4013      	ands	r3, r2
 80068b0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80068b4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80068b8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80068bc:	f04f 3aff 	mov.w	sl, #4294967295
 80068c0:	e7d5      	b.n	800686e <_strtod_l+0x8de>
 80068c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068c4:	ea13 0f0a 	tst.w	r3, sl
 80068c8:	e7e0      	b.n	800688c <_strtod_l+0x8fc>
 80068ca:	f7ff fb45 	bl	8005f58 <sulp>
 80068ce:	4602      	mov	r2, r0
 80068d0:	460b      	mov	r3, r1
 80068d2:	ec51 0b18 	vmov	r0, r1, d8
 80068d6:	f7f9 fcf7 	bl	80002c8 <__aeabi_dsub>
 80068da:	2200      	movs	r2, #0
 80068dc:	2300      	movs	r3, #0
 80068de:	4682      	mov	sl, r0
 80068e0:	468b      	mov	fp, r1
 80068e2:	f7fa f911 	bl	8000b08 <__aeabi_dcmpeq>
 80068e6:	2800      	cmp	r0, #0
 80068e8:	d0c1      	beq.n	800686e <_strtod_l+0x8de>
 80068ea:	e611      	b.n	8006510 <_strtod_l+0x580>
 80068ec:	fffffc02 	.word	0xfffffc02
 80068f0:	7ff00000 	.word	0x7ff00000
 80068f4:	39500000 	.word	0x39500000
 80068f8:	000fffff 	.word	0x000fffff
 80068fc:	7fefffff 	.word	0x7fefffff
 8006900:	08009b98 	.word	0x08009b98
 8006904:	4631      	mov	r1, r6
 8006906:	4628      	mov	r0, r5
 8006908:	f002 f832 	bl	8008970 <__ratio>
 800690c:	ec59 8b10 	vmov	r8, r9, d0
 8006910:	ee10 0a10 	vmov	r0, s0
 8006914:	2200      	movs	r2, #0
 8006916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800691a:	4649      	mov	r1, r9
 800691c:	f7fa f908 	bl	8000b30 <__aeabi_dcmple>
 8006920:	2800      	cmp	r0, #0
 8006922:	d07a      	beq.n	8006a1a <_strtod_l+0xa8a>
 8006924:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006926:	2b00      	cmp	r3, #0
 8006928:	d04a      	beq.n	80069c0 <_strtod_l+0xa30>
 800692a:	4b95      	ldr	r3, [pc, #596]	; (8006b80 <_strtod_l+0xbf0>)
 800692c:	2200      	movs	r2, #0
 800692e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006932:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006b80 <_strtod_l+0xbf0>
 8006936:	f04f 0800 	mov.w	r8, #0
 800693a:	4b92      	ldr	r3, [pc, #584]	; (8006b84 <_strtod_l+0xbf4>)
 800693c:	403b      	ands	r3, r7
 800693e:	930d      	str	r3, [sp, #52]	; 0x34
 8006940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006942:	4b91      	ldr	r3, [pc, #580]	; (8006b88 <_strtod_l+0xbf8>)
 8006944:	429a      	cmp	r2, r3
 8006946:	f040 80b0 	bne.w	8006aaa <_strtod_l+0xb1a>
 800694a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800694e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006952:	ec4b ab10 	vmov	d0, sl, fp
 8006956:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800695a:	f001 ff31 	bl	80087c0 <__ulp>
 800695e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006962:	ec53 2b10 	vmov	r2, r3, d0
 8006966:	f7f9 fe67 	bl	8000638 <__aeabi_dmul>
 800696a:	4652      	mov	r2, sl
 800696c:	465b      	mov	r3, fp
 800696e:	f7f9 fcad 	bl	80002cc <__adddf3>
 8006972:	460b      	mov	r3, r1
 8006974:	4983      	ldr	r1, [pc, #524]	; (8006b84 <_strtod_l+0xbf4>)
 8006976:	4a85      	ldr	r2, [pc, #532]	; (8006b8c <_strtod_l+0xbfc>)
 8006978:	4019      	ands	r1, r3
 800697a:	4291      	cmp	r1, r2
 800697c:	4682      	mov	sl, r0
 800697e:	d960      	bls.n	8006a42 <_strtod_l+0xab2>
 8006980:	ee18 3a90 	vmov	r3, s17
 8006984:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006988:	4293      	cmp	r3, r2
 800698a:	d104      	bne.n	8006996 <_strtod_l+0xa06>
 800698c:	ee18 3a10 	vmov	r3, s16
 8006990:	3301      	adds	r3, #1
 8006992:	f43f ad45 	beq.w	8006420 <_strtod_l+0x490>
 8006996:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006b98 <_strtod_l+0xc08>
 800699a:	f04f 3aff 	mov.w	sl, #4294967295
 800699e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80069a0:	4620      	mov	r0, r4
 80069a2:	f001 fbdb 	bl	800815c <_Bfree>
 80069a6:	9905      	ldr	r1, [sp, #20]
 80069a8:	4620      	mov	r0, r4
 80069aa:	f001 fbd7 	bl	800815c <_Bfree>
 80069ae:	4631      	mov	r1, r6
 80069b0:	4620      	mov	r0, r4
 80069b2:	f001 fbd3 	bl	800815c <_Bfree>
 80069b6:	4629      	mov	r1, r5
 80069b8:	4620      	mov	r0, r4
 80069ba:	f001 fbcf 	bl	800815c <_Bfree>
 80069be:	e61a      	b.n	80065f6 <_strtod_l+0x666>
 80069c0:	f1ba 0f00 	cmp.w	sl, #0
 80069c4:	d11b      	bne.n	80069fe <_strtod_l+0xa6e>
 80069c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069ca:	b9f3      	cbnz	r3, 8006a0a <_strtod_l+0xa7a>
 80069cc:	4b6c      	ldr	r3, [pc, #432]	; (8006b80 <_strtod_l+0xbf0>)
 80069ce:	2200      	movs	r2, #0
 80069d0:	4640      	mov	r0, r8
 80069d2:	4649      	mov	r1, r9
 80069d4:	f7fa f8a2 	bl	8000b1c <__aeabi_dcmplt>
 80069d8:	b9d0      	cbnz	r0, 8006a10 <_strtod_l+0xa80>
 80069da:	4640      	mov	r0, r8
 80069dc:	4649      	mov	r1, r9
 80069de:	4b6c      	ldr	r3, [pc, #432]	; (8006b90 <_strtod_l+0xc00>)
 80069e0:	2200      	movs	r2, #0
 80069e2:	f7f9 fe29 	bl	8000638 <__aeabi_dmul>
 80069e6:	4680      	mov	r8, r0
 80069e8:	4689      	mov	r9, r1
 80069ea:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80069ee:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80069f2:	9315      	str	r3, [sp, #84]	; 0x54
 80069f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80069f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80069fc:	e79d      	b.n	800693a <_strtod_l+0x9aa>
 80069fe:	f1ba 0f01 	cmp.w	sl, #1
 8006a02:	d102      	bne.n	8006a0a <_strtod_l+0xa7a>
 8006a04:	2f00      	cmp	r7, #0
 8006a06:	f43f ad83 	beq.w	8006510 <_strtod_l+0x580>
 8006a0a:	4b62      	ldr	r3, [pc, #392]	; (8006b94 <_strtod_l+0xc04>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	e78e      	b.n	800692e <_strtod_l+0x99e>
 8006a10:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006b90 <_strtod_l+0xc00>
 8006a14:	f04f 0800 	mov.w	r8, #0
 8006a18:	e7e7      	b.n	80069ea <_strtod_l+0xa5a>
 8006a1a:	4b5d      	ldr	r3, [pc, #372]	; (8006b90 <_strtod_l+0xc00>)
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	4649      	mov	r1, r9
 8006a20:	2200      	movs	r2, #0
 8006a22:	f7f9 fe09 	bl	8000638 <__aeabi_dmul>
 8006a26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a28:	4680      	mov	r8, r0
 8006a2a:	4689      	mov	r9, r1
 8006a2c:	b933      	cbnz	r3, 8006a3c <_strtod_l+0xaac>
 8006a2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a32:	900e      	str	r0, [sp, #56]	; 0x38
 8006a34:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006a3a:	e7dd      	b.n	80069f8 <_strtod_l+0xa68>
 8006a3c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006a40:	e7f9      	b.n	8006a36 <_strtod_l+0xaa6>
 8006a42:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006a46:	9b04      	ldr	r3, [sp, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1a8      	bne.n	800699e <_strtod_l+0xa0e>
 8006a4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a52:	0d1b      	lsrs	r3, r3, #20
 8006a54:	051b      	lsls	r3, r3, #20
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d1a1      	bne.n	800699e <_strtod_l+0xa0e>
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	4649      	mov	r1, r9
 8006a5e:	f7fa f94b 	bl	8000cf8 <__aeabi_d2lz>
 8006a62:	f7f9 fdbb 	bl	80005dc <__aeabi_l2d>
 8006a66:	4602      	mov	r2, r0
 8006a68:	460b      	mov	r3, r1
 8006a6a:	4640      	mov	r0, r8
 8006a6c:	4649      	mov	r1, r9
 8006a6e:	f7f9 fc2b 	bl	80002c8 <__aeabi_dsub>
 8006a72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a74:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a78:	ea43 030a 	orr.w	r3, r3, sl
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	4680      	mov	r8, r0
 8006a80:	4689      	mov	r9, r1
 8006a82:	d055      	beq.n	8006b30 <_strtod_l+0xba0>
 8006a84:	a336      	add	r3, pc, #216	; (adr r3, 8006b60 <_strtod_l+0xbd0>)
 8006a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8a:	f7fa f847 	bl	8000b1c <__aeabi_dcmplt>
 8006a8e:	2800      	cmp	r0, #0
 8006a90:	f47f acd0 	bne.w	8006434 <_strtod_l+0x4a4>
 8006a94:	a334      	add	r3, pc, #208	; (adr r3, 8006b68 <_strtod_l+0xbd8>)
 8006a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9a:	4640      	mov	r0, r8
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	f7fa f85b 	bl	8000b58 <__aeabi_dcmpgt>
 8006aa2:	2800      	cmp	r0, #0
 8006aa4:	f43f af7b 	beq.w	800699e <_strtod_l+0xa0e>
 8006aa8:	e4c4      	b.n	8006434 <_strtod_l+0x4a4>
 8006aaa:	9b04      	ldr	r3, [sp, #16]
 8006aac:	b333      	cbz	r3, 8006afc <_strtod_l+0xb6c>
 8006aae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ab0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006ab4:	d822      	bhi.n	8006afc <_strtod_l+0xb6c>
 8006ab6:	a32e      	add	r3, pc, #184	; (adr r3, 8006b70 <_strtod_l+0xbe0>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	4640      	mov	r0, r8
 8006abe:	4649      	mov	r1, r9
 8006ac0:	f7fa f836 	bl	8000b30 <__aeabi_dcmple>
 8006ac4:	b1a0      	cbz	r0, 8006af0 <_strtod_l+0xb60>
 8006ac6:	4649      	mov	r1, r9
 8006ac8:	4640      	mov	r0, r8
 8006aca:	f7fa f88d 	bl	8000be8 <__aeabi_d2uiz>
 8006ace:	2801      	cmp	r0, #1
 8006ad0:	bf38      	it	cc
 8006ad2:	2001      	movcc	r0, #1
 8006ad4:	f7f9 fd36 	bl	8000544 <__aeabi_ui2d>
 8006ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ada:	4680      	mov	r8, r0
 8006adc:	4689      	mov	r9, r1
 8006ade:	bb23      	cbnz	r3, 8006b2a <_strtod_l+0xb9a>
 8006ae0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ae4:	9010      	str	r0, [sp, #64]	; 0x40
 8006ae6:	9311      	str	r3, [sp, #68]	; 0x44
 8006ae8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006aec:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006af0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006af2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006af4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006af8:	1a9b      	subs	r3, r3, r2
 8006afa:	9309      	str	r3, [sp, #36]	; 0x24
 8006afc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b00:	eeb0 0a48 	vmov.f32	s0, s16
 8006b04:	eef0 0a68 	vmov.f32	s1, s17
 8006b08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006b0c:	f001 fe58 	bl	80087c0 <__ulp>
 8006b10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006b14:	ec53 2b10 	vmov	r2, r3, d0
 8006b18:	f7f9 fd8e 	bl	8000638 <__aeabi_dmul>
 8006b1c:	ec53 2b18 	vmov	r2, r3, d8
 8006b20:	f7f9 fbd4 	bl	80002cc <__adddf3>
 8006b24:	4682      	mov	sl, r0
 8006b26:	468b      	mov	fp, r1
 8006b28:	e78d      	b.n	8006a46 <_strtod_l+0xab6>
 8006b2a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006b2e:	e7db      	b.n	8006ae8 <_strtod_l+0xb58>
 8006b30:	a311      	add	r3, pc, #68	; (adr r3, 8006b78 <_strtod_l+0xbe8>)
 8006b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b36:	f7f9 fff1 	bl	8000b1c <__aeabi_dcmplt>
 8006b3a:	e7b2      	b.n	8006aa2 <_strtod_l+0xb12>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b40:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b42:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	f7ff ba6b 	b.w	8006020 <_strtod_l+0x90>
 8006b4a:	2a65      	cmp	r2, #101	; 0x65
 8006b4c:	f43f ab5f 	beq.w	800620e <_strtod_l+0x27e>
 8006b50:	2a45      	cmp	r2, #69	; 0x45
 8006b52:	f43f ab5c 	beq.w	800620e <_strtod_l+0x27e>
 8006b56:	2301      	movs	r3, #1
 8006b58:	f7ff bb94 	b.w	8006284 <_strtod_l+0x2f4>
 8006b5c:	f3af 8000 	nop.w
 8006b60:	94a03595 	.word	0x94a03595
 8006b64:	3fdfffff 	.word	0x3fdfffff
 8006b68:	35afe535 	.word	0x35afe535
 8006b6c:	3fe00000 	.word	0x3fe00000
 8006b70:	ffc00000 	.word	0xffc00000
 8006b74:	41dfffff 	.word	0x41dfffff
 8006b78:	94a03595 	.word	0x94a03595
 8006b7c:	3fcfffff 	.word	0x3fcfffff
 8006b80:	3ff00000 	.word	0x3ff00000
 8006b84:	7ff00000 	.word	0x7ff00000
 8006b88:	7fe00000 	.word	0x7fe00000
 8006b8c:	7c9fffff 	.word	0x7c9fffff
 8006b90:	3fe00000 	.word	0x3fe00000
 8006b94:	bff00000 	.word	0xbff00000
 8006b98:	7fefffff 	.word	0x7fefffff

08006b9c <_strtod_r>:
 8006b9c:	4b01      	ldr	r3, [pc, #4]	; (8006ba4 <_strtod_r+0x8>)
 8006b9e:	f7ff b9f7 	b.w	8005f90 <_strtod_l>
 8006ba2:	bf00      	nop
 8006ba4:	2000007c 	.word	0x2000007c

08006ba8 <_strtol_l.constprop.0>:
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bae:	d001      	beq.n	8006bb4 <_strtol_l.constprop.0+0xc>
 8006bb0:	2b24      	cmp	r3, #36	; 0x24
 8006bb2:	d906      	bls.n	8006bc2 <_strtol_l.constprop.0+0x1a>
 8006bb4:	f7fe fafe 	bl	80051b4 <__errno>
 8006bb8:	2316      	movs	r3, #22
 8006bba:	6003      	str	r3, [r0, #0]
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006ca8 <_strtol_l.constprop.0+0x100>
 8006bc6:	460d      	mov	r5, r1
 8006bc8:	462e      	mov	r6, r5
 8006bca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bce:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006bd2:	f017 0708 	ands.w	r7, r7, #8
 8006bd6:	d1f7      	bne.n	8006bc8 <_strtol_l.constprop.0+0x20>
 8006bd8:	2c2d      	cmp	r4, #45	; 0x2d
 8006bda:	d132      	bne.n	8006c42 <_strtol_l.constprop.0+0x9a>
 8006bdc:	782c      	ldrb	r4, [r5, #0]
 8006bde:	2701      	movs	r7, #1
 8006be0:	1cb5      	adds	r5, r6, #2
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d05b      	beq.n	8006c9e <_strtol_l.constprop.0+0xf6>
 8006be6:	2b10      	cmp	r3, #16
 8006be8:	d109      	bne.n	8006bfe <_strtol_l.constprop.0+0x56>
 8006bea:	2c30      	cmp	r4, #48	; 0x30
 8006bec:	d107      	bne.n	8006bfe <_strtol_l.constprop.0+0x56>
 8006bee:	782c      	ldrb	r4, [r5, #0]
 8006bf0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006bf4:	2c58      	cmp	r4, #88	; 0x58
 8006bf6:	d14d      	bne.n	8006c94 <_strtol_l.constprop.0+0xec>
 8006bf8:	786c      	ldrb	r4, [r5, #1]
 8006bfa:	2310      	movs	r3, #16
 8006bfc:	3502      	adds	r5, #2
 8006bfe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006c02:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c06:	f04f 0c00 	mov.w	ip, #0
 8006c0a:	fbb8 f9f3 	udiv	r9, r8, r3
 8006c0e:	4666      	mov	r6, ip
 8006c10:	fb03 8a19 	mls	sl, r3, r9, r8
 8006c14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006c18:	f1be 0f09 	cmp.w	lr, #9
 8006c1c:	d816      	bhi.n	8006c4c <_strtol_l.constprop.0+0xa4>
 8006c1e:	4674      	mov	r4, lr
 8006c20:	42a3      	cmp	r3, r4
 8006c22:	dd24      	ble.n	8006c6e <_strtol_l.constprop.0+0xc6>
 8006c24:	f1bc 0f00 	cmp.w	ip, #0
 8006c28:	db1e      	blt.n	8006c68 <_strtol_l.constprop.0+0xc0>
 8006c2a:	45b1      	cmp	r9, r6
 8006c2c:	d31c      	bcc.n	8006c68 <_strtol_l.constprop.0+0xc0>
 8006c2e:	d101      	bne.n	8006c34 <_strtol_l.constprop.0+0x8c>
 8006c30:	45a2      	cmp	sl, r4
 8006c32:	db19      	blt.n	8006c68 <_strtol_l.constprop.0+0xc0>
 8006c34:	fb06 4603 	mla	r6, r6, r3, r4
 8006c38:	f04f 0c01 	mov.w	ip, #1
 8006c3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c40:	e7e8      	b.n	8006c14 <_strtol_l.constprop.0+0x6c>
 8006c42:	2c2b      	cmp	r4, #43	; 0x2b
 8006c44:	bf04      	itt	eq
 8006c46:	782c      	ldrbeq	r4, [r5, #0]
 8006c48:	1cb5      	addeq	r5, r6, #2
 8006c4a:	e7ca      	b.n	8006be2 <_strtol_l.constprop.0+0x3a>
 8006c4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006c50:	f1be 0f19 	cmp.w	lr, #25
 8006c54:	d801      	bhi.n	8006c5a <_strtol_l.constprop.0+0xb2>
 8006c56:	3c37      	subs	r4, #55	; 0x37
 8006c58:	e7e2      	b.n	8006c20 <_strtol_l.constprop.0+0x78>
 8006c5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006c5e:	f1be 0f19 	cmp.w	lr, #25
 8006c62:	d804      	bhi.n	8006c6e <_strtol_l.constprop.0+0xc6>
 8006c64:	3c57      	subs	r4, #87	; 0x57
 8006c66:	e7db      	b.n	8006c20 <_strtol_l.constprop.0+0x78>
 8006c68:	f04f 3cff 	mov.w	ip, #4294967295
 8006c6c:	e7e6      	b.n	8006c3c <_strtol_l.constprop.0+0x94>
 8006c6e:	f1bc 0f00 	cmp.w	ip, #0
 8006c72:	da05      	bge.n	8006c80 <_strtol_l.constprop.0+0xd8>
 8006c74:	2322      	movs	r3, #34	; 0x22
 8006c76:	6003      	str	r3, [r0, #0]
 8006c78:	4646      	mov	r6, r8
 8006c7a:	b942      	cbnz	r2, 8006c8e <_strtol_l.constprop.0+0xe6>
 8006c7c:	4630      	mov	r0, r6
 8006c7e:	e79e      	b.n	8006bbe <_strtol_l.constprop.0+0x16>
 8006c80:	b107      	cbz	r7, 8006c84 <_strtol_l.constprop.0+0xdc>
 8006c82:	4276      	negs	r6, r6
 8006c84:	2a00      	cmp	r2, #0
 8006c86:	d0f9      	beq.n	8006c7c <_strtol_l.constprop.0+0xd4>
 8006c88:	f1bc 0f00 	cmp.w	ip, #0
 8006c8c:	d000      	beq.n	8006c90 <_strtol_l.constprop.0+0xe8>
 8006c8e:	1e69      	subs	r1, r5, #1
 8006c90:	6011      	str	r1, [r2, #0]
 8006c92:	e7f3      	b.n	8006c7c <_strtol_l.constprop.0+0xd4>
 8006c94:	2430      	movs	r4, #48	; 0x30
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d1b1      	bne.n	8006bfe <_strtol_l.constprop.0+0x56>
 8006c9a:	2308      	movs	r3, #8
 8006c9c:	e7af      	b.n	8006bfe <_strtol_l.constprop.0+0x56>
 8006c9e:	2c30      	cmp	r4, #48	; 0x30
 8006ca0:	d0a5      	beq.n	8006bee <_strtol_l.constprop.0+0x46>
 8006ca2:	230a      	movs	r3, #10
 8006ca4:	e7ab      	b.n	8006bfe <_strtol_l.constprop.0+0x56>
 8006ca6:	bf00      	nop
 8006ca8:	08009bc1 	.word	0x08009bc1

08006cac <_strtol_r>:
 8006cac:	f7ff bf7c 	b.w	8006ba8 <_strtol_l.constprop.0>

08006cb0 <quorem>:
 8006cb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb4:	6903      	ldr	r3, [r0, #16]
 8006cb6:	690c      	ldr	r4, [r1, #16]
 8006cb8:	42a3      	cmp	r3, r4
 8006cba:	4607      	mov	r7, r0
 8006cbc:	f2c0 8081 	blt.w	8006dc2 <quorem+0x112>
 8006cc0:	3c01      	subs	r4, #1
 8006cc2:	f101 0814 	add.w	r8, r1, #20
 8006cc6:	f100 0514 	add.w	r5, r0, #20
 8006cca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cce:	9301      	str	r3, [sp, #4]
 8006cd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ce0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ce4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ce8:	d331      	bcc.n	8006d4e <quorem+0x9e>
 8006cea:	f04f 0e00 	mov.w	lr, #0
 8006cee:	4640      	mov	r0, r8
 8006cf0:	46ac      	mov	ip, r5
 8006cf2:	46f2      	mov	sl, lr
 8006cf4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cf8:	b293      	uxth	r3, r2
 8006cfa:	fb06 e303 	mla	r3, r6, r3, lr
 8006cfe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	ebaa 0303 	sub.w	r3, sl, r3
 8006d08:	f8dc a000 	ldr.w	sl, [ip]
 8006d0c:	0c12      	lsrs	r2, r2, #16
 8006d0e:	fa13 f38a 	uxtah	r3, r3, sl
 8006d12:	fb06 e202 	mla	r2, r6, r2, lr
 8006d16:	9300      	str	r3, [sp, #0]
 8006d18:	9b00      	ldr	r3, [sp, #0]
 8006d1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006d1e:	b292      	uxth	r2, r2
 8006d20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d28:	f8bd 3000 	ldrh.w	r3, [sp]
 8006d2c:	4581      	cmp	r9, r0
 8006d2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d32:	f84c 3b04 	str.w	r3, [ip], #4
 8006d36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d3a:	d2db      	bcs.n	8006cf4 <quorem+0x44>
 8006d3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d40:	b92b      	cbnz	r3, 8006d4e <quorem+0x9e>
 8006d42:	9b01      	ldr	r3, [sp, #4]
 8006d44:	3b04      	subs	r3, #4
 8006d46:	429d      	cmp	r5, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	d32e      	bcc.n	8006daa <quorem+0xfa>
 8006d4c:	613c      	str	r4, [r7, #16]
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f001 fc90 	bl	8008674 <__mcmp>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	db24      	blt.n	8006da2 <quorem+0xf2>
 8006d58:	3601      	adds	r6, #1
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f04f 0c00 	mov.w	ip, #0
 8006d60:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d64:	f8d0 e000 	ldr.w	lr, [r0]
 8006d68:	b293      	uxth	r3, r2
 8006d6a:	ebac 0303 	sub.w	r3, ip, r3
 8006d6e:	0c12      	lsrs	r2, r2, #16
 8006d70:	fa13 f38e 	uxtah	r3, r3, lr
 8006d74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d82:	45c1      	cmp	r9, r8
 8006d84:	f840 3b04 	str.w	r3, [r0], #4
 8006d88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d8c:	d2e8      	bcs.n	8006d60 <quorem+0xb0>
 8006d8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d96:	b922      	cbnz	r2, 8006da2 <quorem+0xf2>
 8006d98:	3b04      	subs	r3, #4
 8006d9a:	429d      	cmp	r5, r3
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	d30a      	bcc.n	8006db6 <quorem+0x106>
 8006da0:	613c      	str	r4, [r7, #16]
 8006da2:	4630      	mov	r0, r6
 8006da4:	b003      	add	sp, #12
 8006da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	3b04      	subs	r3, #4
 8006dae:	2a00      	cmp	r2, #0
 8006db0:	d1cc      	bne.n	8006d4c <quorem+0x9c>
 8006db2:	3c01      	subs	r4, #1
 8006db4:	e7c7      	b.n	8006d46 <quorem+0x96>
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	3b04      	subs	r3, #4
 8006dba:	2a00      	cmp	r2, #0
 8006dbc:	d1f0      	bne.n	8006da0 <quorem+0xf0>
 8006dbe:	3c01      	subs	r4, #1
 8006dc0:	e7eb      	b.n	8006d9a <quorem+0xea>
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	e7ee      	b.n	8006da4 <quorem+0xf4>
	...

08006dc8 <_dtoa_r>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	ed2d 8b04 	vpush	{d8-d9}
 8006dd0:	ec57 6b10 	vmov	r6, r7, d0
 8006dd4:	b093      	sub	sp, #76	; 0x4c
 8006dd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006dd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006ddc:	9106      	str	r1, [sp, #24]
 8006dde:	ee10 aa10 	vmov	sl, s0
 8006de2:	4604      	mov	r4, r0
 8006de4:	9209      	str	r2, [sp, #36]	; 0x24
 8006de6:	930c      	str	r3, [sp, #48]	; 0x30
 8006de8:	46bb      	mov	fp, r7
 8006dea:	b975      	cbnz	r5, 8006e0a <_dtoa_r+0x42>
 8006dec:	2010      	movs	r0, #16
 8006dee:	f001 f94d 	bl	800808c <malloc>
 8006df2:	4602      	mov	r2, r0
 8006df4:	6260      	str	r0, [r4, #36]	; 0x24
 8006df6:	b920      	cbnz	r0, 8006e02 <_dtoa_r+0x3a>
 8006df8:	4ba7      	ldr	r3, [pc, #668]	; (8007098 <_dtoa_r+0x2d0>)
 8006dfa:	21ea      	movs	r1, #234	; 0xea
 8006dfc:	48a7      	ldr	r0, [pc, #668]	; (800709c <_dtoa_r+0x2d4>)
 8006dfe:	f002 f8bd 	bl	8008f7c <__assert_func>
 8006e02:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006e06:	6005      	str	r5, [r0, #0]
 8006e08:	60c5      	str	r5, [r0, #12]
 8006e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e0c:	6819      	ldr	r1, [r3, #0]
 8006e0e:	b151      	cbz	r1, 8006e26 <_dtoa_r+0x5e>
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	604a      	str	r2, [r1, #4]
 8006e14:	2301      	movs	r3, #1
 8006e16:	4093      	lsls	r3, r2
 8006e18:	608b      	str	r3, [r1, #8]
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f001 f99e 	bl	800815c <_Bfree>
 8006e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	1e3b      	subs	r3, r7, #0
 8006e28:	bfaa      	itet	ge
 8006e2a:	2300      	movge	r3, #0
 8006e2c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006e30:	f8c8 3000 	strge.w	r3, [r8]
 8006e34:	4b9a      	ldr	r3, [pc, #616]	; (80070a0 <_dtoa_r+0x2d8>)
 8006e36:	bfbc      	itt	lt
 8006e38:	2201      	movlt	r2, #1
 8006e3a:	f8c8 2000 	strlt.w	r2, [r8]
 8006e3e:	ea33 030b 	bics.w	r3, r3, fp
 8006e42:	d11b      	bne.n	8006e7c <_dtoa_r+0xb4>
 8006e44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e46:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e50:	4333      	orrs	r3, r6
 8006e52:	f000 8592 	beq.w	800797a <_dtoa_r+0xbb2>
 8006e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e58:	b963      	cbnz	r3, 8006e74 <_dtoa_r+0xac>
 8006e5a:	4b92      	ldr	r3, [pc, #584]	; (80070a4 <_dtoa_r+0x2dc>)
 8006e5c:	e022      	b.n	8006ea4 <_dtoa_r+0xdc>
 8006e5e:	4b92      	ldr	r3, [pc, #584]	; (80070a8 <_dtoa_r+0x2e0>)
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	3308      	adds	r3, #8
 8006e64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	9801      	ldr	r0, [sp, #4]
 8006e6a:	b013      	add	sp, #76	; 0x4c
 8006e6c:	ecbd 8b04 	vpop	{d8-d9}
 8006e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e74:	4b8b      	ldr	r3, [pc, #556]	; (80070a4 <_dtoa_r+0x2dc>)
 8006e76:	9301      	str	r3, [sp, #4]
 8006e78:	3303      	adds	r3, #3
 8006e7a:	e7f3      	b.n	8006e64 <_dtoa_r+0x9c>
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	2300      	movs	r3, #0
 8006e80:	4650      	mov	r0, sl
 8006e82:	4659      	mov	r1, fp
 8006e84:	f7f9 fe40 	bl	8000b08 <__aeabi_dcmpeq>
 8006e88:	ec4b ab19 	vmov	d9, sl, fp
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	b158      	cbz	r0, 8006ea8 <_dtoa_r+0xe0>
 8006e90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e92:	2301      	movs	r3, #1
 8006e94:	6013      	str	r3, [r2, #0]
 8006e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 856b 	beq.w	8007974 <_dtoa_r+0xbac>
 8006e9e:	4883      	ldr	r0, [pc, #524]	; (80070ac <_dtoa_r+0x2e4>)
 8006ea0:	6018      	str	r0, [r3, #0]
 8006ea2:	1e43      	subs	r3, r0, #1
 8006ea4:	9301      	str	r3, [sp, #4]
 8006ea6:	e7df      	b.n	8006e68 <_dtoa_r+0xa0>
 8006ea8:	ec4b ab10 	vmov	d0, sl, fp
 8006eac:	aa10      	add	r2, sp, #64	; 0x40
 8006eae:	a911      	add	r1, sp, #68	; 0x44
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f001 fd01 	bl	80088b8 <__d2b>
 8006eb6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006eba:	ee08 0a10 	vmov	s16, r0
 8006ebe:	2d00      	cmp	r5, #0
 8006ec0:	f000 8084 	beq.w	8006fcc <_dtoa_r+0x204>
 8006ec4:	ee19 3a90 	vmov	r3, s19
 8006ec8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ecc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006ed0:	4656      	mov	r6, sl
 8006ed2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006ed6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006eda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006ede:	4b74      	ldr	r3, [pc, #464]	; (80070b0 <_dtoa_r+0x2e8>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	4630      	mov	r0, r6
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	f7f9 f9ef 	bl	80002c8 <__aeabi_dsub>
 8006eea:	a365      	add	r3, pc, #404	; (adr r3, 8007080 <_dtoa_r+0x2b8>)
 8006eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ef0:	f7f9 fba2 	bl	8000638 <__aeabi_dmul>
 8006ef4:	a364      	add	r3, pc, #400	; (adr r3, 8007088 <_dtoa_r+0x2c0>)
 8006ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006efa:	f7f9 f9e7 	bl	80002cc <__adddf3>
 8006efe:	4606      	mov	r6, r0
 8006f00:	4628      	mov	r0, r5
 8006f02:	460f      	mov	r7, r1
 8006f04:	f7f9 fb2e 	bl	8000564 <__aeabi_i2d>
 8006f08:	a361      	add	r3, pc, #388	; (adr r3, 8007090 <_dtoa_r+0x2c8>)
 8006f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0e:	f7f9 fb93 	bl	8000638 <__aeabi_dmul>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	4630      	mov	r0, r6
 8006f18:	4639      	mov	r1, r7
 8006f1a:	f7f9 f9d7 	bl	80002cc <__adddf3>
 8006f1e:	4606      	mov	r6, r0
 8006f20:	460f      	mov	r7, r1
 8006f22:	f7f9 fe39 	bl	8000b98 <__aeabi_d2iz>
 8006f26:	2200      	movs	r2, #0
 8006f28:	9000      	str	r0, [sp, #0]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	4639      	mov	r1, r7
 8006f30:	f7f9 fdf4 	bl	8000b1c <__aeabi_dcmplt>
 8006f34:	b150      	cbz	r0, 8006f4c <_dtoa_r+0x184>
 8006f36:	9800      	ldr	r0, [sp, #0]
 8006f38:	f7f9 fb14 	bl	8000564 <__aeabi_i2d>
 8006f3c:	4632      	mov	r2, r6
 8006f3e:	463b      	mov	r3, r7
 8006f40:	f7f9 fde2 	bl	8000b08 <__aeabi_dcmpeq>
 8006f44:	b910      	cbnz	r0, 8006f4c <_dtoa_r+0x184>
 8006f46:	9b00      	ldr	r3, [sp, #0]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	9300      	str	r3, [sp, #0]
 8006f4c:	9b00      	ldr	r3, [sp, #0]
 8006f4e:	2b16      	cmp	r3, #22
 8006f50:	d85a      	bhi.n	8007008 <_dtoa_r+0x240>
 8006f52:	9a00      	ldr	r2, [sp, #0]
 8006f54:	4b57      	ldr	r3, [pc, #348]	; (80070b4 <_dtoa_r+0x2ec>)
 8006f56:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	ec51 0b19 	vmov	r0, r1, d9
 8006f62:	f7f9 fddb 	bl	8000b1c <__aeabi_dcmplt>
 8006f66:	2800      	cmp	r0, #0
 8006f68:	d050      	beq.n	800700c <_dtoa_r+0x244>
 8006f6a:	9b00      	ldr	r3, [sp, #0]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	2300      	movs	r3, #0
 8006f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f76:	1b5d      	subs	r5, r3, r5
 8006f78:	1e6b      	subs	r3, r5, #1
 8006f7a:	9305      	str	r3, [sp, #20]
 8006f7c:	bf45      	ittet	mi
 8006f7e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006f82:	9304      	strmi	r3, [sp, #16]
 8006f84:	2300      	movpl	r3, #0
 8006f86:	2300      	movmi	r3, #0
 8006f88:	bf4c      	ite	mi
 8006f8a:	9305      	strmi	r3, [sp, #20]
 8006f8c:	9304      	strpl	r3, [sp, #16]
 8006f8e:	9b00      	ldr	r3, [sp, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	db3d      	blt.n	8007010 <_dtoa_r+0x248>
 8006f94:	9b05      	ldr	r3, [sp, #20]
 8006f96:	9a00      	ldr	r2, [sp, #0]
 8006f98:	920a      	str	r2, [sp, #40]	; 0x28
 8006f9a:	4413      	add	r3, r2
 8006f9c:	9305      	str	r3, [sp, #20]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	9307      	str	r3, [sp, #28]
 8006fa2:	9b06      	ldr	r3, [sp, #24]
 8006fa4:	2b09      	cmp	r3, #9
 8006fa6:	f200 8089 	bhi.w	80070bc <_dtoa_r+0x2f4>
 8006faa:	2b05      	cmp	r3, #5
 8006fac:	bfc4      	itt	gt
 8006fae:	3b04      	subgt	r3, #4
 8006fb0:	9306      	strgt	r3, [sp, #24]
 8006fb2:	9b06      	ldr	r3, [sp, #24]
 8006fb4:	f1a3 0302 	sub.w	r3, r3, #2
 8006fb8:	bfcc      	ite	gt
 8006fba:	2500      	movgt	r5, #0
 8006fbc:	2501      	movle	r5, #1
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	f200 8087 	bhi.w	80070d2 <_dtoa_r+0x30a>
 8006fc4:	e8df f003 	tbb	[pc, r3]
 8006fc8:	59383a2d 	.word	0x59383a2d
 8006fcc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006fd0:	441d      	add	r5, r3
 8006fd2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006fd6:	2b20      	cmp	r3, #32
 8006fd8:	bfc1      	itttt	gt
 8006fda:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006fde:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006fe2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006fe6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006fea:	bfda      	itte	le
 8006fec:	f1c3 0320 	rsble	r3, r3, #32
 8006ff0:	fa06 f003 	lslle.w	r0, r6, r3
 8006ff4:	4318      	orrgt	r0, r3
 8006ff6:	f7f9 faa5 	bl	8000544 <__aeabi_ui2d>
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	4606      	mov	r6, r0
 8006ffe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007002:	3d01      	subs	r5, #1
 8007004:	930e      	str	r3, [sp, #56]	; 0x38
 8007006:	e76a      	b.n	8006ede <_dtoa_r+0x116>
 8007008:	2301      	movs	r3, #1
 800700a:	e7b2      	b.n	8006f72 <_dtoa_r+0x1aa>
 800700c:	900b      	str	r0, [sp, #44]	; 0x2c
 800700e:	e7b1      	b.n	8006f74 <_dtoa_r+0x1ac>
 8007010:	9b04      	ldr	r3, [sp, #16]
 8007012:	9a00      	ldr	r2, [sp, #0]
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	4253      	negs	r3, r2
 800701a:	9307      	str	r3, [sp, #28]
 800701c:	2300      	movs	r3, #0
 800701e:	930a      	str	r3, [sp, #40]	; 0x28
 8007020:	e7bf      	b.n	8006fa2 <_dtoa_r+0x1da>
 8007022:	2300      	movs	r3, #0
 8007024:	9308      	str	r3, [sp, #32]
 8007026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007028:	2b00      	cmp	r3, #0
 800702a:	dc55      	bgt.n	80070d8 <_dtoa_r+0x310>
 800702c:	2301      	movs	r3, #1
 800702e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007032:	461a      	mov	r2, r3
 8007034:	9209      	str	r2, [sp, #36]	; 0x24
 8007036:	e00c      	b.n	8007052 <_dtoa_r+0x28a>
 8007038:	2301      	movs	r3, #1
 800703a:	e7f3      	b.n	8007024 <_dtoa_r+0x25c>
 800703c:	2300      	movs	r3, #0
 800703e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007040:	9308      	str	r3, [sp, #32]
 8007042:	9b00      	ldr	r3, [sp, #0]
 8007044:	4413      	add	r3, r2
 8007046:	9302      	str	r3, [sp, #8]
 8007048:	3301      	adds	r3, #1
 800704a:	2b01      	cmp	r3, #1
 800704c:	9303      	str	r3, [sp, #12]
 800704e:	bfb8      	it	lt
 8007050:	2301      	movlt	r3, #1
 8007052:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007054:	2200      	movs	r2, #0
 8007056:	6042      	str	r2, [r0, #4]
 8007058:	2204      	movs	r2, #4
 800705a:	f102 0614 	add.w	r6, r2, #20
 800705e:	429e      	cmp	r6, r3
 8007060:	6841      	ldr	r1, [r0, #4]
 8007062:	d93d      	bls.n	80070e0 <_dtoa_r+0x318>
 8007064:	4620      	mov	r0, r4
 8007066:	f001 f839 	bl	80080dc <_Balloc>
 800706a:	9001      	str	r0, [sp, #4]
 800706c:	2800      	cmp	r0, #0
 800706e:	d13b      	bne.n	80070e8 <_dtoa_r+0x320>
 8007070:	4b11      	ldr	r3, [pc, #68]	; (80070b8 <_dtoa_r+0x2f0>)
 8007072:	4602      	mov	r2, r0
 8007074:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007078:	e6c0      	b.n	8006dfc <_dtoa_r+0x34>
 800707a:	2301      	movs	r3, #1
 800707c:	e7df      	b.n	800703e <_dtoa_r+0x276>
 800707e:	bf00      	nop
 8007080:	636f4361 	.word	0x636f4361
 8007084:	3fd287a7 	.word	0x3fd287a7
 8007088:	8b60c8b3 	.word	0x8b60c8b3
 800708c:	3fc68a28 	.word	0x3fc68a28
 8007090:	509f79fb 	.word	0x509f79fb
 8007094:	3fd34413 	.word	0x3fd34413
 8007098:	08009cce 	.word	0x08009cce
 800709c:	08009ce5 	.word	0x08009ce5
 80070a0:	7ff00000 	.word	0x7ff00000
 80070a4:	08009cca 	.word	0x08009cca
 80070a8:	08009cc1 	.word	0x08009cc1
 80070ac:	08009b45 	.word	0x08009b45
 80070b0:	3ff80000 	.word	0x3ff80000
 80070b4:	08009e50 	.word	0x08009e50
 80070b8:	08009d40 	.word	0x08009d40
 80070bc:	2501      	movs	r5, #1
 80070be:	2300      	movs	r3, #0
 80070c0:	9306      	str	r3, [sp, #24]
 80070c2:	9508      	str	r5, [sp, #32]
 80070c4:	f04f 33ff 	mov.w	r3, #4294967295
 80070c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070cc:	2200      	movs	r2, #0
 80070ce:	2312      	movs	r3, #18
 80070d0:	e7b0      	b.n	8007034 <_dtoa_r+0x26c>
 80070d2:	2301      	movs	r3, #1
 80070d4:	9308      	str	r3, [sp, #32]
 80070d6:	e7f5      	b.n	80070c4 <_dtoa_r+0x2fc>
 80070d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070de:	e7b8      	b.n	8007052 <_dtoa_r+0x28a>
 80070e0:	3101      	adds	r1, #1
 80070e2:	6041      	str	r1, [r0, #4]
 80070e4:	0052      	lsls	r2, r2, #1
 80070e6:	e7b8      	b.n	800705a <_dtoa_r+0x292>
 80070e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070ea:	9a01      	ldr	r2, [sp, #4]
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	9b03      	ldr	r3, [sp, #12]
 80070f0:	2b0e      	cmp	r3, #14
 80070f2:	f200 809d 	bhi.w	8007230 <_dtoa_r+0x468>
 80070f6:	2d00      	cmp	r5, #0
 80070f8:	f000 809a 	beq.w	8007230 <_dtoa_r+0x468>
 80070fc:	9b00      	ldr	r3, [sp, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	dd32      	ble.n	8007168 <_dtoa_r+0x3a0>
 8007102:	4ab7      	ldr	r2, [pc, #732]	; (80073e0 <_dtoa_r+0x618>)
 8007104:	f003 030f 	and.w	r3, r3, #15
 8007108:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800710c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007110:	9b00      	ldr	r3, [sp, #0]
 8007112:	05d8      	lsls	r0, r3, #23
 8007114:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007118:	d516      	bpl.n	8007148 <_dtoa_r+0x380>
 800711a:	4bb2      	ldr	r3, [pc, #712]	; (80073e4 <_dtoa_r+0x61c>)
 800711c:	ec51 0b19 	vmov	r0, r1, d9
 8007120:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007124:	f7f9 fbb2 	bl	800088c <__aeabi_ddiv>
 8007128:	f007 070f 	and.w	r7, r7, #15
 800712c:	4682      	mov	sl, r0
 800712e:	468b      	mov	fp, r1
 8007130:	2503      	movs	r5, #3
 8007132:	4eac      	ldr	r6, [pc, #688]	; (80073e4 <_dtoa_r+0x61c>)
 8007134:	b957      	cbnz	r7, 800714c <_dtoa_r+0x384>
 8007136:	4642      	mov	r2, r8
 8007138:	464b      	mov	r3, r9
 800713a:	4650      	mov	r0, sl
 800713c:	4659      	mov	r1, fp
 800713e:	f7f9 fba5 	bl	800088c <__aeabi_ddiv>
 8007142:	4682      	mov	sl, r0
 8007144:	468b      	mov	fp, r1
 8007146:	e028      	b.n	800719a <_dtoa_r+0x3d2>
 8007148:	2502      	movs	r5, #2
 800714a:	e7f2      	b.n	8007132 <_dtoa_r+0x36a>
 800714c:	07f9      	lsls	r1, r7, #31
 800714e:	d508      	bpl.n	8007162 <_dtoa_r+0x39a>
 8007150:	4640      	mov	r0, r8
 8007152:	4649      	mov	r1, r9
 8007154:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007158:	f7f9 fa6e 	bl	8000638 <__aeabi_dmul>
 800715c:	3501      	adds	r5, #1
 800715e:	4680      	mov	r8, r0
 8007160:	4689      	mov	r9, r1
 8007162:	107f      	asrs	r7, r7, #1
 8007164:	3608      	adds	r6, #8
 8007166:	e7e5      	b.n	8007134 <_dtoa_r+0x36c>
 8007168:	f000 809b 	beq.w	80072a2 <_dtoa_r+0x4da>
 800716c:	9b00      	ldr	r3, [sp, #0]
 800716e:	4f9d      	ldr	r7, [pc, #628]	; (80073e4 <_dtoa_r+0x61c>)
 8007170:	425e      	negs	r6, r3
 8007172:	4b9b      	ldr	r3, [pc, #620]	; (80073e0 <_dtoa_r+0x618>)
 8007174:	f006 020f 	and.w	r2, r6, #15
 8007178:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	ec51 0b19 	vmov	r0, r1, d9
 8007184:	f7f9 fa58 	bl	8000638 <__aeabi_dmul>
 8007188:	1136      	asrs	r6, r6, #4
 800718a:	4682      	mov	sl, r0
 800718c:	468b      	mov	fp, r1
 800718e:	2300      	movs	r3, #0
 8007190:	2502      	movs	r5, #2
 8007192:	2e00      	cmp	r6, #0
 8007194:	d17a      	bne.n	800728c <_dtoa_r+0x4c4>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1d3      	bne.n	8007142 <_dtoa_r+0x37a>
 800719a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8082 	beq.w	80072a6 <_dtoa_r+0x4de>
 80071a2:	4b91      	ldr	r3, [pc, #580]	; (80073e8 <_dtoa_r+0x620>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	4650      	mov	r0, sl
 80071a8:	4659      	mov	r1, fp
 80071aa:	f7f9 fcb7 	bl	8000b1c <__aeabi_dcmplt>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d079      	beq.n	80072a6 <_dtoa_r+0x4de>
 80071b2:	9b03      	ldr	r3, [sp, #12]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d076      	beq.n	80072a6 <_dtoa_r+0x4de>
 80071b8:	9b02      	ldr	r3, [sp, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	dd36      	ble.n	800722c <_dtoa_r+0x464>
 80071be:	9b00      	ldr	r3, [sp, #0]
 80071c0:	4650      	mov	r0, sl
 80071c2:	4659      	mov	r1, fp
 80071c4:	1e5f      	subs	r7, r3, #1
 80071c6:	2200      	movs	r2, #0
 80071c8:	4b88      	ldr	r3, [pc, #544]	; (80073ec <_dtoa_r+0x624>)
 80071ca:	f7f9 fa35 	bl	8000638 <__aeabi_dmul>
 80071ce:	9e02      	ldr	r6, [sp, #8]
 80071d0:	4682      	mov	sl, r0
 80071d2:	468b      	mov	fp, r1
 80071d4:	3501      	adds	r5, #1
 80071d6:	4628      	mov	r0, r5
 80071d8:	f7f9 f9c4 	bl	8000564 <__aeabi_i2d>
 80071dc:	4652      	mov	r2, sl
 80071de:	465b      	mov	r3, fp
 80071e0:	f7f9 fa2a 	bl	8000638 <__aeabi_dmul>
 80071e4:	4b82      	ldr	r3, [pc, #520]	; (80073f0 <_dtoa_r+0x628>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	f7f9 f870 	bl	80002cc <__adddf3>
 80071ec:	46d0      	mov	r8, sl
 80071ee:	46d9      	mov	r9, fp
 80071f0:	4682      	mov	sl, r0
 80071f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80071f6:	2e00      	cmp	r6, #0
 80071f8:	d158      	bne.n	80072ac <_dtoa_r+0x4e4>
 80071fa:	4b7e      	ldr	r3, [pc, #504]	; (80073f4 <_dtoa_r+0x62c>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	4640      	mov	r0, r8
 8007200:	4649      	mov	r1, r9
 8007202:	f7f9 f861 	bl	80002c8 <__aeabi_dsub>
 8007206:	4652      	mov	r2, sl
 8007208:	465b      	mov	r3, fp
 800720a:	4680      	mov	r8, r0
 800720c:	4689      	mov	r9, r1
 800720e:	f7f9 fca3 	bl	8000b58 <__aeabi_dcmpgt>
 8007212:	2800      	cmp	r0, #0
 8007214:	f040 8295 	bne.w	8007742 <_dtoa_r+0x97a>
 8007218:	4652      	mov	r2, sl
 800721a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800721e:	4640      	mov	r0, r8
 8007220:	4649      	mov	r1, r9
 8007222:	f7f9 fc7b 	bl	8000b1c <__aeabi_dcmplt>
 8007226:	2800      	cmp	r0, #0
 8007228:	f040 8289 	bne.w	800773e <_dtoa_r+0x976>
 800722c:	ec5b ab19 	vmov	sl, fp, d9
 8007230:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007232:	2b00      	cmp	r3, #0
 8007234:	f2c0 8148 	blt.w	80074c8 <_dtoa_r+0x700>
 8007238:	9a00      	ldr	r2, [sp, #0]
 800723a:	2a0e      	cmp	r2, #14
 800723c:	f300 8144 	bgt.w	80074c8 <_dtoa_r+0x700>
 8007240:	4b67      	ldr	r3, [pc, #412]	; (80073e0 <_dtoa_r+0x618>)
 8007242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007246:	e9d3 8900 	ldrd	r8, r9, [r3]
 800724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724c:	2b00      	cmp	r3, #0
 800724e:	f280 80d5 	bge.w	80073fc <_dtoa_r+0x634>
 8007252:	9b03      	ldr	r3, [sp, #12]
 8007254:	2b00      	cmp	r3, #0
 8007256:	f300 80d1 	bgt.w	80073fc <_dtoa_r+0x634>
 800725a:	f040 826f 	bne.w	800773c <_dtoa_r+0x974>
 800725e:	4b65      	ldr	r3, [pc, #404]	; (80073f4 <_dtoa_r+0x62c>)
 8007260:	2200      	movs	r2, #0
 8007262:	4640      	mov	r0, r8
 8007264:	4649      	mov	r1, r9
 8007266:	f7f9 f9e7 	bl	8000638 <__aeabi_dmul>
 800726a:	4652      	mov	r2, sl
 800726c:	465b      	mov	r3, fp
 800726e:	f7f9 fc69 	bl	8000b44 <__aeabi_dcmpge>
 8007272:	9e03      	ldr	r6, [sp, #12]
 8007274:	4637      	mov	r7, r6
 8007276:	2800      	cmp	r0, #0
 8007278:	f040 8245 	bne.w	8007706 <_dtoa_r+0x93e>
 800727c:	9d01      	ldr	r5, [sp, #4]
 800727e:	2331      	movs	r3, #49	; 0x31
 8007280:	f805 3b01 	strb.w	r3, [r5], #1
 8007284:	9b00      	ldr	r3, [sp, #0]
 8007286:	3301      	adds	r3, #1
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	e240      	b.n	800770e <_dtoa_r+0x946>
 800728c:	07f2      	lsls	r2, r6, #31
 800728e:	d505      	bpl.n	800729c <_dtoa_r+0x4d4>
 8007290:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007294:	f7f9 f9d0 	bl	8000638 <__aeabi_dmul>
 8007298:	3501      	adds	r5, #1
 800729a:	2301      	movs	r3, #1
 800729c:	1076      	asrs	r6, r6, #1
 800729e:	3708      	adds	r7, #8
 80072a0:	e777      	b.n	8007192 <_dtoa_r+0x3ca>
 80072a2:	2502      	movs	r5, #2
 80072a4:	e779      	b.n	800719a <_dtoa_r+0x3d2>
 80072a6:	9f00      	ldr	r7, [sp, #0]
 80072a8:	9e03      	ldr	r6, [sp, #12]
 80072aa:	e794      	b.n	80071d6 <_dtoa_r+0x40e>
 80072ac:	9901      	ldr	r1, [sp, #4]
 80072ae:	4b4c      	ldr	r3, [pc, #304]	; (80073e0 <_dtoa_r+0x618>)
 80072b0:	4431      	add	r1, r6
 80072b2:	910d      	str	r1, [sp, #52]	; 0x34
 80072b4:	9908      	ldr	r1, [sp, #32]
 80072b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80072ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072be:	2900      	cmp	r1, #0
 80072c0:	d043      	beq.n	800734a <_dtoa_r+0x582>
 80072c2:	494d      	ldr	r1, [pc, #308]	; (80073f8 <_dtoa_r+0x630>)
 80072c4:	2000      	movs	r0, #0
 80072c6:	f7f9 fae1 	bl	800088c <__aeabi_ddiv>
 80072ca:	4652      	mov	r2, sl
 80072cc:	465b      	mov	r3, fp
 80072ce:	f7f8 fffb 	bl	80002c8 <__aeabi_dsub>
 80072d2:	9d01      	ldr	r5, [sp, #4]
 80072d4:	4682      	mov	sl, r0
 80072d6:	468b      	mov	fp, r1
 80072d8:	4649      	mov	r1, r9
 80072da:	4640      	mov	r0, r8
 80072dc:	f7f9 fc5c 	bl	8000b98 <__aeabi_d2iz>
 80072e0:	4606      	mov	r6, r0
 80072e2:	f7f9 f93f 	bl	8000564 <__aeabi_i2d>
 80072e6:	4602      	mov	r2, r0
 80072e8:	460b      	mov	r3, r1
 80072ea:	4640      	mov	r0, r8
 80072ec:	4649      	mov	r1, r9
 80072ee:	f7f8 ffeb 	bl	80002c8 <__aeabi_dsub>
 80072f2:	3630      	adds	r6, #48	; 0x30
 80072f4:	f805 6b01 	strb.w	r6, [r5], #1
 80072f8:	4652      	mov	r2, sl
 80072fa:	465b      	mov	r3, fp
 80072fc:	4680      	mov	r8, r0
 80072fe:	4689      	mov	r9, r1
 8007300:	f7f9 fc0c 	bl	8000b1c <__aeabi_dcmplt>
 8007304:	2800      	cmp	r0, #0
 8007306:	d163      	bne.n	80073d0 <_dtoa_r+0x608>
 8007308:	4642      	mov	r2, r8
 800730a:	464b      	mov	r3, r9
 800730c:	4936      	ldr	r1, [pc, #216]	; (80073e8 <_dtoa_r+0x620>)
 800730e:	2000      	movs	r0, #0
 8007310:	f7f8 ffda 	bl	80002c8 <__aeabi_dsub>
 8007314:	4652      	mov	r2, sl
 8007316:	465b      	mov	r3, fp
 8007318:	f7f9 fc00 	bl	8000b1c <__aeabi_dcmplt>
 800731c:	2800      	cmp	r0, #0
 800731e:	f040 80b5 	bne.w	800748c <_dtoa_r+0x6c4>
 8007322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007324:	429d      	cmp	r5, r3
 8007326:	d081      	beq.n	800722c <_dtoa_r+0x464>
 8007328:	4b30      	ldr	r3, [pc, #192]	; (80073ec <_dtoa_r+0x624>)
 800732a:	2200      	movs	r2, #0
 800732c:	4650      	mov	r0, sl
 800732e:	4659      	mov	r1, fp
 8007330:	f7f9 f982 	bl	8000638 <__aeabi_dmul>
 8007334:	4b2d      	ldr	r3, [pc, #180]	; (80073ec <_dtoa_r+0x624>)
 8007336:	4682      	mov	sl, r0
 8007338:	468b      	mov	fp, r1
 800733a:	4640      	mov	r0, r8
 800733c:	4649      	mov	r1, r9
 800733e:	2200      	movs	r2, #0
 8007340:	f7f9 f97a 	bl	8000638 <__aeabi_dmul>
 8007344:	4680      	mov	r8, r0
 8007346:	4689      	mov	r9, r1
 8007348:	e7c6      	b.n	80072d8 <_dtoa_r+0x510>
 800734a:	4650      	mov	r0, sl
 800734c:	4659      	mov	r1, fp
 800734e:	f7f9 f973 	bl	8000638 <__aeabi_dmul>
 8007352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007354:	9d01      	ldr	r5, [sp, #4]
 8007356:	930f      	str	r3, [sp, #60]	; 0x3c
 8007358:	4682      	mov	sl, r0
 800735a:	468b      	mov	fp, r1
 800735c:	4649      	mov	r1, r9
 800735e:	4640      	mov	r0, r8
 8007360:	f7f9 fc1a 	bl	8000b98 <__aeabi_d2iz>
 8007364:	4606      	mov	r6, r0
 8007366:	f7f9 f8fd 	bl	8000564 <__aeabi_i2d>
 800736a:	3630      	adds	r6, #48	; 0x30
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	4640      	mov	r0, r8
 8007372:	4649      	mov	r1, r9
 8007374:	f7f8 ffa8 	bl	80002c8 <__aeabi_dsub>
 8007378:	f805 6b01 	strb.w	r6, [r5], #1
 800737c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800737e:	429d      	cmp	r5, r3
 8007380:	4680      	mov	r8, r0
 8007382:	4689      	mov	r9, r1
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	d124      	bne.n	80073d4 <_dtoa_r+0x60c>
 800738a:	4b1b      	ldr	r3, [pc, #108]	; (80073f8 <_dtoa_r+0x630>)
 800738c:	4650      	mov	r0, sl
 800738e:	4659      	mov	r1, fp
 8007390:	f7f8 ff9c 	bl	80002cc <__adddf3>
 8007394:	4602      	mov	r2, r0
 8007396:	460b      	mov	r3, r1
 8007398:	4640      	mov	r0, r8
 800739a:	4649      	mov	r1, r9
 800739c:	f7f9 fbdc 	bl	8000b58 <__aeabi_dcmpgt>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d173      	bne.n	800748c <_dtoa_r+0x6c4>
 80073a4:	4652      	mov	r2, sl
 80073a6:	465b      	mov	r3, fp
 80073a8:	4913      	ldr	r1, [pc, #76]	; (80073f8 <_dtoa_r+0x630>)
 80073aa:	2000      	movs	r0, #0
 80073ac:	f7f8 ff8c 	bl	80002c8 <__aeabi_dsub>
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4640      	mov	r0, r8
 80073b6:	4649      	mov	r1, r9
 80073b8:	f7f9 fbb0 	bl	8000b1c <__aeabi_dcmplt>
 80073bc:	2800      	cmp	r0, #0
 80073be:	f43f af35 	beq.w	800722c <_dtoa_r+0x464>
 80073c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80073c4:	1e6b      	subs	r3, r5, #1
 80073c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80073c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073cc:	2b30      	cmp	r3, #48	; 0x30
 80073ce:	d0f8      	beq.n	80073c2 <_dtoa_r+0x5fa>
 80073d0:	9700      	str	r7, [sp, #0]
 80073d2:	e049      	b.n	8007468 <_dtoa_r+0x6a0>
 80073d4:	4b05      	ldr	r3, [pc, #20]	; (80073ec <_dtoa_r+0x624>)
 80073d6:	f7f9 f92f 	bl	8000638 <__aeabi_dmul>
 80073da:	4680      	mov	r8, r0
 80073dc:	4689      	mov	r9, r1
 80073de:	e7bd      	b.n	800735c <_dtoa_r+0x594>
 80073e0:	08009e50 	.word	0x08009e50
 80073e4:	08009e28 	.word	0x08009e28
 80073e8:	3ff00000 	.word	0x3ff00000
 80073ec:	40240000 	.word	0x40240000
 80073f0:	401c0000 	.word	0x401c0000
 80073f4:	40140000 	.word	0x40140000
 80073f8:	3fe00000 	.word	0x3fe00000
 80073fc:	9d01      	ldr	r5, [sp, #4]
 80073fe:	4656      	mov	r6, sl
 8007400:	465f      	mov	r7, fp
 8007402:	4642      	mov	r2, r8
 8007404:	464b      	mov	r3, r9
 8007406:	4630      	mov	r0, r6
 8007408:	4639      	mov	r1, r7
 800740a:	f7f9 fa3f 	bl	800088c <__aeabi_ddiv>
 800740e:	f7f9 fbc3 	bl	8000b98 <__aeabi_d2iz>
 8007412:	4682      	mov	sl, r0
 8007414:	f7f9 f8a6 	bl	8000564 <__aeabi_i2d>
 8007418:	4642      	mov	r2, r8
 800741a:	464b      	mov	r3, r9
 800741c:	f7f9 f90c 	bl	8000638 <__aeabi_dmul>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4630      	mov	r0, r6
 8007426:	4639      	mov	r1, r7
 8007428:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800742c:	f7f8 ff4c 	bl	80002c8 <__aeabi_dsub>
 8007430:	f805 6b01 	strb.w	r6, [r5], #1
 8007434:	9e01      	ldr	r6, [sp, #4]
 8007436:	9f03      	ldr	r7, [sp, #12]
 8007438:	1bae      	subs	r6, r5, r6
 800743a:	42b7      	cmp	r7, r6
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	d135      	bne.n	80074ae <_dtoa_r+0x6e6>
 8007442:	f7f8 ff43 	bl	80002cc <__adddf3>
 8007446:	4642      	mov	r2, r8
 8007448:	464b      	mov	r3, r9
 800744a:	4606      	mov	r6, r0
 800744c:	460f      	mov	r7, r1
 800744e:	f7f9 fb83 	bl	8000b58 <__aeabi_dcmpgt>
 8007452:	b9d0      	cbnz	r0, 800748a <_dtoa_r+0x6c2>
 8007454:	4642      	mov	r2, r8
 8007456:	464b      	mov	r3, r9
 8007458:	4630      	mov	r0, r6
 800745a:	4639      	mov	r1, r7
 800745c:	f7f9 fb54 	bl	8000b08 <__aeabi_dcmpeq>
 8007460:	b110      	cbz	r0, 8007468 <_dtoa_r+0x6a0>
 8007462:	f01a 0f01 	tst.w	sl, #1
 8007466:	d110      	bne.n	800748a <_dtoa_r+0x6c2>
 8007468:	4620      	mov	r0, r4
 800746a:	ee18 1a10 	vmov	r1, s16
 800746e:	f000 fe75 	bl	800815c <_Bfree>
 8007472:	2300      	movs	r3, #0
 8007474:	9800      	ldr	r0, [sp, #0]
 8007476:	702b      	strb	r3, [r5, #0]
 8007478:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800747a:	3001      	adds	r0, #1
 800747c:	6018      	str	r0, [r3, #0]
 800747e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007480:	2b00      	cmp	r3, #0
 8007482:	f43f acf1 	beq.w	8006e68 <_dtoa_r+0xa0>
 8007486:	601d      	str	r5, [r3, #0]
 8007488:	e4ee      	b.n	8006e68 <_dtoa_r+0xa0>
 800748a:	9f00      	ldr	r7, [sp, #0]
 800748c:	462b      	mov	r3, r5
 800748e:	461d      	mov	r5, r3
 8007490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007494:	2a39      	cmp	r2, #57	; 0x39
 8007496:	d106      	bne.n	80074a6 <_dtoa_r+0x6de>
 8007498:	9a01      	ldr	r2, [sp, #4]
 800749a:	429a      	cmp	r2, r3
 800749c:	d1f7      	bne.n	800748e <_dtoa_r+0x6c6>
 800749e:	9901      	ldr	r1, [sp, #4]
 80074a0:	2230      	movs	r2, #48	; 0x30
 80074a2:	3701      	adds	r7, #1
 80074a4:	700a      	strb	r2, [r1, #0]
 80074a6:	781a      	ldrb	r2, [r3, #0]
 80074a8:	3201      	adds	r2, #1
 80074aa:	701a      	strb	r2, [r3, #0]
 80074ac:	e790      	b.n	80073d0 <_dtoa_r+0x608>
 80074ae:	4ba6      	ldr	r3, [pc, #664]	; (8007748 <_dtoa_r+0x980>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	f7f9 f8c1 	bl	8000638 <__aeabi_dmul>
 80074b6:	2200      	movs	r2, #0
 80074b8:	2300      	movs	r3, #0
 80074ba:	4606      	mov	r6, r0
 80074bc:	460f      	mov	r7, r1
 80074be:	f7f9 fb23 	bl	8000b08 <__aeabi_dcmpeq>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d09d      	beq.n	8007402 <_dtoa_r+0x63a>
 80074c6:	e7cf      	b.n	8007468 <_dtoa_r+0x6a0>
 80074c8:	9a08      	ldr	r2, [sp, #32]
 80074ca:	2a00      	cmp	r2, #0
 80074cc:	f000 80d7 	beq.w	800767e <_dtoa_r+0x8b6>
 80074d0:	9a06      	ldr	r2, [sp, #24]
 80074d2:	2a01      	cmp	r2, #1
 80074d4:	f300 80ba 	bgt.w	800764c <_dtoa_r+0x884>
 80074d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074da:	2a00      	cmp	r2, #0
 80074dc:	f000 80b2 	beq.w	8007644 <_dtoa_r+0x87c>
 80074e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074e4:	9e07      	ldr	r6, [sp, #28]
 80074e6:	9d04      	ldr	r5, [sp, #16]
 80074e8:	9a04      	ldr	r2, [sp, #16]
 80074ea:	441a      	add	r2, r3
 80074ec:	9204      	str	r2, [sp, #16]
 80074ee:	9a05      	ldr	r2, [sp, #20]
 80074f0:	2101      	movs	r1, #1
 80074f2:	441a      	add	r2, r3
 80074f4:	4620      	mov	r0, r4
 80074f6:	9205      	str	r2, [sp, #20]
 80074f8:	f000 ff32 	bl	8008360 <__i2b>
 80074fc:	4607      	mov	r7, r0
 80074fe:	2d00      	cmp	r5, #0
 8007500:	dd0c      	ble.n	800751c <_dtoa_r+0x754>
 8007502:	9b05      	ldr	r3, [sp, #20]
 8007504:	2b00      	cmp	r3, #0
 8007506:	dd09      	ble.n	800751c <_dtoa_r+0x754>
 8007508:	42ab      	cmp	r3, r5
 800750a:	9a04      	ldr	r2, [sp, #16]
 800750c:	bfa8      	it	ge
 800750e:	462b      	movge	r3, r5
 8007510:	1ad2      	subs	r2, r2, r3
 8007512:	9204      	str	r2, [sp, #16]
 8007514:	9a05      	ldr	r2, [sp, #20]
 8007516:	1aed      	subs	r5, r5, r3
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	9305      	str	r3, [sp, #20]
 800751c:	9b07      	ldr	r3, [sp, #28]
 800751e:	b31b      	cbz	r3, 8007568 <_dtoa_r+0x7a0>
 8007520:	9b08      	ldr	r3, [sp, #32]
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 80af 	beq.w	8007686 <_dtoa_r+0x8be>
 8007528:	2e00      	cmp	r6, #0
 800752a:	dd13      	ble.n	8007554 <_dtoa_r+0x78c>
 800752c:	4639      	mov	r1, r7
 800752e:	4632      	mov	r2, r6
 8007530:	4620      	mov	r0, r4
 8007532:	f000 ffd5 	bl	80084e0 <__pow5mult>
 8007536:	ee18 2a10 	vmov	r2, s16
 800753a:	4601      	mov	r1, r0
 800753c:	4607      	mov	r7, r0
 800753e:	4620      	mov	r0, r4
 8007540:	f000 ff24 	bl	800838c <__multiply>
 8007544:	ee18 1a10 	vmov	r1, s16
 8007548:	4680      	mov	r8, r0
 800754a:	4620      	mov	r0, r4
 800754c:	f000 fe06 	bl	800815c <_Bfree>
 8007550:	ee08 8a10 	vmov	s16, r8
 8007554:	9b07      	ldr	r3, [sp, #28]
 8007556:	1b9a      	subs	r2, r3, r6
 8007558:	d006      	beq.n	8007568 <_dtoa_r+0x7a0>
 800755a:	ee18 1a10 	vmov	r1, s16
 800755e:	4620      	mov	r0, r4
 8007560:	f000 ffbe 	bl	80084e0 <__pow5mult>
 8007564:	ee08 0a10 	vmov	s16, r0
 8007568:	2101      	movs	r1, #1
 800756a:	4620      	mov	r0, r4
 800756c:	f000 fef8 	bl	8008360 <__i2b>
 8007570:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007572:	2b00      	cmp	r3, #0
 8007574:	4606      	mov	r6, r0
 8007576:	f340 8088 	ble.w	800768a <_dtoa_r+0x8c2>
 800757a:	461a      	mov	r2, r3
 800757c:	4601      	mov	r1, r0
 800757e:	4620      	mov	r0, r4
 8007580:	f000 ffae 	bl	80084e0 <__pow5mult>
 8007584:	9b06      	ldr	r3, [sp, #24]
 8007586:	2b01      	cmp	r3, #1
 8007588:	4606      	mov	r6, r0
 800758a:	f340 8081 	ble.w	8007690 <_dtoa_r+0x8c8>
 800758e:	f04f 0800 	mov.w	r8, #0
 8007592:	6933      	ldr	r3, [r6, #16]
 8007594:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007598:	6918      	ldr	r0, [r3, #16]
 800759a:	f000 fe91 	bl	80082c0 <__hi0bits>
 800759e:	f1c0 0020 	rsb	r0, r0, #32
 80075a2:	9b05      	ldr	r3, [sp, #20]
 80075a4:	4418      	add	r0, r3
 80075a6:	f010 001f 	ands.w	r0, r0, #31
 80075aa:	f000 8092 	beq.w	80076d2 <_dtoa_r+0x90a>
 80075ae:	f1c0 0320 	rsb	r3, r0, #32
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	f340 808a 	ble.w	80076cc <_dtoa_r+0x904>
 80075b8:	f1c0 001c 	rsb	r0, r0, #28
 80075bc:	9b04      	ldr	r3, [sp, #16]
 80075be:	4403      	add	r3, r0
 80075c0:	9304      	str	r3, [sp, #16]
 80075c2:	9b05      	ldr	r3, [sp, #20]
 80075c4:	4403      	add	r3, r0
 80075c6:	4405      	add	r5, r0
 80075c8:	9305      	str	r3, [sp, #20]
 80075ca:	9b04      	ldr	r3, [sp, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	dd07      	ble.n	80075e0 <_dtoa_r+0x818>
 80075d0:	ee18 1a10 	vmov	r1, s16
 80075d4:	461a      	mov	r2, r3
 80075d6:	4620      	mov	r0, r4
 80075d8:	f000 ffdc 	bl	8008594 <__lshift>
 80075dc:	ee08 0a10 	vmov	s16, r0
 80075e0:	9b05      	ldr	r3, [sp, #20]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	dd05      	ble.n	80075f2 <_dtoa_r+0x82a>
 80075e6:	4631      	mov	r1, r6
 80075e8:	461a      	mov	r2, r3
 80075ea:	4620      	mov	r0, r4
 80075ec:	f000 ffd2 	bl	8008594 <__lshift>
 80075f0:	4606      	mov	r6, r0
 80075f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d06e      	beq.n	80076d6 <_dtoa_r+0x90e>
 80075f8:	ee18 0a10 	vmov	r0, s16
 80075fc:	4631      	mov	r1, r6
 80075fe:	f001 f839 	bl	8008674 <__mcmp>
 8007602:	2800      	cmp	r0, #0
 8007604:	da67      	bge.n	80076d6 <_dtoa_r+0x90e>
 8007606:	9b00      	ldr	r3, [sp, #0]
 8007608:	3b01      	subs	r3, #1
 800760a:	ee18 1a10 	vmov	r1, s16
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	220a      	movs	r2, #10
 8007612:	2300      	movs	r3, #0
 8007614:	4620      	mov	r0, r4
 8007616:	f000 fdc3 	bl	80081a0 <__multadd>
 800761a:	9b08      	ldr	r3, [sp, #32]
 800761c:	ee08 0a10 	vmov	s16, r0
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 81b1 	beq.w	8007988 <_dtoa_r+0xbc0>
 8007626:	2300      	movs	r3, #0
 8007628:	4639      	mov	r1, r7
 800762a:	220a      	movs	r2, #10
 800762c:	4620      	mov	r0, r4
 800762e:	f000 fdb7 	bl	80081a0 <__multadd>
 8007632:	9b02      	ldr	r3, [sp, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	4607      	mov	r7, r0
 8007638:	f300 808e 	bgt.w	8007758 <_dtoa_r+0x990>
 800763c:	9b06      	ldr	r3, [sp, #24]
 800763e:	2b02      	cmp	r3, #2
 8007640:	dc51      	bgt.n	80076e6 <_dtoa_r+0x91e>
 8007642:	e089      	b.n	8007758 <_dtoa_r+0x990>
 8007644:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007646:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800764a:	e74b      	b.n	80074e4 <_dtoa_r+0x71c>
 800764c:	9b03      	ldr	r3, [sp, #12]
 800764e:	1e5e      	subs	r6, r3, #1
 8007650:	9b07      	ldr	r3, [sp, #28]
 8007652:	42b3      	cmp	r3, r6
 8007654:	bfbf      	itttt	lt
 8007656:	9b07      	ldrlt	r3, [sp, #28]
 8007658:	9607      	strlt	r6, [sp, #28]
 800765a:	1af2      	sublt	r2, r6, r3
 800765c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800765e:	bfb6      	itet	lt
 8007660:	189b      	addlt	r3, r3, r2
 8007662:	1b9e      	subge	r6, r3, r6
 8007664:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007666:	9b03      	ldr	r3, [sp, #12]
 8007668:	bfb8      	it	lt
 800766a:	2600      	movlt	r6, #0
 800766c:	2b00      	cmp	r3, #0
 800766e:	bfb7      	itett	lt
 8007670:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007674:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007678:	1a9d      	sublt	r5, r3, r2
 800767a:	2300      	movlt	r3, #0
 800767c:	e734      	b.n	80074e8 <_dtoa_r+0x720>
 800767e:	9e07      	ldr	r6, [sp, #28]
 8007680:	9d04      	ldr	r5, [sp, #16]
 8007682:	9f08      	ldr	r7, [sp, #32]
 8007684:	e73b      	b.n	80074fe <_dtoa_r+0x736>
 8007686:	9a07      	ldr	r2, [sp, #28]
 8007688:	e767      	b.n	800755a <_dtoa_r+0x792>
 800768a:	9b06      	ldr	r3, [sp, #24]
 800768c:	2b01      	cmp	r3, #1
 800768e:	dc18      	bgt.n	80076c2 <_dtoa_r+0x8fa>
 8007690:	f1ba 0f00 	cmp.w	sl, #0
 8007694:	d115      	bne.n	80076c2 <_dtoa_r+0x8fa>
 8007696:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800769a:	b993      	cbnz	r3, 80076c2 <_dtoa_r+0x8fa>
 800769c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80076a0:	0d1b      	lsrs	r3, r3, #20
 80076a2:	051b      	lsls	r3, r3, #20
 80076a4:	b183      	cbz	r3, 80076c8 <_dtoa_r+0x900>
 80076a6:	9b04      	ldr	r3, [sp, #16]
 80076a8:	3301      	adds	r3, #1
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	9b05      	ldr	r3, [sp, #20]
 80076ae:	3301      	adds	r3, #1
 80076b0:	9305      	str	r3, [sp, #20]
 80076b2:	f04f 0801 	mov.w	r8, #1
 80076b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f47f af6a 	bne.w	8007592 <_dtoa_r+0x7ca>
 80076be:	2001      	movs	r0, #1
 80076c0:	e76f      	b.n	80075a2 <_dtoa_r+0x7da>
 80076c2:	f04f 0800 	mov.w	r8, #0
 80076c6:	e7f6      	b.n	80076b6 <_dtoa_r+0x8ee>
 80076c8:	4698      	mov	r8, r3
 80076ca:	e7f4      	b.n	80076b6 <_dtoa_r+0x8ee>
 80076cc:	f43f af7d 	beq.w	80075ca <_dtoa_r+0x802>
 80076d0:	4618      	mov	r0, r3
 80076d2:	301c      	adds	r0, #28
 80076d4:	e772      	b.n	80075bc <_dtoa_r+0x7f4>
 80076d6:	9b03      	ldr	r3, [sp, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	dc37      	bgt.n	800774c <_dtoa_r+0x984>
 80076dc:	9b06      	ldr	r3, [sp, #24]
 80076de:	2b02      	cmp	r3, #2
 80076e0:	dd34      	ble.n	800774c <_dtoa_r+0x984>
 80076e2:	9b03      	ldr	r3, [sp, #12]
 80076e4:	9302      	str	r3, [sp, #8]
 80076e6:	9b02      	ldr	r3, [sp, #8]
 80076e8:	b96b      	cbnz	r3, 8007706 <_dtoa_r+0x93e>
 80076ea:	4631      	mov	r1, r6
 80076ec:	2205      	movs	r2, #5
 80076ee:	4620      	mov	r0, r4
 80076f0:	f000 fd56 	bl	80081a0 <__multadd>
 80076f4:	4601      	mov	r1, r0
 80076f6:	4606      	mov	r6, r0
 80076f8:	ee18 0a10 	vmov	r0, s16
 80076fc:	f000 ffba 	bl	8008674 <__mcmp>
 8007700:	2800      	cmp	r0, #0
 8007702:	f73f adbb 	bgt.w	800727c <_dtoa_r+0x4b4>
 8007706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007708:	9d01      	ldr	r5, [sp, #4]
 800770a:	43db      	mvns	r3, r3
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	f04f 0800 	mov.w	r8, #0
 8007712:	4631      	mov	r1, r6
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fd21 	bl	800815c <_Bfree>
 800771a:	2f00      	cmp	r7, #0
 800771c:	f43f aea4 	beq.w	8007468 <_dtoa_r+0x6a0>
 8007720:	f1b8 0f00 	cmp.w	r8, #0
 8007724:	d005      	beq.n	8007732 <_dtoa_r+0x96a>
 8007726:	45b8      	cmp	r8, r7
 8007728:	d003      	beq.n	8007732 <_dtoa_r+0x96a>
 800772a:	4641      	mov	r1, r8
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fd15 	bl	800815c <_Bfree>
 8007732:	4639      	mov	r1, r7
 8007734:	4620      	mov	r0, r4
 8007736:	f000 fd11 	bl	800815c <_Bfree>
 800773a:	e695      	b.n	8007468 <_dtoa_r+0x6a0>
 800773c:	2600      	movs	r6, #0
 800773e:	4637      	mov	r7, r6
 8007740:	e7e1      	b.n	8007706 <_dtoa_r+0x93e>
 8007742:	9700      	str	r7, [sp, #0]
 8007744:	4637      	mov	r7, r6
 8007746:	e599      	b.n	800727c <_dtoa_r+0x4b4>
 8007748:	40240000 	.word	0x40240000
 800774c:	9b08      	ldr	r3, [sp, #32]
 800774e:	2b00      	cmp	r3, #0
 8007750:	f000 80ca 	beq.w	80078e8 <_dtoa_r+0xb20>
 8007754:	9b03      	ldr	r3, [sp, #12]
 8007756:	9302      	str	r3, [sp, #8]
 8007758:	2d00      	cmp	r5, #0
 800775a:	dd05      	ble.n	8007768 <_dtoa_r+0x9a0>
 800775c:	4639      	mov	r1, r7
 800775e:	462a      	mov	r2, r5
 8007760:	4620      	mov	r0, r4
 8007762:	f000 ff17 	bl	8008594 <__lshift>
 8007766:	4607      	mov	r7, r0
 8007768:	f1b8 0f00 	cmp.w	r8, #0
 800776c:	d05b      	beq.n	8007826 <_dtoa_r+0xa5e>
 800776e:	6879      	ldr	r1, [r7, #4]
 8007770:	4620      	mov	r0, r4
 8007772:	f000 fcb3 	bl	80080dc <_Balloc>
 8007776:	4605      	mov	r5, r0
 8007778:	b928      	cbnz	r0, 8007786 <_dtoa_r+0x9be>
 800777a:	4b87      	ldr	r3, [pc, #540]	; (8007998 <_dtoa_r+0xbd0>)
 800777c:	4602      	mov	r2, r0
 800777e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007782:	f7ff bb3b 	b.w	8006dfc <_dtoa_r+0x34>
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	3202      	adds	r2, #2
 800778a:	0092      	lsls	r2, r2, #2
 800778c:	f107 010c 	add.w	r1, r7, #12
 8007790:	300c      	adds	r0, #12
 8007792:	f000 fc95 	bl	80080c0 <memcpy>
 8007796:	2201      	movs	r2, #1
 8007798:	4629      	mov	r1, r5
 800779a:	4620      	mov	r0, r4
 800779c:	f000 fefa 	bl	8008594 <__lshift>
 80077a0:	9b01      	ldr	r3, [sp, #4]
 80077a2:	f103 0901 	add.w	r9, r3, #1
 80077a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80077aa:	4413      	add	r3, r2
 80077ac:	9305      	str	r3, [sp, #20]
 80077ae:	f00a 0301 	and.w	r3, sl, #1
 80077b2:	46b8      	mov	r8, r7
 80077b4:	9304      	str	r3, [sp, #16]
 80077b6:	4607      	mov	r7, r0
 80077b8:	4631      	mov	r1, r6
 80077ba:	ee18 0a10 	vmov	r0, s16
 80077be:	f7ff fa77 	bl	8006cb0 <quorem>
 80077c2:	4641      	mov	r1, r8
 80077c4:	9002      	str	r0, [sp, #8]
 80077c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80077ca:	ee18 0a10 	vmov	r0, s16
 80077ce:	f000 ff51 	bl	8008674 <__mcmp>
 80077d2:	463a      	mov	r2, r7
 80077d4:	9003      	str	r0, [sp, #12]
 80077d6:	4631      	mov	r1, r6
 80077d8:	4620      	mov	r0, r4
 80077da:	f000 ff67 	bl	80086ac <__mdiff>
 80077de:	68c2      	ldr	r2, [r0, #12]
 80077e0:	f109 3bff 	add.w	fp, r9, #4294967295
 80077e4:	4605      	mov	r5, r0
 80077e6:	bb02      	cbnz	r2, 800782a <_dtoa_r+0xa62>
 80077e8:	4601      	mov	r1, r0
 80077ea:	ee18 0a10 	vmov	r0, s16
 80077ee:	f000 ff41 	bl	8008674 <__mcmp>
 80077f2:	4602      	mov	r2, r0
 80077f4:	4629      	mov	r1, r5
 80077f6:	4620      	mov	r0, r4
 80077f8:	9207      	str	r2, [sp, #28]
 80077fa:	f000 fcaf 	bl	800815c <_Bfree>
 80077fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007802:	ea43 0102 	orr.w	r1, r3, r2
 8007806:	9b04      	ldr	r3, [sp, #16]
 8007808:	430b      	orrs	r3, r1
 800780a:	464d      	mov	r5, r9
 800780c:	d10f      	bne.n	800782e <_dtoa_r+0xa66>
 800780e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007812:	d02a      	beq.n	800786a <_dtoa_r+0xaa2>
 8007814:	9b03      	ldr	r3, [sp, #12]
 8007816:	2b00      	cmp	r3, #0
 8007818:	dd02      	ble.n	8007820 <_dtoa_r+0xa58>
 800781a:	9b02      	ldr	r3, [sp, #8]
 800781c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007820:	f88b a000 	strb.w	sl, [fp]
 8007824:	e775      	b.n	8007712 <_dtoa_r+0x94a>
 8007826:	4638      	mov	r0, r7
 8007828:	e7ba      	b.n	80077a0 <_dtoa_r+0x9d8>
 800782a:	2201      	movs	r2, #1
 800782c:	e7e2      	b.n	80077f4 <_dtoa_r+0xa2c>
 800782e:	9b03      	ldr	r3, [sp, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	db04      	blt.n	800783e <_dtoa_r+0xa76>
 8007834:	9906      	ldr	r1, [sp, #24]
 8007836:	430b      	orrs	r3, r1
 8007838:	9904      	ldr	r1, [sp, #16]
 800783a:	430b      	orrs	r3, r1
 800783c:	d122      	bne.n	8007884 <_dtoa_r+0xabc>
 800783e:	2a00      	cmp	r2, #0
 8007840:	ddee      	ble.n	8007820 <_dtoa_r+0xa58>
 8007842:	ee18 1a10 	vmov	r1, s16
 8007846:	2201      	movs	r2, #1
 8007848:	4620      	mov	r0, r4
 800784a:	f000 fea3 	bl	8008594 <__lshift>
 800784e:	4631      	mov	r1, r6
 8007850:	ee08 0a10 	vmov	s16, r0
 8007854:	f000 ff0e 	bl	8008674 <__mcmp>
 8007858:	2800      	cmp	r0, #0
 800785a:	dc03      	bgt.n	8007864 <_dtoa_r+0xa9c>
 800785c:	d1e0      	bne.n	8007820 <_dtoa_r+0xa58>
 800785e:	f01a 0f01 	tst.w	sl, #1
 8007862:	d0dd      	beq.n	8007820 <_dtoa_r+0xa58>
 8007864:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007868:	d1d7      	bne.n	800781a <_dtoa_r+0xa52>
 800786a:	2339      	movs	r3, #57	; 0x39
 800786c:	f88b 3000 	strb.w	r3, [fp]
 8007870:	462b      	mov	r3, r5
 8007872:	461d      	mov	r5, r3
 8007874:	3b01      	subs	r3, #1
 8007876:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800787a:	2a39      	cmp	r2, #57	; 0x39
 800787c:	d071      	beq.n	8007962 <_dtoa_r+0xb9a>
 800787e:	3201      	adds	r2, #1
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	e746      	b.n	8007712 <_dtoa_r+0x94a>
 8007884:	2a00      	cmp	r2, #0
 8007886:	dd07      	ble.n	8007898 <_dtoa_r+0xad0>
 8007888:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800788c:	d0ed      	beq.n	800786a <_dtoa_r+0xaa2>
 800788e:	f10a 0301 	add.w	r3, sl, #1
 8007892:	f88b 3000 	strb.w	r3, [fp]
 8007896:	e73c      	b.n	8007712 <_dtoa_r+0x94a>
 8007898:	9b05      	ldr	r3, [sp, #20]
 800789a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800789e:	4599      	cmp	r9, r3
 80078a0:	d047      	beq.n	8007932 <_dtoa_r+0xb6a>
 80078a2:	ee18 1a10 	vmov	r1, s16
 80078a6:	2300      	movs	r3, #0
 80078a8:	220a      	movs	r2, #10
 80078aa:	4620      	mov	r0, r4
 80078ac:	f000 fc78 	bl	80081a0 <__multadd>
 80078b0:	45b8      	cmp	r8, r7
 80078b2:	ee08 0a10 	vmov	s16, r0
 80078b6:	f04f 0300 	mov.w	r3, #0
 80078ba:	f04f 020a 	mov.w	r2, #10
 80078be:	4641      	mov	r1, r8
 80078c0:	4620      	mov	r0, r4
 80078c2:	d106      	bne.n	80078d2 <_dtoa_r+0xb0a>
 80078c4:	f000 fc6c 	bl	80081a0 <__multadd>
 80078c8:	4680      	mov	r8, r0
 80078ca:	4607      	mov	r7, r0
 80078cc:	f109 0901 	add.w	r9, r9, #1
 80078d0:	e772      	b.n	80077b8 <_dtoa_r+0x9f0>
 80078d2:	f000 fc65 	bl	80081a0 <__multadd>
 80078d6:	4639      	mov	r1, r7
 80078d8:	4680      	mov	r8, r0
 80078da:	2300      	movs	r3, #0
 80078dc:	220a      	movs	r2, #10
 80078de:	4620      	mov	r0, r4
 80078e0:	f000 fc5e 	bl	80081a0 <__multadd>
 80078e4:	4607      	mov	r7, r0
 80078e6:	e7f1      	b.n	80078cc <_dtoa_r+0xb04>
 80078e8:	9b03      	ldr	r3, [sp, #12]
 80078ea:	9302      	str	r3, [sp, #8]
 80078ec:	9d01      	ldr	r5, [sp, #4]
 80078ee:	ee18 0a10 	vmov	r0, s16
 80078f2:	4631      	mov	r1, r6
 80078f4:	f7ff f9dc 	bl	8006cb0 <quorem>
 80078f8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80078fc:	9b01      	ldr	r3, [sp, #4]
 80078fe:	f805 ab01 	strb.w	sl, [r5], #1
 8007902:	1aea      	subs	r2, r5, r3
 8007904:	9b02      	ldr	r3, [sp, #8]
 8007906:	4293      	cmp	r3, r2
 8007908:	dd09      	ble.n	800791e <_dtoa_r+0xb56>
 800790a:	ee18 1a10 	vmov	r1, s16
 800790e:	2300      	movs	r3, #0
 8007910:	220a      	movs	r2, #10
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fc44 	bl	80081a0 <__multadd>
 8007918:	ee08 0a10 	vmov	s16, r0
 800791c:	e7e7      	b.n	80078ee <_dtoa_r+0xb26>
 800791e:	9b02      	ldr	r3, [sp, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	bfc8      	it	gt
 8007924:	461d      	movgt	r5, r3
 8007926:	9b01      	ldr	r3, [sp, #4]
 8007928:	bfd8      	it	le
 800792a:	2501      	movle	r5, #1
 800792c:	441d      	add	r5, r3
 800792e:	f04f 0800 	mov.w	r8, #0
 8007932:	ee18 1a10 	vmov	r1, s16
 8007936:	2201      	movs	r2, #1
 8007938:	4620      	mov	r0, r4
 800793a:	f000 fe2b 	bl	8008594 <__lshift>
 800793e:	4631      	mov	r1, r6
 8007940:	ee08 0a10 	vmov	s16, r0
 8007944:	f000 fe96 	bl	8008674 <__mcmp>
 8007948:	2800      	cmp	r0, #0
 800794a:	dc91      	bgt.n	8007870 <_dtoa_r+0xaa8>
 800794c:	d102      	bne.n	8007954 <_dtoa_r+0xb8c>
 800794e:	f01a 0f01 	tst.w	sl, #1
 8007952:	d18d      	bne.n	8007870 <_dtoa_r+0xaa8>
 8007954:	462b      	mov	r3, r5
 8007956:	461d      	mov	r5, r3
 8007958:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800795c:	2a30      	cmp	r2, #48	; 0x30
 800795e:	d0fa      	beq.n	8007956 <_dtoa_r+0xb8e>
 8007960:	e6d7      	b.n	8007712 <_dtoa_r+0x94a>
 8007962:	9a01      	ldr	r2, [sp, #4]
 8007964:	429a      	cmp	r2, r3
 8007966:	d184      	bne.n	8007872 <_dtoa_r+0xaaa>
 8007968:	9b00      	ldr	r3, [sp, #0]
 800796a:	3301      	adds	r3, #1
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	2331      	movs	r3, #49	; 0x31
 8007970:	7013      	strb	r3, [r2, #0]
 8007972:	e6ce      	b.n	8007712 <_dtoa_r+0x94a>
 8007974:	4b09      	ldr	r3, [pc, #36]	; (800799c <_dtoa_r+0xbd4>)
 8007976:	f7ff ba95 	b.w	8006ea4 <_dtoa_r+0xdc>
 800797a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800797c:	2b00      	cmp	r3, #0
 800797e:	f47f aa6e 	bne.w	8006e5e <_dtoa_r+0x96>
 8007982:	4b07      	ldr	r3, [pc, #28]	; (80079a0 <_dtoa_r+0xbd8>)
 8007984:	f7ff ba8e 	b.w	8006ea4 <_dtoa_r+0xdc>
 8007988:	9b02      	ldr	r3, [sp, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	dcae      	bgt.n	80078ec <_dtoa_r+0xb24>
 800798e:	9b06      	ldr	r3, [sp, #24]
 8007990:	2b02      	cmp	r3, #2
 8007992:	f73f aea8 	bgt.w	80076e6 <_dtoa_r+0x91e>
 8007996:	e7a9      	b.n	80078ec <_dtoa_r+0xb24>
 8007998:	08009d40 	.word	0x08009d40
 800799c:	08009b44 	.word	0x08009b44
 80079a0:	08009cc1 	.word	0x08009cc1

080079a4 <rshift>:
 80079a4:	6903      	ldr	r3, [r0, #16]
 80079a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80079aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 80079b2:	f100 0414 	add.w	r4, r0, #20
 80079b6:	dd45      	ble.n	8007a44 <rshift+0xa0>
 80079b8:	f011 011f 	ands.w	r1, r1, #31
 80079bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80079c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80079c4:	d10c      	bne.n	80079e0 <rshift+0x3c>
 80079c6:	f100 0710 	add.w	r7, r0, #16
 80079ca:	4629      	mov	r1, r5
 80079cc:	42b1      	cmp	r1, r6
 80079ce:	d334      	bcc.n	8007a3a <rshift+0x96>
 80079d0:	1a9b      	subs	r3, r3, r2
 80079d2:	009b      	lsls	r3, r3, #2
 80079d4:	1eea      	subs	r2, r5, #3
 80079d6:	4296      	cmp	r6, r2
 80079d8:	bf38      	it	cc
 80079da:	2300      	movcc	r3, #0
 80079dc:	4423      	add	r3, r4
 80079de:	e015      	b.n	8007a0c <rshift+0x68>
 80079e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80079e4:	f1c1 0820 	rsb	r8, r1, #32
 80079e8:	40cf      	lsrs	r7, r1
 80079ea:	f105 0e04 	add.w	lr, r5, #4
 80079ee:	46a1      	mov	r9, r4
 80079f0:	4576      	cmp	r6, lr
 80079f2:	46f4      	mov	ip, lr
 80079f4:	d815      	bhi.n	8007a22 <rshift+0x7e>
 80079f6:	1a9a      	subs	r2, r3, r2
 80079f8:	0092      	lsls	r2, r2, #2
 80079fa:	3a04      	subs	r2, #4
 80079fc:	3501      	adds	r5, #1
 80079fe:	42ae      	cmp	r6, r5
 8007a00:	bf38      	it	cc
 8007a02:	2200      	movcc	r2, #0
 8007a04:	18a3      	adds	r3, r4, r2
 8007a06:	50a7      	str	r7, [r4, r2]
 8007a08:	b107      	cbz	r7, 8007a0c <rshift+0x68>
 8007a0a:	3304      	adds	r3, #4
 8007a0c:	1b1a      	subs	r2, r3, r4
 8007a0e:	42a3      	cmp	r3, r4
 8007a10:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007a14:	bf08      	it	eq
 8007a16:	2300      	moveq	r3, #0
 8007a18:	6102      	str	r2, [r0, #16]
 8007a1a:	bf08      	it	eq
 8007a1c:	6143      	streq	r3, [r0, #20]
 8007a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a22:	f8dc c000 	ldr.w	ip, [ip]
 8007a26:	fa0c fc08 	lsl.w	ip, ip, r8
 8007a2a:	ea4c 0707 	orr.w	r7, ip, r7
 8007a2e:	f849 7b04 	str.w	r7, [r9], #4
 8007a32:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a36:	40cf      	lsrs	r7, r1
 8007a38:	e7da      	b.n	80079f0 <rshift+0x4c>
 8007a3a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007a3e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007a42:	e7c3      	b.n	80079cc <rshift+0x28>
 8007a44:	4623      	mov	r3, r4
 8007a46:	e7e1      	b.n	8007a0c <rshift+0x68>

08007a48 <__hexdig_fun>:
 8007a48:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007a4c:	2b09      	cmp	r3, #9
 8007a4e:	d802      	bhi.n	8007a56 <__hexdig_fun+0xe>
 8007a50:	3820      	subs	r0, #32
 8007a52:	b2c0      	uxtb	r0, r0
 8007a54:	4770      	bx	lr
 8007a56:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007a5a:	2b05      	cmp	r3, #5
 8007a5c:	d801      	bhi.n	8007a62 <__hexdig_fun+0x1a>
 8007a5e:	3847      	subs	r0, #71	; 0x47
 8007a60:	e7f7      	b.n	8007a52 <__hexdig_fun+0xa>
 8007a62:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007a66:	2b05      	cmp	r3, #5
 8007a68:	d801      	bhi.n	8007a6e <__hexdig_fun+0x26>
 8007a6a:	3827      	subs	r0, #39	; 0x27
 8007a6c:	e7f1      	b.n	8007a52 <__hexdig_fun+0xa>
 8007a6e:	2000      	movs	r0, #0
 8007a70:	4770      	bx	lr
	...

08007a74 <__gethex>:
 8007a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	ed2d 8b02 	vpush	{d8}
 8007a7c:	b089      	sub	sp, #36	; 0x24
 8007a7e:	ee08 0a10 	vmov	s16, r0
 8007a82:	9304      	str	r3, [sp, #16]
 8007a84:	4bb4      	ldr	r3, [pc, #720]	; (8007d58 <__gethex+0x2e4>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	468b      	mov	fp, r1
 8007a8e:	4690      	mov	r8, r2
 8007a90:	f7f8 fbbe 	bl	8000210 <strlen>
 8007a94:	9b01      	ldr	r3, [sp, #4]
 8007a96:	f8db 2000 	ldr.w	r2, [fp]
 8007a9a:	4403      	add	r3, r0
 8007a9c:	4682      	mov	sl, r0
 8007a9e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007aa2:	9305      	str	r3, [sp, #20]
 8007aa4:	1c93      	adds	r3, r2, #2
 8007aa6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007aaa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007aae:	32fe      	adds	r2, #254	; 0xfe
 8007ab0:	18d1      	adds	r1, r2, r3
 8007ab2:	461f      	mov	r7, r3
 8007ab4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ab8:	9100      	str	r1, [sp, #0]
 8007aba:	2830      	cmp	r0, #48	; 0x30
 8007abc:	d0f8      	beq.n	8007ab0 <__gethex+0x3c>
 8007abe:	f7ff ffc3 	bl	8007a48 <__hexdig_fun>
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d13a      	bne.n	8007b3e <__gethex+0xca>
 8007ac8:	9901      	ldr	r1, [sp, #4]
 8007aca:	4652      	mov	r2, sl
 8007acc:	4638      	mov	r0, r7
 8007ace:	f001 fa33 	bl	8008f38 <strncmp>
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d168      	bne.n	8007baa <__gethex+0x136>
 8007ad8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007adc:	eb07 060a 	add.w	r6, r7, sl
 8007ae0:	f7ff ffb2 	bl	8007a48 <__hexdig_fun>
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	d062      	beq.n	8007bae <__gethex+0x13a>
 8007ae8:	4633      	mov	r3, r6
 8007aea:	7818      	ldrb	r0, [r3, #0]
 8007aec:	2830      	cmp	r0, #48	; 0x30
 8007aee:	461f      	mov	r7, r3
 8007af0:	f103 0301 	add.w	r3, r3, #1
 8007af4:	d0f9      	beq.n	8007aea <__gethex+0x76>
 8007af6:	f7ff ffa7 	bl	8007a48 <__hexdig_fun>
 8007afa:	2301      	movs	r3, #1
 8007afc:	fab0 f480 	clz	r4, r0
 8007b00:	0964      	lsrs	r4, r4, #5
 8007b02:	4635      	mov	r5, r6
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	463a      	mov	r2, r7
 8007b08:	4616      	mov	r6, r2
 8007b0a:	3201      	adds	r2, #1
 8007b0c:	7830      	ldrb	r0, [r6, #0]
 8007b0e:	f7ff ff9b 	bl	8007a48 <__hexdig_fun>
 8007b12:	2800      	cmp	r0, #0
 8007b14:	d1f8      	bne.n	8007b08 <__gethex+0x94>
 8007b16:	9901      	ldr	r1, [sp, #4]
 8007b18:	4652      	mov	r2, sl
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f001 fa0c 	bl	8008f38 <strncmp>
 8007b20:	b980      	cbnz	r0, 8007b44 <__gethex+0xd0>
 8007b22:	b94d      	cbnz	r5, 8007b38 <__gethex+0xc4>
 8007b24:	eb06 050a 	add.w	r5, r6, sl
 8007b28:	462a      	mov	r2, r5
 8007b2a:	4616      	mov	r6, r2
 8007b2c:	3201      	adds	r2, #1
 8007b2e:	7830      	ldrb	r0, [r6, #0]
 8007b30:	f7ff ff8a 	bl	8007a48 <__hexdig_fun>
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d1f8      	bne.n	8007b2a <__gethex+0xb6>
 8007b38:	1bad      	subs	r5, r5, r6
 8007b3a:	00ad      	lsls	r5, r5, #2
 8007b3c:	e004      	b.n	8007b48 <__gethex+0xd4>
 8007b3e:	2400      	movs	r4, #0
 8007b40:	4625      	mov	r5, r4
 8007b42:	e7e0      	b.n	8007b06 <__gethex+0x92>
 8007b44:	2d00      	cmp	r5, #0
 8007b46:	d1f7      	bne.n	8007b38 <__gethex+0xc4>
 8007b48:	7833      	ldrb	r3, [r6, #0]
 8007b4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b4e:	2b50      	cmp	r3, #80	; 0x50
 8007b50:	d13b      	bne.n	8007bca <__gethex+0x156>
 8007b52:	7873      	ldrb	r3, [r6, #1]
 8007b54:	2b2b      	cmp	r3, #43	; 0x2b
 8007b56:	d02c      	beq.n	8007bb2 <__gethex+0x13e>
 8007b58:	2b2d      	cmp	r3, #45	; 0x2d
 8007b5a:	d02e      	beq.n	8007bba <__gethex+0x146>
 8007b5c:	1c71      	adds	r1, r6, #1
 8007b5e:	f04f 0900 	mov.w	r9, #0
 8007b62:	7808      	ldrb	r0, [r1, #0]
 8007b64:	f7ff ff70 	bl	8007a48 <__hexdig_fun>
 8007b68:	1e43      	subs	r3, r0, #1
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b18      	cmp	r3, #24
 8007b6e:	d82c      	bhi.n	8007bca <__gethex+0x156>
 8007b70:	f1a0 0210 	sub.w	r2, r0, #16
 8007b74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b78:	f7ff ff66 	bl	8007a48 <__hexdig_fun>
 8007b7c:	1e43      	subs	r3, r0, #1
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b18      	cmp	r3, #24
 8007b82:	d91d      	bls.n	8007bc0 <__gethex+0x14c>
 8007b84:	f1b9 0f00 	cmp.w	r9, #0
 8007b88:	d000      	beq.n	8007b8c <__gethex+0x118>
 8007b8a:	4252      	negs	r2, r2
 8007b8c:	4415      	add	r5, r2
 8007b8e:	f8cb 1000 	str.w	r1, [fp]
 8007b92:	b1e4      	cbz	r4, 8007bce <__gethex+0x15a>
 8007b94:	9b00      	ldr	r3, [sp, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	bf14      	ite	ne
 8007b9a:	2700      	movne	r7, #0
 8007b9c:	2706      	moveq	r7, #6
 8007b9e:	4638      	mov	r0, r7
 8007ba0:	b009      	add	sp, #36	; 0x24
 8007ba2:	ecbd 8b02 	vpop	{d8}
 8007ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007baa:	463e      	mov	r6, r7
 8007bac:	4625      	mov	r5, r4
 8007bae:	2401      	movs	r4, #1
 8007bb0:	e7ca      	b.n	8007b48 <__gethex+0xd4>
 8007bb2:	f04f 0900 	mov.w	r9, #0
 8007bb6:	1cb1      	adds	r1, r6, #2
 8007bb8:	e7d3      	b.n	8007b62 <__gethex+0xee>
 8007bba:	f04f 0901 	mov.w	r9, #1
 8007bbe:	e7fa      	b.n	8007bb6 <__gethex+0x142>
 8007bc0:	230a      	movs	r3, #10
 8007bc2:	fb03 0202 	mla	r2, r3, r2, r0
 8007bc6:	3a10      	subs	r2, #16
 8007bc8:	e7d4      	b.n	8007b74 <__gethex+0x100>
 8007bca:	4631      	mov	r1, r6
 8007bcc:	e7df      	b.n	8007b8e <__gethex+0x11a>
 8007bce:	1bf3      	subs	r3, r6, r7
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	2b07      	cmp	r3, #7
 8007bd6:	dc0b      	bgt.n	8007bf0 <__gethex+0x17c>
 8007bd8:	ee18 0a10 	vmov	r0, s16
 8007bdc:	f000 fa7e 	bl	80080dc <_Balloc>
 8007be0:	4604      	mov	r4, r0
 8007be2:	b940      	cbnz	r0, 8007bf6 <__gethex+0x182>
 8007be4:	4b5d      	ldr	r3, [pc, #372]	; (8007d5c <__gethex+0x2e8>)
 8007be6:	4602      	mov	r2, r0
 8007be8:	21de      	movs	r1, #222	; 0xde
 8007bea:	485d      	ldr	r0, [pc, #372]	; (8007d60 <__gethex+0x2ec>)
 8007bec:	f001 f9c6 	bl	8008f7c <__assert_func>
 8007bf0:	3101      	adds	r1, #1
 8007bf2:	105b      	asrs	r3, r3, #1
 8007bf4:	e7ee      	b.n	8007bd4 <__gethex+0x160>
 8007bf6:	f100 0914 	add.w	r9, r0, #20
 8007bfa:	f04f 0b00 	mov.w	fp, #0
 8007bfe:	f1ca 0301 	rsb	r3, sl, #1
 8007c02:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c06:	f8cd b000 	str.w	fp, [sp]
 8007c0a:	9306      	str	r3, [sp, #24]
 8007c0c:	42b7      	cmp	r7, r6
 8007c0e:	d340      	bcc.n	8007c92 <__gethex+0x21e>
 8007c10:	9802      	ldr	r0, [sp, #8]
 8007c12:	9b00      	ldr	r3, [sp, #0]
 8007c14:	f840 3b04 	str.w	r3, [r0], #4
 8007c18:	eba0 0009 	sub.w	r0, r0, r9
 8007c1c:	1080      	asrs	r0, r0, #2
 8007c1e:	0146      	lsls	r6, r0, #5
 8007c20:	6120      	str	r0, [r4, #16]
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fb4c 	bl	80082c0 <__hi0bits>
 8007c28:	1a30      	subs	r0, r6, r0
 8007c2a:	f8d8 6000 	ldr.w	r6, [r8]
 8007c2e:	42b0      	cmp	r0, r6
 8007c30:	dd63      	ble.n	8007cfa <__gethex+0x286>
 8007c32:	1b87      	subs	r7, r0, r6
 8007c34:	4639      	mov	r1, r7
 8007c36:	4620      	mov	r0, r4
 8007c38:	f000 fef0 	bl	8008a1c <__any_on>
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	b1a8      	cbz	r0, 8007c6c <__gethex+0x1f8>
 8007c40:	1e7b      	subs	r3, r7, #1
 8007c42:	1159      	asrs	r1, r3, #5
 8007c44:	f003 021f 	and.w	r2, r3, #31
 8007c48:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007c4c:	f04f 0a01 	mov.w	sl, #1
 8007c50:	fa0a f202 	lsl.w	r2, sl, r2
 8007c54:	420a      	tst	r2, r1
 8007c56:	d009      	beq.n	8007c6c <__gethex+0x1f8>
 8007c58:	4553      	cmp	r3, sl
 8007c5a:	dd05      	ble.n	8007c68 <__gethex+0x1f4>
 8007c5c:	1eb9      	subs	r1, r7, #2
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f000 fedc 	bl	8008a1c <__any_on>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d145      	bne.n	8007cf4 <__gethex+0x280>
 8007c68:	f04f 0a02 	mov.w	sl, #2
 8007c6c:	4639      	mov	r1, r7
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f7ff fe98 	bl	80079a4 <rshift>
 8007c74:	443d      	add	r5, r7
 8007c76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c7a:	42ab      	cmp	r3, r5
 8007c7c:	da4c      	bge.n	8007d18 <__gethex+0x2a4>
 8007c7e:	ee18 0a10 	vmov	r0, s16
 8007c82:	4621      	mov	r1, r4
 8007c84:	f000 fa6a 	bl	800815c <_Bfree>
 8007c88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	27a3      	movs	r7, #163	; 0xa3
 8007c90:	e785      	b.n	8007b9e <__gethex+0x12a>
 8007c92:	1e73      	subs	r3, r6, #1
 8007c94:	9a05      	ldr	r2, [sp, #20]
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d019      	beq.n	8007cd4 <__gethex+0x260>
 8007ca0:	f1bb 0f20 	cmp.w	fp, #32
 8007ca4:	d107      	bne.n	8007cb6 <__gethex+0x242>
 8007ca6:	9b02      	ldr	r3, [sp, #8]
 8007ca8:	9a00      	ldr	r2, [sp, #0]
 8007caa:	f843 2b04 	str.w	r2, [r3], #4
 8007cae:	9302      	str	r3, [sp, #8]
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	9300      	str	r3, [sp, #0]
 8007cb4:	469b      	mov	fp, r3
 8007cb6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007cba:	f7ff fec5 	bl	8007a48 <__hexdig_fun>
 8007cbe:	9b00      	ldr	r3, [sp, #0]
 8007cc0:	f000 000f 	and.w	r0, r0, #15
 8007cc4:	fa00 f00b 	lsl.w	r0, r0, fp
 8007cc8:	4303      	orrs	r3, r0
 8007cca:	9300      	str	r3, [sp, #0]
 8007ccc:	f10b 0b04 	add.w	fp, fp, #4
 8007cd0:	9b03      	ldr	r3, [sp, #12]
 8007cd2:	e00d      	b.n	8007cf0 <__gethex+0x27c>
 8007cd4:	9b03      	ldr	r3, [sp, #12]
 8007cd6:	9a06      	ldr	r2, [sp, #24]
 8007cd8:	4413      	add	r3, r2
 8007cda:	42bb      	cmp	r3, r7
 8007cdc:	d3e0      	bcc.n	8007ca0 <__gethex+0x22c>
 8007cde:	4618      	mov	r0, r3
 8007ce0:	9901      	ldr	r1, [sp, #4]
 8007ce2:	9307      	str	r3, [sp, #28]
 8007ce4:	4652      	mov	r2, sl
 8007ce6:	f001 f927 	bl	8008f38 <strncmp>
 8007cea:	9b07      	ldr	r3, [sp, #28]
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d1d7      	bne.n	8007ca0 <__gethex+0x22c>
 8007cf0:	461e      	mov	r6, r3
 8007cf2:	e78b      	b.n	8007c0c <__gethex+0x198>
 8007cf4:	f04f 0a03 	mov.w	sl, #3
 8007cf8:	e7b8      	b.n	8007c6c <__gethex+0x1f8>
 8007cfa:	da0a      	bge.n	8007d12 <__gethex+0x29e>
 8007cfc:	1a37      	subs	r7, r6, r0
 8007cfe:	4621      	mov	r1, r4
 8007d00:	ee18 0a10 	vmov	r0, s16
 8007d04:	463a      	mov	r2, r7
 8007d06:	f000 fc45 	bl	8008594 <__lshift>
 8007d0a:	1bed      	subs	r5, r5, r7
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	f100 0914 	add.w	r9, r0, #20
 8007d12:	f04f 0a00 	mov.w	sl, #0
 8007d16:	e7ae      	b.n	8007c76 <__gethex+0x202>
 8007d18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007d1c:	42a8      	cmp	r0, r5
 8007d1e:	dd72      	ble.n	8007e06 <__gethex+0x392>
 8007d20:	1b45      	subs	r5, r0, r5
 8007d22:	42ae      	cmp	r6, r5
 8007d24:	dc36      	bgt.n	8007d94 <__gethex+0x320>
 8007d26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d02a      	beq.n	8007d84 <__gethex+0x310>
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d02c      	beq.n	8007d8c <__gethex+0x318>
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d11c      	bne.n	8007d70 <__gethex+0x2fc>
 8007d36:	42ae      	cmp	r6, r5
 8007d38:	d11a      	bne.n	8007d70 <__gethex+0x2fc>
 8007d3a:	2e01      	cmp	r6, #1
 8007d3c:	d112      	bne.n	8007d64 <__gethex+0x2f0>
 8007d3e:	9a04      	ldr	r2, [sp, #16]
 8007d40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d44:	6013      	str	r3, [r2, #0]
 8007d46:	2301      	movs	r3, #1
 8007d48:	6123      	str	r3, [r4, #16]
 8007d4a:	f8c9 3000 	str.w	r3, [r9]
 8007d4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d50:	2762      	movs	r7, #98	; 0x62
 8007d52:	601c      	str	r4, [r3, #0]
 8007d54:	e723      	b.n	8007b9e <__gethex+0x12a>
 8007d56:	bf00      	nop
 8007d58:	08009db8 	.word	0x08009db8
 8007d5c:	08009d40 	.word	0x08009d40
 8007d60:	08009d51 	.word	0x08009d51
 8007d64:	1e71      	subs	r1, r6, #1
 8007d66:	4620      	mov	r0, r4
 8007d68:	f000 fe58 	bl	8008a1c <__any_on>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d1e6      	bne.n	8007d3e <__gethex+0x2ca>
 8007d70:	ee18 0a10 	vmov	r0, s16
 8007d74:	4621      	mov	r1, r4
 8007d76:	f000 f9f1 	bl	800815c <_Bfree>
 8007d7a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	6013      	str	r3, [r2, #0]
 8007d80:	2750      	movs	r7, #80	; 0x50
 8007d82:	e70c      	b.n	8007b9e <__gethex+0x12a>
 8007d84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1f2      	bne.n	8007d70 <__gethex+0x2fc>
 8007d8a:	e7d8      	b.n	8007d3e <__gethex+0x2ca>
 8007d8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d1d5      	bne.n	8007d3e <__gethex+0x2ca>
 8007d92:	e7ed      	b.n	8007d70 <__gethex+0x2fc>
 8007d94:	1e6f      	subs	r7, r5, #1
 8007d96:	f1ba 0f00 	cmp.w	sl, #0
 8007d9a:	d131      	bne.n	8007e00 <__gethex+0x38c>
 8007d9c:	b127      	cbz	r7, 8007da8 <__gethex+0x334>
 8007d9e:	4639      	mov	r1, r7
 8007da0:	4620      	mov	r0, r4
 8007da2:	f000 fe3b 	bl	8008a1c <__any_on>
 8007da6:	4682      	mov	sl, r0
 8007da8:	117b      	asrs	r3, r7, #5
 8007daa:	2101      	movs	r1, #1
 8007dac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007db0:	f007 071f 	and.w	r7, r7, #31
 8007db4:	fa01 f707 	lsl.w	r7, r1, r7
 8007db8:	421f      	tst	r7, r3
 8007dba:	4629      	mov	r1, r5
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	bf18      	it	ne
 8007dc0:	f04a 0a02 	orrne.w	sl, sl, #2
 8007dc4:	1b76      	subs	r6, r6, r5
 8007dc6:	f7ff fded 	bl	80079a4 <rshift>
 8007dca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007dce:	2702      	movs	r7, #2
 8007dd0:	f1ba 0f00 	cmp.w	sl, #0
 8007dd4:	d048      	beq.n	8007e68 <__gethex+0x3f4>
 8007dd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d015      	beq.n	8007e0a <__gethex+0x396>
 8007dde:	2b03      	cmp	r3, #3
 8007de0:	d017      	beq.n	8007e12 <__gethex+0x39e>
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d109      	bne.n	8007dfa <__gethex+0x386>
 8007de6:	f01a 0f02 	tst.w	sl, #2
 8007dea:	d006      	beq.n	8007dfa <__gethex+0x386>
 8007dec:	f8d9 0000 	ldr.w	r0, [r9]
 8007df0:	ea4a 0a00 	orr.w	sl, sl, r0
 8007df4:	f01a 0f01 	tst.w	sl, #1
 8007df8:	d10e      	bne.n	8007e18 <__gethex+0x3a4>
 8007dfa:	f047 0710 	orr.w	r7, r7, #16
 8007dfe:	e033      	b.n	8007e68 <__gethex+0x3f4>
 8007e00:	f04f 0a01 	mov.w	sl, #1
 8007e04:	e7d0      	b.n	8007da8 <__gethex+0x334>
 8007e06:	2701      	movs	r7, #1
 8007e08:	e7e2      	b.n	8007dd0 <__gethex+0x35c>
 8007e0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e0c:	f1c3 0301 	rsb	r3, r3, #1
 8007e10:	9315      	str	r3, [sp, #84]	; 0x54
 8007e12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d0f0      	beq.n	8007dfa <__gethex+0x386>
 8007e18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007e1c:	f104 0314 	add.w	r3, r4, #20
 8007e20:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007e24:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007e28:	f04f 0c00 	mov.w	ip, #0
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e32:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007e36:	d01c      	beq.n	8007e72 <__gethex+0x3fe>
 8007e38:	3201      	adds	r2, #1
 8007e3a:	6002      	str	r2, [r0, #0]
 8007e3c:	2f02      	cmp	r7, #2
 8007e3e:	f104 0314 	add.w	r3, r4, #20
 8007e42:	d13f      	bne.n	8007ec4 <__gethex+0x450>
 8007e44:	f8d8 2000 	ldr.w	r2, [r8]
 8007e48:	3a01      	subs	r2, #1
 8007e4a:	42b2      	cmp	r2, r6
 8007e4c:	d10a      	bne.n	8007e64 <__gethex+0x3f0>
 8007e4e:	1171      	asrs	r1, r6, #5
 8007e50:	2201      	movs	r2, #1
 8007e52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e56:	f006 061f 	and.w	r6, r6, #31
 8007e5a:	fa02 f606 	lsl.w	r6, r2, r6
 8007e5e:	421e      	tst	r6, r3
 8007e60:	bf18      	it	ne
 8007e62:	4617      	movne	r7, r2
 8007e64:	f047 0720 	orr.w	r7, r7, #32
 8007e68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e6a:	601c      	str	r4, [r3, #0]
 8007e6c:	9b04      	ldr	r3, [sp, #16]
 8007e6e:	601d      	str	r5, [r3, #0]
 8007e70:	e695      	b.n	8007b9e <__gethex+0x12a>
 8007e72:	4299      	cmp	r1, r3
 8007e74:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e78:	d8d8      	bhi.n	8007e2c <__gethex+0x3b8>
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	459b      	cmp	fp, r3
 8007e7e:	db19      	blt.n	8007eb4 <__gethex+0x440>
 8007e80:	6861      	ldr	r1, [r4, #4]
 8007e82:	ee18 0a10 	vmov	r0, s16
 8007e86:	3101      	adds	r1, #1
 8007e88:	f000 f928 	bl	80080dc <_Balloc>
 8007e8c:	4681      	mov	r9, r0
 8007e8e:	b918      	cbnz	r0, 8007e98 <__gethex+0x424>
 8007e90:	4b1a      	ldr	r3, [pc, #104]	; (8007efc <__gethex+0x488>)
 8007e92:	4602      	mov	r2, r0
 8007e94:	2184      	movs	r1, #132	; 0x84
 8007e96:	e6a8      	b.n	8007bea <__gethex+0x176>
 8007e98:	6922      	ldr	r2, [r4, #16]
 8007e9a:	3202      	adds	r2, #2
 8007e9c:	f104 010c 	add.w	r1, r4, #12
 8007ea0:	0092      	lsls	r2, r2, #2
 8007ea2:	300c      	adds	r0, #12
 8007ea4:	f000 f90c 	bl	80080c0 <memcpy>
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	ee18 0a10 	vmov	r0, s16
 8007eae:	f000 f955 	bl	800815c <_Bfree>
 8007eb2:	464c      	mov	r4, r9
 8007eb4:	6923      	ldr	r3, [r4, #16]
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ebc:	6122      	str	r2, [r4, #16]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	615a      	str	r2, [r3, #20]
 8007ec2:	e7bb      	b.n	8007e3c <__gethex+0x3c8>
 8007ec4:	6922      	ldr	r2, [r4, #16]
 8007ec6:	455a      	cmp	r2, fp
 8007ec8:	dd0b      	ble.n	8007ee2 <__gethex+0x46e>
 8007eca:	2101      	movs	r1, #1
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f7ff fd69 	bl	80079a4 <rshift>
 8007ed2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007ed6:	3501      	adds	r5, #1
 8007ed8:	42ab      	cmp	r3, r5
 8007eda:	f6ff aed0 	blt.w	8007c7e <__gethex+0x20a>
 8007ede:	2701      	movs	r7, #1
 8007ee0:	e7c0      	b.n	8007e64 <__gethex+0x3f0>
 8007ee2:	f016 061f 	ands.w	r6, r6, #31
 8007ee6:	d0fa      	beq.n	8007ede <__gethex+0x46a>
 8007ee8:	4453      	add	r3, sl
 8007eea:	f1c6 0620 	rsb	r6, r6, #32
 8007eee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007ef2:	f000 f9e5 	bl	80082c0 <__hi0bits>
 8007ef6:	42b0      	cmp	r0, r6
 8007ef8:	dbe7      	blt.n	8007eca <__gethex+0x456>
 8007efa:	e7f0      	b.n	8007ede <__gethex+0x46a>
 8007efc:	08009d40 	.word	0x08009d40

08007f00 <L_shift>:
 8007f00:	f1c2 0208 	rsb	r2, r2, #8
 8007f04:	0092      	lsls	r2, r2, #2
 8007f06:	b570      	push	{r4, r5, r6, lr}
 8007f08:	f1c2 0620 	rsb	r6, r2, #32
 8007f0c:	6843      	ldr	r3, [r0, #4]
 8007f0e:	6804      	ldr	r4, [r0, #0]
 8007f10:	fa03 f506 	lsl.w	r5, r3, r6
 8007f14:	432c      	orrs	r4, r5
 8007f16:	40d3      	lsrs	r3, r2
 8007f18:	6004      	str	r4, [r0, #0]
 8007f1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8007f1e:	4288      	cmp	r0, r1
 8007f20:	d3f4      	bcc.n	8007f0c <L_shift+0xc>
 8007f22:	bd70      	pop	{r4, r5, r6, pc}

08007f24 <__match>:
 8007f24:	b530      	push	{r4, r5, lr}
 8007f26:	6803      	ldr	r3, [r0, #0]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f2e:	b914      	cbnz	r4, 8007f36 <__match+0x12>
 8007f30:	6003      	str	r3, [r0, #0]
 8007f32:	2001      	movs	r0, #1
 8007f34:	bd30      	pop	{r4, r5, pc}
 8007f36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007f3e:	2d19      	cmp	r5, #25
 8007f40:	bf98      	it	ls
 8007f42:	3220      	addls	r2, #32
 8007f44:	42a2      	cmp	r2, r4
 8007f46:	d0f0      	beq.n	8007f2a <__match+0x6>
 8007f48:	2000      	movs	r0, #0
 8007f4a:	e7f3      	b.n	8007f34 <__match+0x10>

08007f4c <__hexnan>:
 8007f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f50:	680b      	ldr	r3, [r1, #0]
 8007f52:	115e      	asrs	r6, r3, #5
 8007f54:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007f58:	f013 031f 	ands.w	r3, r3, #31
 8007f5c:	b087      	sub	sp, #28
 8007f5e:	bf18      	it	ne
 8007f60:	3604      	addne	r6, #4
 8007f62:	2500      	movs	r5, #0
 8007f64:	1f37      	subs	r7, r6, #4
 8007f66:	4690      	mov	r8, r2
 8007f68:	6802      	ldr	r2, [r0, #0]
 8007f6a:	9301      	str	r3, [sp, #4]
 8007f6c:	4682      	mov	sl, r0
 8007f6e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007f72:	46b9      	mov	r9, r7
 8007f74:	463c      	mov	r4, r7
 8007f76:	9502      	str	r5, [sp, #8]
 8007f78:	46ab      	mov	fp, r5
 8007f7a:	7851      	ldrb	r1, [r2, #1]
 8007f7c:	1c53      	adds	r3, r2, #1
 8007f7e:	9303      	str	r3, [sp, #12]
 8007f80:	b341      	cbz	r1, 8007fd4 <__hexnan+0x88>
 8007f82:	4608      	mov	r0, r1
 8007f84:	9205      	str	r2, [sp, #20]
 8007f86:	9104      	str	r1, [sp, #16]
 8007f88:	f7ff fd5e 	bl	8007a48 <__hexdig_fun>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	d14f      	bne.n	8008030 <__hexnan+0xe4>
 8007f90:	9904      	ldr	r1, [sp, #16]
 8007f92:	9a05      	ldr	r2, [sp, #20]
 8007f94:	2920      	cmp	r1, #32
 8007f96:	d818      	bhi.n	8007fca <__hexnan+0x7e>
 8007f98:	9b02      	ldr	r3, [sp, #8]
 8007f9a:	459b      	cmp	fp, r3
 8007f9c:	dd13      	ble.n	8007fc6 <__hexnan+0x7a>
 8007f9e:	454c      	cmp	r4, r9
 8007fa0:	d206      	bcs.n	8007fb0 <__hexnan+0x64>
 8007fa2:	2d07      	cmp	r5, #7
 8007fa4:	dc04      	bgt.n	8007fb0 <__hexnan+0x64>
 8007fa6:	462a      	mov	r2, r5
 8007fa8:	4649      	mov	r1, r9
 8007faa:	4620      	mov	r0, r4
 8007fac:	f7ff ffa8 	bl	8007f00 <L_shift>
 8007fb0:	4544      	cmp	r4, r8
 8007fb2:	d950      	bls.n	8008056 <__hexnan+0x10a>
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	f1a4 0904 	sub.w	r9, r4, #4
 8007fba:	f844 3c04 	str.w	r3, [r4, #-4]
 8007fbe:	f8cd b008 	str.w	fp, [sp, #8]
 8007fc2:	464c      	mov	r4, r9
 8007fc4:	461d      	mov	r5, r3
 8007fc6:	9a03      	ldr	r2, [sp, #12]
 8007fc8:	e7d7      	b.n	8007f7a <__hexnan+0x2e>
 8007fca:	2929      	cmp	r1, #41	; 0x29
 8007fcc:	d156      	bne.n	800807c <__hexnan+0x130>
 8007fce:	3202      	adds	r2, #2
 8007fd0:	f8ca 2000 	str.w	r2, [sl]
 8007fd4:	f1bb 0f00 	cmp.w	fp, #0
 8007fd8:	d050      	beq.n	800807c <__hexnan+0x130>
 8007fda:	454c      	cmp	r4, r9
 8007fdc:	d206      	bcs.n	8007fec <__hexnan+0xa0>
 8007fde:	2d07      	cmp	r5, #7
 8007fe0:	dc04      	bgt.n	8007fec <__hexnan+0xa0>
 8007fe2:	462a      	mov	r2, r5
 8007fe4:	4649      	mov	r1, r9
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f7ff ff8a 	bl	8007f00 <L_shift>
 8007fec:	4544      	cmp	r4, r8
 8007fee:	d934      	bls.n	800805a <__hexnan+0x10e>
 8007ff0:	f1a8 0204 	sub.w	r2, r8, #4
 8007ff4:	4623      	mov	r3, r4
 8007ff6:	f853 1b04 	ldr.w	r1, [r3], #4
 8007ffa:	f842 1f04 	str.w	r1, [r2, #4]!
 8007ffe:	429f      	cmp	r7, r3
 8008000:	d2f9      	bcs.n	8007ff6 <__hexnan+0xaa>
 8008002:	1b3b      	subs	r3, r7, r4
 8008004:	f023 0303 	bic.w	r3, r3, #3
 8008008:	3304      	adds	r3, #4
 800800a:	3401      	adds	r4, #1
 800800c:	3e03      	subs	r6, #3
 800800e:	42b4      	cmp	r4, r6
 8008010:	bf88      	it	hi
 8008012:	2304      	movhi	r3, #4
 8008014:	4443      	add	r3, r8
 8008016:	2200      	movs	r2, #0
 8008018:	f843 2b04 	str.w	r2, [r3], #4
 800801c:	429f      	cmp	r7, r3
 800801e:	d2fb      	bcs.n	8008018 <__hexnan+0xcc>
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	b91b      	cbnz	r3, 800802c <__hexnan+0xe0>
 8008024:	4547      	cmp	r7, r8
 8008026:	d127      	bne.n	8008078 <__hexnan+0x12c>
 8008028:	2301      	movs	r3, #1
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	2005      	movs	r0, #5
 800802e:	e026      	b.n	800807e <__hexnan+0x132>
 8008030:	3501      	adds	r5, #1
 8008032:	2d08      	cmp	r5, #8
 8008034:	f10b 0b01 	add.w	fp, fp, #1
 8008038:	dd06      	ble.n	8008048 <__hexnan+0xfc>
 800803a:	4544      	cmp	r4, r8
 800803c:	d9c3      	bls.n	8007fc6 <__hexnan+0x7a>
 800803e:	2300      	movs	r3, #0
 8008040:	f844 3c04 	str.w	r3, [r4, #-4]
 8008044:	2501      	movs	r5, #1
 8008046:	3c04      	subs	r4, #4
 8008048:	6822      	ldr	r2, [r4, #0]
 800804a:	f000 000f 	and.w	r0, r0, #15
 800804e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008052:	6022      	str	r2, [r4, #0]
 8008054:	e7b7      	b.n	8007fc6 <__hexnan+0x7a>
 8008056:	2508      	movs	r5, #8
 8008058:	e7b5      	b.n	8007fc6 <__hexnan+0x7a>
 800805a:	9b01      	ldr	r3, [sp, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d0df      	beq.n	8008020 <__hexnan+0xd4>
 8008060:	f04f 32ff 	mov.w	r2, #4294967295
 8008064:	f1c3 0320 	rsb	r3, r3, #32
 8008068:	fa22 f303 	lsr.w	r3, r2, r3
 800806c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008070:	401a      	ands	r2, r3
 8008072:	f846 2c04 	str.w	r2, [r6, #-4]
 8008076:	e7d3      	b.n	8008020 <__hexnan+0xd4>
 8008078:	3f04      	subs	r7, #4
 800807a:	e7d1      	b.n	8008020 <__hexnan+0xd4>
 800807c:	2004      	movs	r0, #4
 800807e:	b007      	add	sp, #28
 8008080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008084 <_localeconv_r>:
 8008084:	4800      	ldr	r0, [pc, #0]	; (8008088 <_localeconv_r+0x4>)
 8008086:	4770      	bx	lr
 8008088:	2000016c 	.word	0x2000016c

0800808c <malloc>:
 800808c:	4b02      	ldr	r3, [pc, #8]	; (8008098 <malloc+0xc>)
 800808e:	4601      	mov	r1, r0
 8008090:	6818      	ldr	r0, [r3, #0]
 8008092:	f000 bd67 	b.w	8008b64 <_malloc_r>
 8008096:	bf00      	nop
 8008098:	20000014 	.word	0x20000014

0800809c <__ascii_mbtowc>:
 800809c:	b082      	sub	sp, #8
 800809e:	b901      	cbnz	r1, 80080a2 <__ascii_mbtowc+0x6>
 80080a0:	a901      	add	r1, sp, #4
 80080a2:	b142      	cbz	r2, 80080b6 <__ascii_mbtowc+0x1a>
 80080a4:	b14b      	cbz	r3, 80080ba <__ascii_mbtowc+0x1e>
 80080a6:	7813      	ldrb	r3, [r2, #0]
 80080a8:	600b      	str	r3, [r1, #0]
 80080aa:	7812      	ldrb	r2, [r2, #0]
 80080ac:	1e10      	subs	r0, r2, #0
 80080ae:	bf18      	it	ne
 80080b0:	2001      	movne	r0, #1
 80080b2:	b002      	add	sp, #8
 80080b4:	4770      	bx	lr
 80080b6:	4610      	mov	r0, r2
 80080b8:	e7fb      	b.n	80080b2 <__ascii_mbtowc+0x16>
 80080ba:	f06f 0001 	mvn.w	r0, #1
 80080be:	e7f8      	b.n	80080b2 <__ascii_mbtowc+0x16>

080080c0 <memcpy>:
 80080c0:	440a      	add	r2, r1
 80080c2:	4291      	cmp	r1, r2
 80080c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080c8:	d100      	bne.n	80080cc <memcpy+0xc>
 80080ca:	4770      	bx	lr
 80080cc:	b510      	push	{r4, lr}
 80080ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080d6:	4291      	cmp	r1, r2
 80080d8:	d1f9      	bne.n	80080ce <memcpy+0xe>
 80080da:	bd10      	pop	{r4, pc}

080080dc <_Balloc>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080e0:	4604      	mov	r4, r0
 80080e2:	460d      	mov	r5, r1
 80080e4:	b976      	cbnz	r6, 8008104 <_Balloc+0x28>
 80080e6:	2010      	movs	r0, #16
 80080e8:	f7ff ffd0 	bl	800808c <malloc>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6260      	str	r0, [r4, #36]	; 0x24
 80080f0:	b920      	cbnz	r0, 80080fc <_Balloc+0x20>
 80080f2:	4b18      	ldr	r3, [pc, #96]	; (8008154 <_Balloc+0x78>)
 80080f4:	4818      	ldr	r0, [pc, #96]	; (8008158 <_Balloc+0x7c>)
 80080f6:	2166      	movs	r1, #102	; 0x66
 80080f8:	f000 ff40 	bl	8008f7c <__assert_func>
 80080fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008100:	6006      	str	r6, [r0, #0]
 8008102:	60c6      	str	r6, [r0, #12]
 8008104:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008106:	68f3      	ldr	r3, [r6, #12]
 8008108:	b183      	cbz	r3, 800812c <_Balloc+0x50>
 800810a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008112:	b9b8      	cbnz	r0, 8008144 <_Balloc+0x68>
 8008114:	2101      	movs	r1, #1
 8008116:	fa01 f605 	lsl.w	r6, r1, r5
 800811a:	1d72      	adds	r2, r6, #5
 800811c:	0092      	lsls	r2, r2, #2
 800811e:	4620      	mov	r0, r4
 8008120:	f000 fc9d 	bl	8008a5e <_calloc_r>
 8008124:	b160      	cbz	r0, 8008140 <_Balloc+0x64>
 8008126:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800812a:	e00e      	b.n	800814a <_Balloc+0x6e>
 800812c:	2221      	movs	r2, #33	; 0x21
 800812e:	2104      	movs	r1, #4
 8008130:	4620      	mov	r0, r4
 8008132:	f000 fc94 	bl	8008a5e <_calloc_r>
 8008136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008138:	60f0      	str	r0, [r6, #12]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1e4      	bne.n	800810a <_Balloc+0x2e>
 8008140:	2000      	movs	r0, #0
 8008142:	bd70      	pop	{r4, r5, r6, pc}
 8008144:	6802      	ldr	r2, [r0, #0]
 8008146:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800814a:	2300      	movs	r3, #0
 800814c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008150:	e7f7      	b.n	8008142 <_Balloc+0x66>
 8008152:	bf00      	nop
 8008154:	08009cce 	.word	0x08009cce
 8008158:	08009dcc 	.word	0x08009dcc

0800815c <_Bfree>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008160:	4605      	mov	r5, r0
 8008162:	460c      	mov	r4, r1
 8008164:	b976      	cbnz	r6, 8008184 <_Bfree+0x28>
 8008166:	2010      	movs	r0, #16
 8008168:	f7ff ff90 	bl	800808c <malloc>
 800816c:	4602      	mov	r2, r0
 800816e:	6268      	str	r0, [r5, #36]	; 0x24
 8008170:	b920      	cbnz	r0, 800817c <_Bfree+0x20>
 8008172:	4b09      	ldr	r3, [pc, #36]	; (8008198 <_Bfree+0x3c>)
 8008174:	4809      	ldr	r0, [pc, #36]	; (800819c <_Bfree+0x40>)
 8008176:	218a      	movs	r1, #138	; 0x8a
 8008178:	f000 ff00 	bl	8008f7c <__assert_func>
 800817c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008180:	6006      	str	r6, [r0, #0]
 8008182:	60c6      	str	r6, [r0, #12]
 8008184:	b13c      	cbz	r4, 8008196 <_Bfree+0x3a>
 8008186:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008188:	6862      	ldr	r2, [r4, #4]
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008190:	6021      	str	r1, [r4, #0]
 8008192:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	08009cce 	.word	0x08009cce
 800819c:	08009dcc 	.word	0x08009dcc

080081a0 <__multadd>:
 80081a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081a4:	690d      	ldr	r5, [r1, #16]
 80081a6:	4607      	mov	r7, r0
 80081a8:	460c      	mov	r4, r1
 80081aa:	461e      	mov	r6, r3
 80081ac:	f101 0c14 	add.w	ip, r1, #20
 80081b0:	2000      	movs	r0, #0
 80081b2:	f8dc 3000 	ldr.w	r3, [ip]
 80081b6:	b299      	uxth	r1, r3
 80081b8:	fb02 6101 	mla	r1, r2, r1, r6
 80081bc:	0c1e      	lsrs	r6, r3, #16
 80081be:	0c0b      	lsrs	r3, r1, #16
 80081c0:	fb02 3306 	mla	r3, r2, r6, r3
 80081c4:	b289      	uxth	r1, r1
 80081c6:	3001      	adds	r0, #1
 80081c8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081cc:	4285      	cmp	r5, r0
 80081ce:	f84c 1b04 	str.w	r1, [ip], #4
 80081d2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081d6:	dcec      	bgt.n	80081b2 <__multadd+0x12>
 80081d8:	b30e      	cbz	r6, 800821e <__multadd+0x7e>
 80081da:	68a3      	ldr	r3, [r4, #8]
 80081dc:	42ab      	cmp	r3, r5
 80081de:	dc19      	bgt.n	8008214 <__multadd+0x74>
 80081e0:	6861      	ldr	r1, [r4, #4]
 80081e2:	4638      	mov	r0, r7
 80081e4:	3101      	adds	r1, #1
 80081e6:	f7ff ff79 	bl	80080dc <_Balloc>
 80081ea:	4680      	mov	r8, r0
 80081ec:	b928      	cbnz	r0, 80081fa <__multadd+0x5a>
 80081ee:	4602      	mov	r2, r0
 80081f0:	4b0c      	ldr	r3, [pc, #48]	; (8008224 <__multadd+0x84>)
 80081f2:	480d      	ldr	r0, [pc, #52]	; (8008228 <__multadd+0x88>)
 80081f4:	21b5      	movs	r1, #181	; 0xb5
 80081f6:	f000 fec1 	bl	8008f7c <__assert_func>
 80081fa:	6922      	ldr	r2, [r4, #16]
 80081fc:	3202      	adds	r2, #2
 80081fe:	f104 010c 	add.w	r1, r4, #12
 8008202:	0092      	lsls	r2, r2, #2
 8008204:	300c      	adds	r0, #12
 8008206:	f7ff ff5b 	bl	80080c0 <memcpy>
 800820a:	4621      	mov	r1, r4
 800820c:	4638      	mov	r0, r7
 800820e:	f7ff ffa5 	bl	800815c <_Bfree>
 8008212:	4644      	mov	r4, r8
 8008214:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008218:	3501      	adds	r5, #1
 800821a:	615e      	str	r6, [r3, #20]
 800821c:	6125      	str	r5, [r4, #16]
 800821e:	4620      	mov	r0, r4
 8008220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008224:	08009d40 	.word	0x08009d40
 8008228:	08009dcc 	.word	0x08009dcc

0800822c <__s2b>:
 800822c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008230:	460c      	mov	r4, r1
 8008232:	4615      	mov	r5, r2
 8008234:	461f      	mov	r7, r3
 8008236:	2209      	movs	r2, #9
 8008238:	3308      	adds	r3, #8
 800823a:	4606      	mov	r6, r0
 800823c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008240:	2100      	movs	r1, #0
 8008242:	2201      	movs	r2, #1
 8008244:	429a      	cmp	r2, r3
 8008246:	db09      	blt.n	800825c <__s2b+0x30>
 8008248:	4630      	mov	r0, r6
 800824a:	f7ff ff47 	bl	80080dc <_Balloc>
 800824e:	b940      	cbnz	r0, 8008262 <__s2b+0x36>
 8008250:	4602      	mov	r2, r0
 8008252:	4b19      	ldr	r3, [pc, #100]	; (80082b8 <__s2b+0x8c>)
 8008254:	4819      	ldr	r0, [pc, #100]	; (80082bc <__s2b+0x90>)
 8008256:	21ce      	movs	r1, #206	; 0xce
 8008258:	f000 fe90 	bl	8008f7c <__assert_func>
 800825c:	0052      	lsls	r2, r2, #1
 800825e:	3101      	adds	r1, #1
 8008260:	e7f0      	b.n	8008244 <__s2b+0x18>
 8008262:	9b08      	ldr	r3, [sp, #32]
 8008264:	6143      	str	r3, [r0, #20]
 8008266:	2d09      	cmp	r5, #9
 8008268:	f04f 0301 	mov.w	r3, #1
 800826c:	6103      	str	r3, [r0, #16]
 800826e:	dd16      	ble.n	800829e <__s2b+0x72>
 8008270:	f104 0909 	add.w	r9, r4, #9
 8008274:	46c8      	mov	r8, r9
 8008276:	442c      	add	r4, r5
 8008278:	f818 3b01 	ldrb.w	r3, [r8], #1
 800827c:	4601      	mov	r1, r0
 800827e:	3b30      	subs	r3, #48	; 0x30
 8008280:	220a      	movs	r2, #10
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff ff8c 	bl	80081a0 <__multadd>
 8008288:	45a0      	cmp	r8, r4
 800828a:	d1f5      	bne.n	8008278 <__s2b+0x4c>
 800828c:	f1a5 0408 	sub.w	r4, r5, #8
 8008290:	444c      	add	r4, r9
 8008292:	1b2d      	subs	r5, r5, r4
 8008294:	1963      	adds	r3, r4, r5
 8008296:	42bb      	cmp	r3, r7
 8008298:	db04      	blt.n	80082a4 <__s2b+0x78>
 800829a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800829e:	340a      	adds	r4, #10
 80082a0:	2509      	movs	r5, #9
 80082a2:	e7f6      	b.n	8008292 <__s2b+0x66>
 80082a4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80082a8:	4601      	mov	r1, r0
 80082aa:	3b30      	subs	r3, #48	; 0x30
 80082ac:	220a      	movs	r2, #10
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7ff ff76 	bl	80081a0 <__multadd>
 80082b4:	e7ee      	b.n	8008294 <__s2b+0x68>
 80082b6:	bf00      	nop
 80082b8:	08009d40 	.word	0x08009d40
 80082bc:	08009dcc 	.word	0x08009dcc

080082c0 <__hi0bits>:
 80082c0:	0c03      	lsrs	r3, r0, #16
 80082c2:	041b      	lsls	r3, r3, #16
 80082c4:	b9d3      	cbnz	r3, 80082fc <__hi0bits+0x3c>
 80082c6:	0400      	lsls	r0, r0, #16
 80082c8:	2310      	movs	r3, #16
 80082ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80082ce:	bf04      	itt	eq
 80082d0:	0200      	lsleq	r0, r0, #8
 80082d2:	3308      	addeq	r3, #8
 80082d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082d8:	bf04      	itt	eq
 80082da:	0100      	lsleq	r0, r0, #4
 80082dc:	3304      	addeq	r3, #4
 80082de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082e2:	bf04      	itt	eq
 80082e4:	0080      	lsleq	r0, r0, #2
 80082e6:	3302      	addeq	r3, #2
 80082e8:	2800      	cmp	r0, #0
 80082ea:	db05      	blt.n	80082f8 <__hi0bits+0x38>
 80082ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082f0:	f103 0301 	add.w	r3, r3, #1
 80082f4:	bf08      	it	eq
 80082f6:	2320      	moveq	r3, #32
 80082f8:	4618      	mov	r0, r3
 80082fa:	4770      	bx	lr
 80082fc:	2300      	movs	r3, #0
 80082fe:	e7e4      	b.n	80082ca <__hi0bits+0xa>

08008300 <__lo0bits>:
 8008300:	6803      	ldr	r3, [r0, #0]
 8008302:	f013 0207 	ands.w	r2, r3, #7
 8008306:	4601      	mov	r1, r0
 8008308:	d00b      	beq.n	8008322 <__lo0bits+0x22>
 800830a:	07da      	lsls	r2, r3, #31
 800830c:	d423      	bmi.n	8008356 <__lo0bits+0x56>
 800830e:	0798      	lsls	r0, r3, #30
 8008310:	bf49      	itett	mi
 8008312:	085b      	lsrmi	r3, r3, #1
 8008314:	089b      	lsrpl	r3, r3, #2
 8008316:	2001      	movmi	r0, #1
 8008318:	600b      	strmi	r3, [r1, #0]
 800831a:	bf5c      	itt	pl
 800831c:	600b      	strpl	r3, [r1, #0]
 800831e:	2002      	movpl	r0, #2
 8008320:	4770      	bx	lr
 8008322:	b298      	uxth	r0, r3
 8008324:	b9a8      	cbnz	r0, 8008352 <__lo0bits+0x52>
 8008326:	0c1b      	lsrs	r3, r3, #16
 8008328:	2010      	movs	r0, #16
 800832a:	b2da      	uxtb	r2, r3
 800832c:	b90a      	cbnz	r2, 8008332 <__lo0bits+0x32>
 800832e:	3008      	adds	r0, #8
 8008330:	0a1b      	lsrs	r3, r3, #8
 8008332:	071a      	lsls	r2, r3, #28
 8008334:	bf04      	itt	eq
 8008336:	091b      	lsreq	r3, r3, #4
 8008338:	3004      	addeq	r0, #4
 800833a:	079a      	lsls	r2, r3, #30
 800833c:	bf04      	itt	eq
 800833e:	089b      	lsreq	r3, r3, #2
 8008340:	3002      	addeq	r0, #2
 8008342:	07da      	lsls	r2, r3, #31
 8008344:	d403      	bmi.n	800834e <__lo0bits+0x4e>
 8008346:	085b      	lsrs	r3, r3, #1
 8008348:	f100 0001 	add.w	r0, r0, #1
 800834c:	d005      	beq.n	800835a <__lo0bits+0x5a>
 800834e:	600b      	str	r3, [r1, #0]
 8008350:	4770      	bx	lr
 8008352:	4610      	mov	r0, r2
 8008354:	e7e9      	b.n	800832a <__lo0bits+0x2a>
 8008356:	2000      	movs	r0, #0
 8008358:	4770      	bx	lr
 800835a:	2020      	movs	r0, #32
 800835c:	4770      	bx	lr
	...

08008360 <__i2b>:
 8008360:	b510      	push	{r4, lr}
 8008362:	460c      	mov	r4, r1
 8008364:	2101      	movs	r1, #1
 8008366:	f7ff feb9 	bl	80080dc <_Balloc>
 800836a:	4602      	mov	r2, r0
 800836c:	b928      	cbnz	r0, 800837a <__i2b+0x1a>
 800836e:	4b05      	ldr	r3, [pc, #20]	; (8008384 <__i2b+0x24>)
 8008370:	4805      	ldr	r0, [pc, #20]	; (8008388 <__i2b+0x28>)
 8008372:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008376:	f000 fe01 	bl	8008f7c <__assert_func>
 800837a:	2301      	movs	r3, #1
 800837c:	6144      	str	r4, [r0, #20]
 800837e:	6103      	str	r3, [r0, #16]
 8008380:	bd10      	pop	{r4, pc}
 8008382:	bf00      	nop
 8008384:	08009d40 	.word	0x08009d40
 8008388:	08009dcc 	.word	0x08009dcc

0800838c <__multiply>:
 800838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	4691      	mov	r9, r2
 8008392:	690a      	ldr	r2, [r1, #16]
 8008394:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008398:	429a      	cmp	r2, r3
 800839a:	bfb8      	it	lt
 800839c:	460b      	movlt	r3, r1
 800839e:	460c      	mov	r4, r1
 80083a0:	bfbc      	itt	lt
 80083a2:	464c      	movlt	r4, r9
 80083a4:	4699      	movlt	r9, r3
 80083a6:	6927      	ldr	r7, [r4, #16]
 80083a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80083ac:	68a3      	ldr	r3, [r4, #8]
 80083ae:	6861      	ldr	r1, [r4, #4]
 80083b0:	eb07 060a 	add.w	r6, r7, sl
 80083b4:	42b3      	cmp	r3, r6
 80083b6:	b085      	sub	sp, #20
 80083b8:	bfb8      	it	lt
 80083ba:	3101      	addlt	r1, #1
 80083bc:	f7ff fe8e 	bl	80080dc <_Balloc>
 80083c0:	b930      	cbnz	r0, 80083d0 <__multiply+0x44>
 80083c2:	4602      	mov	r2, r0
 80083c4:	4b44      	ldr	r3, [pc, #272]	; (80084d8 <__multiply+0x14c>)
 80083c6:	4845      	ldr	r0, [pc, #276]	; (80084dc <__multiply+0x150>)
 80083c8:	f240 115d 	movw	r1, #349	; 0x15d
 80083cc:	f000 fdd6 	bl	8008f7c <__assert_func>
 80083d0:	f100 0514 	add.w	r5, r0, #20
 80083d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083d8:	462b      	mov	r3, r5
 80083da:	2200      	movs	r2, #0
 80083dc:	4543      	cmp	r3, r8
 80083de:	d321      	bcc.n	8008424 <__multiply+0x98>
 80083e0:	f104 0314 	add.w	r3, r4, #20
 80083e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083e8:	f109 0314 	add.w	r3, r9, #20
 80083ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083f0:	9202      	str	r2, [sp, #8]
 80083f2:	1b3a      	subs	r2, r7, r4
 80083f4:	3a15      	subs	r2, #21
 80083f6:	f022 0203 	bic.w	r2, r2, #3
 80083fa:	3204      	adds	r2, #4
 80083fc:	f104 0115 	add.w	r1, r4, #21
 8008400:	428f      	cmp	r7, r1
 8008402:	bf38      	it	cc
 8008404:	2204      	movcc	r2, #4
 8008406:	9201      	str	r2, [sp, #4]
 8008408:	9a02      	ldr	r2, [sp, #8]
 800840a:	9303      	str	r3, [sp, #12]
 800840c:	429a      	cmp	r2, r3
 800840e:	d80c      	bhi.n	800842a <__multiply+0x9e>
 8008410:	2e00      	cmp	r6, #0
 8008412:	dd03      	ble.n	800841c <__multiply+0x90>
 8008414:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008418:	2b00      	cmp	r3, #0
 800841a:	d05a      	beq.n	80084d2 <__multiply+0x146>
 800841c:	6106      	str	r6, [r0, #16]
 800841e:	b005      	add	sp, #20
 8008420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008424:	f843 2b04 	str.w	r2, [r3], #4
 8008428:	e7d8      	b.n	80083dc <__multiply+0x50>
 800842a:	f8b3 a000 	ldrh.w	sl, [r3]
 800842e:	f1ba 0f00 	cmp.w	sl, #0
 8008432:	d024      	beq.n	800847e <__multiply+0xf2>
 8008434:	f104 0e14 	add.w	lr, r4, #20
 8008438:	46a9      	mov	r9, r5
 800843a:	f04f 0c00 	mov.w	ip, #0
 800843e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008442:	f8d9 1000 	ldr.w	r1, [r9]
 8008446:	fa1f fb82 	uxth.w	fp, r2
 800844a:	b289      	uxth	r1, r1
 800844c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008450:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008454:	f8d9 2000 	ldr.w	r2, [r9]
 8008458:	4461      	add	r1, ip
 800845a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800845e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008462:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008466:	b289      	uxth	r1, r1
 8008468:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800846c:	4577      	cmp	r7, lr
 800846e:	f849 1b04 	str.w	r1, [r9], #4
 8008472:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008476:	d8e2      	bhi.n	800843e <__multiply+0xb2>
 8008478:	9a01      	ldr	r2, [sp, #4]
 800847a:	f845 c002 	str.w	ip, [r5, r2]
 800847e:	9a03      	ldr	r2, [sp, #12]
 8008480:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008484:	3304      	adds	r3, #4
 8008486:	f1b9 0f00 	cmp.w	r9, #0
 800848a:	d020      	beq.n	80084ce <__multiply+0x142>
 800848c:	6829      	ldr	r1, [r5, #0]
 800848e:	f104 0c14 	add.w	ip, r4, #20
 8008492:	46ae      	mov	lr, r5
 8008494:	f04f 0a00 	mov.w	sl, #0
 8008498:	f8bc b000 	ldrh.w	fp, [ip]
 800849c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80084a0:	fb09 220b 	mla	r2, r9, fp, r2
 80084a4:	4492      	add	sl, r2
 80084a6:	b289      	uxth	r1, r1
 80084a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80084ac:	f84e 1b04 	str.w	r1, [lr], #4
 80084b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80084b4:	f8be 1000 	ldrh.w	r1, [lr]
 80084b8:	0c12      	lsrs	r2, r2, #16
 80084ba:	fb09 1102 	mla	r1, r9, r2, r1
 80084be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80084c2:	4567      	cmp	r7, ip
 80084c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80084c8:	d8e6      	bhi.n	8008498 <__multiply+0x10c>
 80084ca:	9a01      	ldr	r2, [sp, #4]
 80084cc:	50a9      	str	r1, [r5, r2]
 80084ce:	3504      	adds	r5, #4
 80084d0:	e79a      	b.n	8008408 <__multiply+0x7c>
 80084d2:	3e01      	subs	r6, #1
 80084d4:	e79c      	b.n	8008410 <__multiply+0x84>
 80084d6:	bf00      	nop
 80084d8:	08009d40 	.word	0x08009d40
 80084dc:	08009dcc 	.word	0x08009dcc

080084e0 <__pow5mult>:
 80084e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e4:	4615      	mov	r5, r2
 80084e6:	f012 0203 	ands.w	r2, r2, #3
 80084ea:	4606      	mov	r6, r0
 80084ec:	460f      	mov	r7, r1
 80084ee:	d007      	beq.n	8008500 <__pow5mult+0x20>
 80084f0:	4c25      	ldr	r4, [pc, #148]	; (8008588 <__pow5mult+0xa8>)
 80084f2:	3a01      	subs	r2, #1
 80084f4:	2300      	movs	r3, #0
 80084f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084fa:	f7ff fe51 	bl	80081a0 <__multadd>
 80084fe:	4607      	mov	r7, r0
 8008500:	10ad      	asrs	r5, r5, #2
 8008502:	d03d      	beq.n	8008580 <__pow5mult+0xa0>
 8008504:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008506:	b97c      	cbnz	r4, 8008528 <__pow5mult+0x48>
 8008508:	2010      	movs	r0, #16
 800850a:	f7ff fdbf 	bl	800808c <malloc>
 800850e:	4602      	mov	r2, r0
 8008510:	6270      	str	r0, [r6, #36]	; 0x24
 8008512:	b928      	cbnz	r0, 8008520 <__pow5mult+0x40>
 8008514:	4b1d      	ldr	r3, [pc, #116]	; (800858c <__pow5mult+0xac>)
 8008516:	481e      	ldr	r0, [pc, #120]	; (8008590 <__pow5mult+0xb0>)
 8008518:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800851c:	f000 fd2e 	bl	8008f7c <__assert_func>
 8008520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008524:	6004      	str	r4, [r0, #0]
 8008526:	60c4      	str	r4, [r0, #12]
 8008528:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800852c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008530:	b94c      	cbnz	r4, 8008546 <__pow5mult+0x66>
 8008532:	f240 2171 	movw	r1, #625	; 0x271
 8008536:	4630      	mov	r0, r6
 8008538:	f7ff ff12 	bl	8008360 <__i2b>
 800853c:	2300      	movs	r3, #0
 800853e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008542:	4604      	mov	r4, r0
 8008544:	6003      	str	r3, [r0, #0]
 8008546:	f04f 0900 	mov.w	r9, #0
 800854a:	07eb      	lsls	r3, r5, #31
 800854c:	d50a      	bpl.n	8008564 <__pow5mult+0x84>
 800854e:	4639      	mov	r1, r7
 8008550:	4622      	mov	r2, r4
 8008552:	4630      	mov	r0, r6
 8008554:	f7ff ff1a 	bl	800838c <__multiply>
 8008558:	4639      	mov	r1, r7
 800855a:	4680      	mov	r8, r0
 800855c:	4630      	mov	r0, r6
 800855e:	f7ff fdfd 	bl	800815c <_Bfree>
 8008562:	4647      	mov	r7, r8
 8008564:	106d      	asrs	r5, r5, #1
 8008566:	d00b      	beq.n	8008580 <__pow5mult+0xa0>
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	b938      	cbnz	r0, 800857c <__pow5mult+0x9c>
 800856c:	4622      	mov	r2, r4
 800856e:	4621      	mov	r1, r4
 8008570:	4630      	mov	r0, r6
 8008572:	f7ff ff0b 	bl	800838c <__multiply>
 8008576:	6020      	str	r0, [r4, #0]
 8008578:	f8c0 9000 	str.w	r9, [r0]
 800857c:	4604      	mov	r4, r0
 800857e:	e7e4      	b.n	800854a <__pow5mult+0x6a>
 8008580:	4638      	mov	r0, r7
 8008582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008586:	bf00      	nop
 8008588:	08009f18 	.word	0x08009f18
 800858c:	08009cce 	.word	0x08009cce
 8008590:	08009dcc 	.word	0x08009dcc

08008594 <__lshift>:
 8008594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008598:	460c      	mov	r4, r1
 800859a:	6849      	ldr	r1, [r1, #4]
 800859c:	6923      	ldr	r3, [r4, #16]
 800859e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085a2:	68a3      	ldr	r3, [r4, #8]
 80085a4:	4607      	mov	r7, r0
 80085a6:	4691      	mov	r9, r2
 80085a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085ac:	f108 0601 	add.w	r6, r8, #1
 80085b0:	42b3      	cmp	r3, r6
 80085b2:	db0b      	blt.n	80085cc <__lshift+0x38>
 80085b4:	4638      	mov	r0, r7
 80085b6:	f7ff fd91 	bl	80080dc <_Balloc>
 80085ba:	4605      	mov	r5, r0
 80085bc:	b948      	cbnz	r0, 80085d2 <__lshift+0x3e>
 80085be:	4602      	mov	r2, r0
 80085c0:	4b2a      	ldr	r3, [pc, #168]	; (800866c <__lshift+0xd8>)
 80085c2:	482b      	ldr	r0, [pc, #172]	; (8008670 <__lshift+0xdc>)
 80085c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085c8:	f000 fcd8 	bl	8008f7c <__assert_func>
 80085cc:	3101      	adds	r1, #1
 80085ce:	005b      	lsls	r3, r3, #1
 80085d0:	e7ee      	b.n	80085b0 <__lshift+0x1c>
 80085d2:	2300      	movs	r3, #0
 80085d4:	f100 0114 	add.w	r1, r0, #20
 80085d8:	f100 0210 	add.w	r2, r0, #16
 80085dc:	4618      	mov	r0, r3
 80085de:	4553      	cmp	r3, sl
 80085e0:	db37      	blt.n	8008652 <__lshift+0xbe>
 80085e2:	6920      	ldr	r0, [r4, #16]
 80085e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085e8:	f104 0314 	add.w	r3, r4, #20
 80085ec:	f019 091f 	ands.w	r9, r9, #31
 80085f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085f8:	d02f      	beq.n	800865a <__lshift+0xc6>
 80085fa:	f1c9 0e20 	rsb	lr, r9, #32
 80085fe:	468a      	mov	sl, r1
 8008600:	f04f 0c00 	mov.w	ip, #0
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	fa02 f209 	lsl.w	r2, r2, r9
 800860a:	ea42 020c 	orr.w	r2, r2, ip
 800860e:	f84a 2b04 	str.w	r2, [sl], #4
 8008612:	f853 2b04 	ldr.w	r2, [r3], #4
 8008616:	4298      	cmp	r0, r3
 8008618:	fa22 fc0e 	lsr.w	ip, r2, lr
 800861c:	d8f2      	bhi.n	8008604 <__lshift+0x70>
 800861e:	1b03      	subs	r3, r0, r4
 8008620:	3b15      	subs	r3, #21
 8008622:	f023 0303 	bic.w	r3, r3, #3
 8008626:	3304      	adds	r3, #4
 8008628:	f104 0215 	add.w	r2, r4, #21
 800862c:	4290      	cmp	r0, r2
 800862e:	bf38      	it	cc
 8008630:	2304      	movcc	r3, #4
 8008632:	f841 c003 	str.w	ip, [r1, r3]
 8008636:	f1bc 0f00 	cmp.w	ip, #0
 800863a:	d001      	beq.n	8008640 <__lshift+0xac>
 800863c:	f108 0602 	add.w	r6, r8, #2
 8008640:	3e01      	subs	r6, #1
 8008642:	4638      	mov	r0, r7
 8008644:	612e      	str	r6, [r5, #16]
 8008646:	4621      	mov	r1, r4
 8008648:	f7ff fd88 	bl	800815c <_Bfree>
 800864c:	4628      	mov	r0, r5
 800864e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008652:	f842 0f04 	str.w	r0, [r2, #4]!
 8008656:	3301      	adds	r3, #1
 8008658:	e7c1      	b.n	80085de <__lshift+0x4a>
 800865a:	3904      	subs	r1, #4
 800865c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008660:	f841 2f04 	str.w	r2, [r1, #4]!
 8008664:	4298      	cmp	r0, r3
 8008666:	d8f9      	bhi.n	800865c <__lshift+0xc8>
 8008668:	e7ea      	b.n	8008640 <__lshift+0xac>
 800866a:	bf00      	nop
 800866c:	08009d40 	.word	0x08009d40
 8008670:	08009dcc 	.word	0x08009dcc

08008674 <__mcmp>:
 8008674:	b530      	push	{r4, r5, lr}
 8008676:	6902      	ldr	r2, [r0, #16]
 8008678:	690c      	ldr	r4, [r1, #16]
 800867a:	1b12      	subs	r2, r2, r4
 800867c:	d10e      	bne.n	800869c <__mcmp+0x28>
 800867e:	f100 0314 	add.w	r3, r0, #20
 8008682:	3114      	adds	r1, #20
 8008684:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008688:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800868c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008690:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008694:	42a5      	cmp	r5, r4
 8008696:	d003      	beq.n	80086a0 <__mcmp+0x2c>
 8008698:	d305      	bcc.n	80086a6 <__mcmp+0x32>
 800869a:	2201      	movs	r2, #1
 800869c:	4610      	mov	r0, r2
 800869e:	bd30      	pop	{r4, r5, pc}
 80086a0:	4283      	cmp	r3, r0
 80086a2:	d3f3      	bcc.n	800868c <__mcmp+0x18>
 80086a4:	e7fa      	b.n	800869c <__mcmp+0x28>
 80086a6:	f04f 32ff 	mov.w	r2, #4294967295
 80086aa:	e7f7      	b.n	800869c <__mcmp+0x28>

080086ac <__mdiff>:
 80086ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b0:	460c      	mov	r4, r1
 80086b2:	4606      	mov	r6, r0
 80086b4:	4611      	mov	r1, r2
 80086b6:	4620      	mov	r0, r4
 80086b8:	4690      	mov	r8, r2
 80086ba:	f7ff ffdb 	bl	8008674 <__mcmp>
 80086be:	1e05      	subs	r5, r0, #0
 80086c0:	d110      	bne.n	80086e4 <__mdiff+0x38>
 80086c2:	4629      	mov	r1, r5
 80086c4:	4630      	mov	r0, r6
 80086c6:	f7ff fd09 	bl	80080dc <_Balloc>
 80086ca:	b930      	cbnz	r0, 80086da <__mdiff+0x2e>
 80086cc:	4b3a      	ldr	r3, [pc, #232]	; (80087b8 <__mdiff+0x10c>)
 80086ce:	4602      	mov	r2, r0
 80086d0:	f240 2132 	movw	r1, #562	; 0x232
 80086d4:	4839      	ldr	r0, [pc, #228]	; (80087bc <__mdiff+0x110>)
 80086d6:	f000 fc51 	bl	8008f7c <__assert_func>
 80086da:	2301      	movs	r3, #1
 80086dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e4:	bfa4      	itt	ge
 80086e6:	4643      	movge	r3, r8
 80086e8:	46a0      	movge	r8, r4
 80086ea:	4630      	mov	r0, r6
 80086ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086f0:	bfa6      	itte	ge
 80086f2:	461c      	movge	r4, r3
 80086f4:	2500      	movge	r5, #0
 80086f6:	2501      	movlt	r5, #1
 80086f8:	f7ff fcf0 	bl	80080dc <_Balloc>
 80086fc:	b920      	cbnz	r0, 8008708 <__mdiff+0x5c>
 80086fe:	4b2e      	ldr	r3, [pc, #184]	; (80087b8 <__mdiff+0x10c>)
 8008700:	4602      	mov	r2, r0
 8008702:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008706:	e7e5      	b.n	80086d4 <__mdiff+0x28>
 8008708:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800870c:	6926      	ldr	r6, [r4, #16]
 800870e:	60c5      	str	r5, [r0, #12]
 8008710:	f104 0914 	add.w	r9, r4, #20
 8008714:	f108 0514 	add.w	r5, r8, #20
 8008718:	f100 0e14 	add.w	lr, r0, #20
 800871c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008720:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008724:	f108 0210 	add.w	r2, r8, #16
 8008728:	46f2      	mov	sl, lr
 800872a:	2100      	movs	r1, #0
 800872c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008730:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008734:	fa1f f883 	uxth.w	r8, r3
 8008738:	fa11 f18b 	uxtah	r1, r1, fp
 800873c:	0c1b      	lsrs	r3, r3, #16
 800873e:	eba1 0808 	sub.w	r8, r1, r8
 8008742:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008746:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800874a:	fa1f f888 	uxth.w	r8, r8
 800874e:	1419      	asrs	r1, r3, #16
 8008750:	454e      	cmp	r6, r9
 8008752:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008756:	f84a 3b04 	str.w	r3, [sl], #4
 800875a:	d8e7      	bhi.n	800872c <__mdiff+0x80>
 800875c:	1b33      	subs	r3, r6, r4
 800875e:	3b15      	subs	r3, #21
 8008760:	f023 0303 	bic.w	r3, r3, #3
 8008764:	3304      	adds	r3, #4
 8008766:	3415      	adds	r4, #21
 8008768:	42a6      	cmp	r6, r4
 800876a:	bf38      	it	cc
 800876c:	2304      	movcc	r3, #4
 800876e:	441d      	add	r5, r3
 8008770:	4473      	add	r3, lr
 8008772:	469e      	mov	lr, r3
 8008774:	462e      	mov	r6, r5
 8008776:	4566      	cmp	r6, ip
 8008778:	d30e      	bcc.n	8008798 <__mdiff+0xec>
 800877a:	f10c 0203 	add.w	r2, ip, #3
 800877e:	1b52      	subs	r2, r2, r5
 8008780:	f022 0203 	bic.w	r2, r2, #3
 8008784:	3d03      	subs	r5, #3
 8008786:	45ac      	cmp	ip, r5
 8008788:	bf38      	it	cc
 800878a:	2200      	movcc	r2, #0
 800878c:	441a      	add	r2, r3
 800878e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008792:	b17b      	cbz	r3, 80087b4 <__mdiff+0x108>
 8008794:	6107      	str	r7, [r0, #16]
 8008796:	e7a3      	b.n	80086e0 <__mdiff+0x34>
 8008798:	f856 8b04 	ldr.w	r8, [r6], #4
 800879c:	fa11 f288 	uxtah	r2, r1, r8
 80087a0:	1414      	asrs	r4, r2, #16
 80087a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80087a6:	b292      	uxth	r2, r2
 80087a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80087ac:	f84e 2b04 	str.w	r2, [lr], #4
 80087b0:	1421      	asrs	r1, r4, #16
 80087b2:	e7e0      	b.n	8008776 <__mdiff+0xca>
 80087b4:	3f01      	subs	r7, #1
 80087b6:	e7ea      	b.n	800878e <__mdiff+0xe2>
 80087b8:	08009d40 	.word	0x08009d40
 80087bc:	08009dcc 	.word	0x08009dcc

080087c0 <__ulp>:
 80087c0:	b082      	sub	sp, #8
 80087c2:	ed8d 0b00 	vstr	d0, [sp]
 80087c6:	9b01      	ldr	r3, [sp, #4]
 80087c8:	4912      	ldr	r1, [pc, #72]	; (8008814 <__ulp+0x54>)
 80087ca:	4019      	ands	r1, r3
 80087cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80087d0:	2900      	cmp	r1, #0
 80087d2:	dd05      	ble.n	80087e0 <__ulp+0x20>
 80087d4:	2200      	movs	r2, #0
 80087d6:	460b      	mov	r3, r1
 80087d8:	ec43 2b10 	vmov	d0, r2, r3
 80087dc:	b002      	add	sp, #8
 80087de:	4770      	bx	lr
 80087e0:	4249      	negs	r1, r1
 80087e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80087e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80087ea:	f04f 0200 	mov.w	r2, #0
 80087ee:	f04f 0300 	mov.w	r3, #0
 80087f2:	da04      	bge.n	80087fe <__ulp+0x3e>
 80087f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80087f8:	fa41 f300 	asr.w	r3, r1, r0
 80087fc:	e7ec      	b.n	80087d8 <__ulp+0x18>
 80087fe:	f1a0 0114 	sub.w	r1, r0, #20
 8008802:	291e      	cmp	r1, #30
 8008804:	bfda      	itte	le
 8008806:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800880a:	fa20 f101 	lsrle.w	r1, r0, r1
 800880e:	2101      	movgt	r1, #1
 8008810:	460a      	mov	r2, r1
 8008812:	e7e1      	b.n	80087d8 <__ulp+0x18>
 8008814:	7ff00000 	.word	0x7ff00000

08008818 <__b2d>:
 8008818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800881a:	6905      	ldr	r5, [r0, #16]
 800881c:	f100 0714 	add.w	r7, r0, #20
 8008820:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008824:	1f2e      	subs	r6, r5, #4
 8008826:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800882a:	4620      	mov	r0, r4
 800882c:	f7ff fd48 	bl	80082c0 <__hi0bits>
 8008830:	f1c0 0320 	rsb	r3, r0, #32
 8008834:	280a      	cmp	r0, #10
 8008836:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80088b4 <__b2d+0x9c>
 800883a:	600b      	str	r3, [r1, #0]
 800883c:	dc14      	bgt.n	8008868 <__b2d+0x50>
 800883e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008842:	fa24 f10e 	lsr.w	r1, r4, lr
 8008846:	42b7      	cmp	r7, r6
 8008848:	ea41 030c 	orr.w	r3, r1, ip
 800884c:	bf34      	ite	cc
 800884e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008852:	2100      	movcs	r1, #0
 8008854:	3015      	adds	r0, #21
 8008856:	fa04 f000 	lsl.w	r0, r4, r0
 800885a:	fa21 f10e 	lsr.w	r1, r1, lr
 800885e:	ea40 0201 	orr.w	r2, r0, r1
 8008862:	ec43 2b10 	vmov	d0, r2, r3
 8008866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008868:	42b7      	cmp	r7, r6
 800886a:	bf3a      	itte	cc
 800886c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008870:	f1a5 0608 	subcc.w	r6, r5, #8
 8008874:	2100      	movcs	r1, #0
 8008876:	380b      	subs	r0, #11
 8008878:	d017      	beq.n	80088aa <__b2d+0x92>
 800887a:	f1c0 0c20 	rsb	ip, r0, #32
 800887e:	fa04 f500 	lsl.w	r5, r4, r0
 8008882:	42be      	cmp	r6, r7
 8008884:	fa21 f40c 	lsr.w	r4, r1, ip
 8008888:	ea45 0504 	orr.w	r5, r5, r4
 800888c:	bf8c      	ite	hi
 800888e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008892:	2400      	movls	r4, #0
 8008894:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008898:	fa01 f000 	lsl.w	r0, r1, r0
 800889c:	fa24 f40c 	lsr.w	r4, r4, ip
 80088a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80088a4:	ea40 0204 	orr.w	r2, r0, r4
 80088a8:	e7db      	b.n	8008862 <__b2d+0x4a>
 80088aa:	ea44 030c 	orr.w	r3, r4, ip
 80088ae:	460a      	mov	r2, r1
 80088b0:	e7d7      	b.n	8008862 <__b2d+0x4a>
 80088b2:	bf00      	nop
 80088b4:	3ff00000 	.word	0x3ff00000

080088b8 <__d2b>:
 80088b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80088bc:	4689      	mov	r9, r1
 80088be:	2101      	movs	r1, #1
 80088c0:	ec57 6b10 	vmov	r6, r7, d0
 80088c4:	4690      	mov	r8, r2
 80088c6:	f7ff fc09 	bl	80080dc <_Balloc>
 80088ca:	4604      	mov	r4, r0
 80088cc:	b930      	cbnz	r0, 80088dc <__d2b+0x24>
 80088ce:	4602      	mov	r2, r0
 80088d0:	4b25      	ldr	r3, [pc, #148]	; (8008968 <__d2b+0xb0>)
 80088d2:	4826      	ldr	r0, [pc, #152]	; (800896c <__d2b+0xb4>)
 80088d4:	f240 310a 	movw	r1, #778	; 0x30a
 80088d8:	f000 fb50 	bl	8008f7c <__assert_func>
 80088dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80088e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088e4:	bb35      	cbnz	r5, 8008934 <__d2b+0x7c>
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	d028      	beq.n	800893e <__d2b+0x86>
 80088ec:	4668      	mov	r0, sp
 80088ee:	9600      	str	r6, [sp, #0]
 80088f0:	f7ff fd06 	bl	8008300 <__lo0bits>
 80088f4:	9900      	ldr	r1, [sp, #0]
 80088f6:	b300      	cbz	r0, 800893a <__d2b+0x82>
 80088f8:	9a01      	ldr	r2, [sp, #4]
 80088fa:	f1c0 0320 	rsb	r3, r0, #32
 80088fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008902:	430b      	orrs	r3, r1
 8008904:	40c2      	lsrs	r2, r0
 8008906:	6163      	str	r3, [r4, #20]
 8008908:	9201      	str	r2, [sp, #4]
 800890a:	9b01      	ldr	r3, [sp, #4]
 800890c:	61a3      	str	r3, [r4, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	bf14      	ite	ne
 8008912:	2202      	movne	r2, #2
 8008914:	2201      	moveq	r2, #1
 8008916:	6122      	str	r2, [r4, #16]
 8008918:	b1d5      	cbz	r5, 8008950 <__d2b+0x98>
 800891a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800891e:	4405      	add	r5, r0
 8008920:	f8c9 5000 	str.w	r5, [r9]
 8008924:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008928:	f8c8 0000 	str.w	r0, [r8]
 800892c:	4620      	mov	r0, r4
 800892e:	b003      	add	sp, #12
 8008930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008934:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008938:	e7d5      	b.n	80088e6 <__d2b+0x2e>
 800893a:	6161      	str	r1, [r4, #20]
 800893c:	e7e5      	b.n	800890a <__d2b+0x52>
 800893e:	a801      	add	r0, sp, #4
 8008940:	f7ff fcde 	bl	8008300 <__lo0bits>
 8008944:	9b01      	ldr	r3, [sp, #4]
 8008946:	6163      	str	r3, [r4, #20]
 8008948:	2201      	movs	r2, #1
 800894a:	6122      	str	r2, [r4, #16]
 800894c:	3020      	adds	r0, #32
 800894e:	e7e3      	b.n	8008918 <__d2b+0x60>
 8008950:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008954:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008958:	f8c9 0000 	str.w	r0, [r9]
 800895c:	6918      	ldr	r0, [r3, #16]
 800895e:	f7ff fcaf 	bl	80082c0 <__hi0bits>
 8008962:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008966:	e7df      	b.n	8008928 <__d2b+0x70>
 8008968:	08009d40 	.word	0x08009d40
 800896c:	08009dcc 	.word	0x08009dcc

08008970 <__ratio>:
 8008970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	4688      	mov	r8, r1
 8008976:	4669      	mov	r1, sp
 8008978:	4681      	mov	r9, r0
 800897a:	f7ff ff4d 	bl	8008818 <__b2d>
 800897e:	a901      	add	r1, sp, #4
 8008980:	4640      	mov	r0, r8
 8008982:	ec55 4b10 	vmov	r4, r5, d0
 8008986:	f7ff ff47 	bl	8008818 <__b2d>
 800898a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800898e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008992:	eba3 0c02 	sub.w	ip, r3, r2
 8008996:	e9dd 3200 	ldrd	r3, r2, [sp]
 800899a:	1a9b      	subs	r3, r3, r2
 800899c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80089a0:	ec51 0b10 	vmov	r0, r1, d0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	bfd6      	itet	le
 80089a8:	460a      	movle	r2, r1
 80089aa:	462a      	movgt	r2, r5
 80089ac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80089b0:	468b      	mov	fp, r1
 80089b2:	462f      	mov	r7, r5
 80089b4:	bfd4      	ite	le
 80089b6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80089ba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80089be:	4620      	mov	r0, r4
 80089c0:	ee10 2a10 	vmov	r2, s0
 80089c4:	465b      	mov	r3, fp
 80089c6:	4639      	mov	r1, r7
 80089c8:	f7f7 ff60 	bl	800088c <__aeabi_ddiv>
 80089cc:	ec41 0b10 	vmov	d0, r0, r1
 80089d0:	b003      	add	sp, #12
 80089d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089d6 <__copybits>:
 80089d6:	3901      	subs	r1, #1
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	1149      	asrs	r1, r1, #5
 80089dc:	6914      	ldr	r4, [r2, #16]
 80089de:	3101      	adds	r1, #1
 80089e0:	f102 0314 	add.w	r3, r2, #20
 80089e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80089e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80089ec:	1f05      	subs	r5, r0, #4
 80089ee:	42a3      	cmp	r3, r4
 80089f0:	d30c      	bcc.n	8008a0c <__copybits+0x36>
 80089f2:	1aa3      	subs	r3, r4, r2
 80089f4:	3b11      	subs	r3, #17
 80089f6:	f023 0303 	bic.w	r3, r3, #3
 80089fa:	3211      	adds	r2, #17
 80089fc:	42a2      	cmp	r2, r4
 80089fe:	bf88      	it	hi
 8008a00:	2300      	movhi	r3, #0
 8008a02:	4418      	add	r0, r3
 8008a04:	2300      	movs	r3, #0
 8008a06:	4288      	cmp	r0, r1
 8008a08:	d305      	bcc.n	8008a16 <__copybits+0x40>
 8008a0a:	bd70      	pop	{r4, r5, r6, pc}
 8008a0c:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a10:	f845 6f04 	str.w	r6, [r5, #4]!
 8008a14:	e7eb      	b.n	80089ee <__copybits+0x18>
 8008a16:	f840 3b04 	str.w	r3, [r0], #4
 8008a1a:	e7f4      	b.n	8008a06 <__copybits+0x30>

08008a1c <__any_on>:
 8008a1c:	f100 0214 	add.w	r2, r0, #20
 8008a20:	6900      	ldr	r0, [r0, #16]
 8008a22:	114b      	asrs	r3, r1, #5
 8008a24:	4298      	cmp	r0, r3
 8008a26:	b510      	push	{r4, lr}
 8008a28:	db11      	blt.n	8008a4e <__any_on+0x32>
 8008a2a:	dd0a      	ble.n	8008a42 <__any_on+0x26>
 8008a2c:	f011 011f 	ands.w	r1, r1, #31
 8008a30:	d007      	beq.n	8008a42 <__any_on+0x26>
 8008a32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a36:	fa24 f001 	lsr.w	r0, r4, r1
 8008a3a:	fa00 f101 	lsl.w	r1, r0, r1
 8008a3e:	428c      	cmp	r4, r1
 8008a40:	d10b      	bne.n	8008a5a <__any_on+0x3e>
 8008a42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d803      	bhi.n	8008a52 <__any_on+0x36>
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	bd10      	pop	{r4, pc}
 8008a4e:	4603      	mov	r3, r0
 8008a50:	e7f7      	b.n	8008a42 <__any_on+0x26>
 8008a52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a56:	2900      	cmp	r1, #0
 8008a58:	d0f5      	beq.n	8008a46 <__any_on+0x2a>
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	e7f6      	b.n	8008a4c <__any_on+0x30>

08008a5e <_calloc_r>:
 8008a5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a60:	fba1 2402 	umull	r2, r4, r1, r2
 8008a64:	b94c      	cbnz	r4, 8008a7a <_calloc_r+0x1c>
 8008a66:	4611      	mov	r1, r2
 8008a68:	9201      	str	r2, [sp, #4]
 8008a6a:	f000 f87b 	bl	8008b64 <_malloc_r>
 8008a6e:	9a01      	ldr	r2, [sp, #4]
 8008a70:	4605      	mov	r5, r0
 8008a72:	b930      	cbnz	r0, 8008a82 <_calloc_r+0x24>
 8008a74:	4628      	mov	r0, r5
 8008a76:	b003      	add	sp, #12
 8008a78:	bd30      	pop	{r4, r5, pc}
 8008a7a:	220c      	movs	r2, #12
 8008a7c:	6002      	str	r2, [r0, #0]
 8008a7e:	2500      	movs	r5, #0
 8008a80:	e7f8      	b.n	8008a74 <_calloc_r+0x16>
 8008a82:	4621      	mov	r1, r4
 8008a84:	f7fc fbc0 	bl	8005208 <memset>
 8008a88:	e7f4      	b.n	8008a74 <_calloc_r+0x16>
	...

08008a8c <_free_r>:
 8008a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a8e:	2900      	cmp	r1, #0
 8008a90:	d044      	beq.n	8008b1c <_free_r+0x90>
 8008a92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a96:	9001      	str	r0, [sp, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a9e:	bfb8      	it	lt
 8008aa0:	18e4      	addlt	r4, r4, r3
 8008aa2:	f000 fab5 	bl	8009010 <__malloc_lock>
 8008aa6:	4a1e      	ldr	r2, [pc, #120]	; (8008b20 <_free_r+0x94>)
 8008aa8:	9801      	ldr	r0, [sp, #4]
 8008aaa:	6813      	ldr	r3, [r2, #0]
 8008aac:	b933      	cbnz	r3, 8008abc <_free_r+0x30>
 8008aae:	6063      	str	r3, [r4, #4]
 8008ab0:	6014      	str	r4, [r2, #0]
 8008ab2:	b003      	add	sp, #12
 8008ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ab8:	f000 bab0 	b.w	800901c <__malloc_unlock>
 8008abc:	42a3      	cmp	r3, r4
 8008abe:	d908      	bls.n	8008ad2 <_free_r+0x46>
 8008ac0:	6825      	ldr	r5, [r4, #0]
 8008ac2:	1961      	adds	r1, r4, r5
 8008ac4:	428b      	cmp	r3, r1
 8008ac6:	bf01      	itttt	eq
 8008ac8:	6819      	ldreq	r1, [r3, #0]
 8008aca:	685b      	ldreq	r3, [r3, #4]
 8008acc:	1949      	addeq	r1, r1, r5
 8008ace:	6021      	streq	r1, [r4, #0]
 8008ad0:	e7ed      	b.n	8008aae <_free_r+0x22>
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	b10b      	cbz	r3, 8008adc <_free_r+0x50>
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	d9fa      	bls.n	8008ad2 <_free_r+0x46>
 8008adc:	6811      	ldr	r1, [r2, #0]
 8008ade:	1855      	adds	r5, r2, r1
 8008ae0:	42a5      	cmp	r5, r4
 8008ae2:	d10b      	bne.n	8008afc <_free_r+0x70>
 8008ae4:	6824      	ldr	r4, [r4, #0]
 8008ae6:	4421      	add	r1, r4
 8008ae8:	1854      	adds	r4, r2, r1
 8008aea:	42a3      	cmp	r3, r4
 8008aec:	6011      	str	r1, [r2, #0]
 8008aee:	d1e0      	bne.n	8008ab2 <_free_r+0x26>
 8008af0:	681c      	ldr	r4, [r3, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	6053      	str	r3, [r2, #4]
 8008af6:	4421      	add	r1, r4
 8008af8:	6011      	str	r1, [r2, #0]
 8008afa:	e7da      	b.n	8008ab2 <_free_r+0x26>
 8008afc:	d902      	bls.n	8008b04 <_free_r+0x78>
 8008afe:	230c      	movs	r3, #12
 8008b00:	6003      	str	r3, [r0, #0]
 8008b02:	e7d6      	b.n	8008ab2 <_free_r+0x26>
 8008b04:	6825      	ldr	r5, [r4, #0]
 8008b06:	1961      	adds	r1, r4, r5
 8008b08:	428b      	cmp	r3, r1
 8008b0a:	bf04      	itt	eq
 8008b0c:	6819      	ldreq	r1, [r3, #0]
 8008b0e:	685b      	ldreq	r3, [r3, #4]
 8008b10:	6063      	str	r3, [r4, #4]
 8008b12:	bf04      	itt	eq
 8008b14:	1949      	addeq	r1, r1, r5
 8008b16:	6021      	streq	r1, [r4, #0]
 8008b18:	6054      	str	r4, [r2, #4]
 8008b1a:	e7ca      	b.n	8008ab2 <_free_r+0x26>
 8008b1c:	b003      	add	sp, #12
 8008b1e:	bd30      	pop	{r4, r5, pc}
 8008b20:	20000358 	.word	0x20000358

08008b24 <sbrk_aligned>:
 8008b24:	b570      	push	{r4, r5, r6, lr}
 8008b26:	4e0e      	ldr	r6, [pc, #56]	; (8008b60 <sbrk_aligned+0x3c>)
 8008b28:	460c      	mov	r4, r1
 8008b2a:	6831      	ldr	r1, [r6, #0]
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	b911      	cbnz	r1, 8008b36 <sbrk_aligned+0x12>
 8008b30:	f000 f9f2 	bl	8008f18 <_sbrk_r>
 8008b34:	6030      	str	r0, [r6, #0]
 8008b36:	4621      	mov	r1, r4
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f000 f9ed 	bl	8008f18 <_sbrk_r>
 8008b3e:	1c43      	adds	r3, r0, #1
 8008b40:	d00a      	beq.n	8008b58 <sbrk_aligned+0x34>
 8008b42:	1cc4      	adds	r4, r0, #3
 8008b44:	f024 0403 	bic.w	r4, r4, #3
 8008b48:	42a0      	cmp	r0, r4
 8008b4a:	d007      	beq.n	8008b5c <sbrk_aligned+0x38>
 8008b4c:	1a21      	subs	r1, r4, r0
 8008b4e:	4628      	mov	r0, r5
 8008b50:	f000 f9e2 	bl	8008f18 <_sbrk_r>
 8008b54:	3001      	adds	r0, #1
 8008b56:	d101      	bne.n	8008b5c <sbrk_aligned+0x38>
 8008b58:	f04f 34ff 	mov.w	r4, #4294967295
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	bd70      	pop	{r4, r5, r6, pc}
 8008b60:	2000035c 	.word	0x2000035c

08008b64 <_malloc_r>:
 8008b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b68:	1ccd      	adds	r5, r1, #3
 8008b6a:	f025 0503 	bic.w	r5, r5, #3
 8008b6e:	3508      	adds	r5, #8
 8008b70:	2d0c      	cmp	r5, #12
 8008b72:	bf38      	it	cc
 8008b74:	250c      	movcc	r5, #12
 8008b76:	2d00      	cmp	r5, #0
 8008b78:	4607      	mov	r7, r0
 8008b7a:	db01      	blt.n	8008b80 <_malloc_r+0x1c>
 8008b7c:	42a9      	cmp	r1, r5
 8008b7e:	d905      	bls.n	8008b8c <_malloc_r+0x28>
 8008b80:	230c      	movs	r3, #12
 8008b82:	603b      	str	r3, [r7, #0]
 8008b84:	2600      	movs	r6, #0
 8008b86:	4630      	mov	r0, r6
 8008b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b8c:	4e2e      	ldr	r6, [pc, #184]	; (8008c48 <_malloc_r+0xe4>)
 8008b8e:	f000 fa3f 	bl	8009010 <__malloc_lock>
 8008b92:	6833      	ldr	r3, [r6, #0]
 8008b94:	461c      	mov	r4, r3
 8008b96:	bb34      	cbnz	r4, 8008be6 <_malloc_r+0x82>
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	f7ff ffc2 	bl	8008b24 <sbrk_aligned>
 8008ba0:	1c43      	adds	r3, r0, #1
 8008ba2:	4604      	mov	r4, r0
 8008ba4:	d14d      	bne.n	8008c42 <_malloc_r+0xde>
 8008ba6:	6834      	ldr	r4, [r6, #0]
 8008ba8:	4626      	mov	r6, r4
 8008baa:	2e00      	cmp	r6, #0
 8008bac:	d140      	bne.n	8008c30 <_malloc_r+0xcc>
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	4631      	mov	r1, r6
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	eb04 0803 	add.w	r8, r4, r3
 8008bb8:	f000 f9ae 	bl	8008f18 <_sbrk_r>
 8008bbc:	4580      	cmp	r8, r0
 8008bbe:	d13a      	bne.n	8008c36 <_malloc_r+0xd2>
 8008bc0:	6821      	ldr	r1, [r4, #0]
 8008bc2:	3503      	adds	r5, #3
 8008bc4:	1a6d      	subs	r5, r5, r1
 8008bc6:	f025 0503 	bic.w	r5, r5, #3
 8008bca:	3508      	adds	r5, #8
 8008bcc:	2d0c      	cmp	r5, #12
 8008bce:	bf38      	it	cc
 8008bd0:	250c      	movcc	r5, #12
 8008bd2:	4629      	mov	r1, r5
 8008bd4:	4638      	mov	r0, r7
 8008bd6:	f7ff ffa5 	bl	8008b24 <sbrk_aligned>
 8008bda:	3001      	adds	r0, #1
 8008bdc:	d02b      	beq.n	8008c36 <_malloc_r+0xd2>
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	442b      	add	r3, r5
 8008be2:	6023      	str	r3, [r4, #0]
 8008be4:	e00e      	b.n	8008c04 <_malloc_r+0xa0>
 8008be6:	6822      	ldr	r2, [r4, #0]
 8008be8:	1b52      	subs	r2, r2, r5
 8008bea:	d41e      	bmi.n	8008c2a <_malloc_r+0xc6>
 8008bec:	2a0b      	cmp	r2, #11
 8008bee:	d916      	bls.n	8008c1e <_malloc_r+0xba>
 8008bf0:	1961      	adds	r1, r4, r5
 8008bf2:	42a3      	cmp	r3, r4
 8008bf4:	6025      	str	r5, [r4, #0]
 8008bf6:	bf18      	it	ne
 8008bf8:	6059      	strne	r1, [r3, #4]
 8008bfa:	6863      	ldr	r3, [r4, #4]
 8008bfc:	bf08      	it	eq
 8008bfe:	6031      	streq	r1, [r6, #0]
 8008c00:	5162      	str	r2, [r4, r5]
 8008c02:	604b      	str	r3, [r1, #4]
 8008c04:	4638      	mov	r0, r7
 8008c06:	f104 060b 	add.w	r6, r4, #11
 8008c0a:	f000 fa07 	bl	800901c <__malloc_unlock>
 8008c0e:	f026 0607 	bic.w	r6, r6, #7
 8008c12:	1d23      	adds	r3, r4, #4
 8008c14:	1af2      	subs	r2, r6, r3
 8008c16:	d0b6      	beq.n	8008b86 <_malloc_r+0x22>
 8008c18:	1b9b      	subs	r3, r3, r6
 8008c1a:	50a3      	str	r3, [r4, r2]
 8008c1c:	e7b3      	b.n	8008b86 <_malloc_r+0x22>
 8008c1e:	6862      	ldr	r2, [r4, #4]
 8008c20:	42a3      	cmp	r3, r4
 8008c22:	bf0c      	ite	eq
 8008c24:	6032      	streq	r2, [r6, #0]
 8008c26:	605a      	strne	r2, [r3, #4]
 8008c28:	e7ec      	b.n	8008c04 <_malloc_r+0xa0>
 8008c2a:	4623      	mov	r3, r4
 8008c2c:	6864      	ldr	r4, [r4, #4]
 8008c2e:	e7b2      	b.n	8008b96 <_malloc_r+0x32>
 8008c30:	4634      	mov	r4, r6
 8008c32:	6876      	ldr	r6, [r6, #4]
 8008c34:	e7b9      	b.n	8008baa <_malloc_r+0x46>
 8008c36:	230c      	movs	r3, #12
 8008c38:	603b      	str	r3, [r7, #0]
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	f000 f9ee 	bl	800901c <__malloc_unlock>
 8008c40:	e7a1      	b.n	8008b86 <_malloc_r+0x22>
 8008c42:	6025      	str	r5, [r4, #0]
 8008c44:	e7de      	b.n	8008c04 <_malloc_r+0xa0>
 8008c46:	bf00      	nop
 8008c48:	20000358 	.word	0x20000358

08008c4c <__ssputs_r>:
 8008c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c50:	688e      	ldr	r6, [r1, #8]
 8008c52:	429e      	cmp	r6, r3
 8008c54:	4682      	mov	sl, r0
 8008c56:	460c      	mov	r4, r1
 8008c58:	4690      	mov	r8, r2
 8008c5a:	461f      	mov	r7, r3
 8008c5c:	d838      	bhi.n	8008cd0 <__ssputs_r+0x84>
 8008c5e:	898a      	ldrh	r2, [r1, #12]
 8008c60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c64:	d032      	beq.n	8008ccc <__ssputs_r+0x80>
 8008c66:	6825      	ldr	r5, [r4, #0]
 8008c68:	6909      	ldr	r1, [r1, #16]
 8008c6a:	eba5 0901 	sub.w	r9, r5, r1
 8008c6e:	6965      	ldr	r5, [r4, #20]
 8008c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c78:	3301      	adds	r3, #1
 8008c7a:	444b      	add	r3, r9
 8008c7c:	106d      	asrs	r5, r5, #1
 8008c7e:	429d      	cmp	r5, r3
 8008c80:	bf38      	it	cc
 8008c82:	461d      	movcc	r5, r3
 8008c84:	0553      	lsls	r3, r2, #21
 8008c86:	d531      	bpl.n	8008cec <__ssputs_r+0xa0>
 8008c88:	4629      	mov	r1, r5
 8008c8a:	f7ff ff6b 	bl	8008b64 <_malloc_r>
 8008c8e:	4606      	mov	r6, r0
 8008c90:	b950      	cbnz	r0, 8008ca8 <__ssputs_r+0x5c>
 8008c92:	230c      	movs	r3, #12
 8008c94:	f8ca 3000 	str.w	r3, [sl]
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca8:	6921      	ldr	r1, [r4, #16]
 8008caa:	464a      	mov	r2, r9
 8008cac:	f7ff fa08 	bl	80080c0 <memcpy>
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cba:	81a3      	strh	r3, [r4, #12]
 8008cbc:	6126      	str	r6, [r4, #16]
 8008cbe:	6165      	str	r5, [r4, #20]
 8008cc0:	444e      	add	r6, r9
 8008cc2:	eba5 0509 	sub.w	r5, r5, r9
 8008cc6:	6026      	str	r6, [r4, #0]
 8008cc8:	60a5      	str	r5, [r4, #8]
 8008cca:	463e      	mov	r6, r7
 8008ccc:	42be      	cmp	r6, r7
 8008cce:	d900      	bls.n	8008cd2 <__ssputs_r+0x86>
 8008cd0:	463e      	mov	r6, r7
 8008cd2:	6820      	ldr	r0, [r4, #0]
 8008cd4:	4632      	mov	r2, r6
 8008cd6:	4641      	mov	r1, r8
 8008cd8:	f000 f980 	bl	8008fdc <memmove>
 8008cdc:	68a3      	ldr	r3, [r4, #8]
 8008cde:	1b9b      	subs	r3, r3, r6
 8008ce0:	60a3      	str	r3, [r4, #8]
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	4433      	add	r3, r6
 8008ce6:	6023      	str	r3, [r4, #0]
 8008ce8:	2000      	movs	r0, #0
 8008cea:	e7db      	b.n	8008ca4 <__ssputs_r+0x58>
 8008cec:	462a      	mov	r2, r5
 8008cee:	f000 f99b 	bl	8009028 <_realloc_r>
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d1e1      	bne.n	8008cbc <__ssputs_r+0x70>
 8008cf8:	6921      	ldr	r1, [r4, #16]
 8008cfa:	4650      	mov	r0, sl
 8008cfc:	f7ff fec6 	bl	8008a8c <_free_r>
 8008d00:	e7c7      	b.n	8008c92 <__ssputs_r+0x46>
	...

08008d04 <_svfiprintf_r>:
 8008d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d08:	4698      	mov	r8, r3
 8008d0a:	898b      	ldrh	r3, [r1, #12]
 8008d0c:	061b      	lsls	r3, r3, #24
 8008d0e:	b09d      	sub	sp, #116	; 0x74
 8008d10:	4607      	mov	r7, r0
 8008d12:	460d      	mov	r5, r1
 8008d14:	4614      	mov	r4, r2
 8008d16:	d50e      	bpl.n	8008d36 <_svfiprintf_r+0x32>
 8008d18:	690b      	ldr	r3, [r1, #16]
 8008d1a:	b963      	cbnz	r3, 8008d36 <_svfiprintf_r+0x32>
 8008d1c:	2140      	movs	r1, #64	; 0x40
 8008d1e:	f7ff ff21 	bl	8008b64 <_malloc_r>
 8008d22:	6028      	str	r0, [r5, #0]
 8008d24:	6128      	str	r0, [r5, #16]
 8008d26:	b920      	cbnz	r0, 8008d32 <_svfiprintf_r+0x2e>
 8008d28:	230c      	movs	r3, #12
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d30:	e0d1      	b.n	8008ed6 <_svfiprintf_r+0x1d2>
 8008d32:	2340      	movs	r3, #64	; 0x40
 8008d34:	616b      	str	r3, [r5, #20]
 8008d36:	2300      	movs	r3, #0
 8008d38:	9309      	str	r3, [sp, #36]	; 0x24
 8008d3a:	2320      	movs	r3, #32
 8008d3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d40:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d44:	2330      	movs	r3, #48	; 0x30
 8008d46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ef0 <_svfiprintf_r+0x1ec>
 8008d4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d4e:	f04f 0901 	mov.w	r9, #1
 8008d52:	4623      	mov	r3, r4
 8008d54:	469a      	mov	sl, r3
 8008d56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d5a:	b10a      	cbz	r2, 8008d60 <_svfiprintf_r+0x5c>
 8008d5c:	2a25      	cmp	r2, #37	; 0x25
 8008d5e:	d1f9      	bne.n	8008d54 <_svfiprintf_r+0x50>
 8008d60:	ebba 0b04 	subs.w	fp, sl, r4
 8008d64:	d00b      	beq.n	8008d7e <_svfiprintf_r+0x7a>
 8008d66:	465b      	mov	r3, fp
 8008d68:	4622      	mov	r2, r4
 8008d6a:	4629      	mov	r1, r5
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	f7ff ff6d 	bl	8008c4c <__ssputs_r>
 8008d72:	3001      	adds	r0, #1
 8008d74:	f000 80aa 	beq.w	8008ecc <_svfiprintf_r+0x1c8>
 8008d78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d7a:	445a      	add	r2, fp
 8008d7c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d7e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80a2 	beq.w	8008ecc <_svfiprintf_r+0x1c8>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d92:	f10a 0a01 	add.w	sl, sl, #1
 8008d96:	9304      	str	r3, [sp, #16]
 8008d98:	9307      	str	r3, [sp, #28]
 8008d9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d9e:	931a      	str	r3, [sp, #104]	; 0x68
 8008da0:	4654      	mov	r4, sl
 8008da2:	2205      	movs	r2, #5
 8008da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008da8:	4851      	ldr	r0, [pc, #324]	; (8008ef0 <_svfiprintf_r+0x1ec>)
 8008daa:	f7f7 fa39 	bl	8000220 <memchr>
 8008dae:	9a04      	ldr	r2, [sp, #16]
 8008db0:	b9d8      	cbnz	r0, 8008dea <_svfiprintf_r+0xe6>
 8008db2:	06d0      	lsls	r0, r2, #27
 8008db4:	bf44      	itt	mi
 8008db6:	2320      	movmi	r3, #32
 8008db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dbc:	0711      	lsls	r1, r2, #28
 8008dbe:	bf44      	itt	mi
 8008dc0:	232b      	movmi	r3, #43	; 0x2b
 8008dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8008dca:	2b2a      	cmp	r3, #42	; 0x2a
 8008dcc:	d015      	beq.n	8008dfa <_svfiprintf_r+0xf6>
 8008dce:	9a07      	ldr	r2, [sp, #28]
 8008dd0:	4654      	mov	r4, sl
 8008dd2:	2000      	movs	r0, #0
 8008dd4:	f04f 0c0a 	mov.w	ip, #10
 8008dd8:	4621      	mov	r1, r4
 8008dda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dde:	3b30      	subs	r3, #48	; 0x30
 8008de0:	2b09      	cmp	r3, #9
 8008de2:	d94e      	bls.n	8008e82 <_svfiprintf_r+0x17e>
 8008de4:	b1b0      	cbz	r0, 8008e14 <_svfiprintf_r+0x110>
 8008de6:	9207      	str	r2, [sp, #28]
 8008de8:	e014      	b.n	8008e14 <_svfiprintf_r+0x110>
 8008dea:	eba0 0308 	sub.w	r3, r0, r8
 8008dee:	fa09 f303 	lsl.w	r3, r9, r3
 8008df2:	4313      	orrs	r3, r2
 8008df4:	9304      	str	r3, [sp, #16]
 8008df6:	46a2      	mov	sl, r4
 8008df8:	e7d2      	b.n	8008da0 <_svfiprintf_r+0x9c>
 8008dfa:	9b03      	ldr	r3, [sp, #12]
 8008dfc:	1d19      	adds	r1, r3, #4
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	9103      	str	r1, [sp, #12]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	bfbb      	ittet	lt
 8008e06:	425b      	neglt	r3, r3
 8008e08:	f042 0202 	orrlt.w	r2, r2, #2
 8008e0c:	9307      	strge	r3, [sp, #28]
 8008e0e:	9307      	strlt	r3, [sp, #28]
 8008e10:	bfb8      	it	lt
 8008e12:	9204      	strlt	r2, [sp, #16]
 8008e14:	7823      	ldrb	r3, [r4, #0]
 8008e16:	2b2e      	cmp	r3, #46	; 0x2e
 8008e18:	d10c      	bne.n	8008e34 <_svfiprintf_r+0x130>
 8008e1a:	7863      	ldrb	r3, [r4, #1]
 8008e1c:	2b2a      	cmp	r3, #42	; 0x2a
 8008e1e:	d135      	bne.n	8008e8c <_svfiprintf_r+0x188>
 8008e20:	9b03      	ldr	r3, [sp, #12]
 8008e22:	1d1a      	adds	r2, r3, #4
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	9203      	str	r2, [sp, #12]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	bfb8      	it	lt
 8008e2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e30:	3402      	adds	r4, #2
 8008e32:	9305      	str	r3, [sp, #20]
 8008e34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f00 <_svfiprintf_r+0x1fc>
 8008e38:	7821      	ldrb	r1, [r4, #0]
 8008e3a:	2203      	movs	r2, #3
 8008e3c:	4650      	mov	r0, sl
 8008e3e:	f7f7 f9ef 	bl	8000220 <memchr>
 8008e42:	b140      	cbz	r0, 8008e56 <_svfiprintf_r+0x152>
 8008e44:	2340      	movs	r3, #64	; 0x40
 8008e46:	eba0 000a 	sub.w	r0, r0, sl
 8008e4a:	fa03 f000 	lsl.w	r0, r3, r0
 8008e4e:	9b04      	ldr	r3, [sp, #16]
 8008e50:	4303      	orrs	r3, r0
 8008e52:	3401      	adds	r4, #1
 8008e54:	9304      	str	r3, [sp, #16]
 8008e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5a:	4826      	ldr	r0, [pc, #152]	; (8008ef4 <_svfiprintf_r+0x1f0>)
 8008e5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e60:	2206      	movs	r2, #6
 8008e62:	f7f7 f9dd 	bl	8000220 <memchr>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	d038      	beq.n	8008edc <_svfiprintf_r+0x1d8>
 8008e6a:	4b23      	ldr	r3, [pc, #140]	; (8008ef8 <_svfiprintf_r+0x1f4>)
 8008e6c:	bb1b      	cbnz	r3, 8008eb6 <_svfiprintf_r+0x1b2>
 8008e6e:	9b03      	ldr	r3, [sp, #12]
 8008e70:	3307      	adds	r3, #7
 8008e72:	f023 0307 	bic.w	r3, r3, #7
 8008e76:	3308      	adds	r3, #8
 8008e78:	9303      	str	r3, [sp, #12]
 8008e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7c:	4433      	add	r3, r6
 8008e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e80:	e767      	b.n	8008d52 <_svfiprintf_r+0x4e>
 8008e82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e86:	460c      	mov	r4, r1
 8008e88:	2001      	movs	r0, #1
 8008e8a:	e7a5      	b.n	8008dd8 <_svfiprintf_r+0xd4>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	3401      	adds	r4, #1
 8008e90:	9305      	str	r3, [sp, #20]
 8008e92:	4619      	mov	r1, r3
 8008e94:	f04f 0c0a 	mov.w	ip, #10
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e9e:	3a30      	subs	r2, #48	; 0x30
 8008ea0:	2a09      	cmp	r2, #9
 8008ea2:	d903      	bls.n	8008eac <_svfiprintf_r+0x1a8>
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d0c5      	beq.n	8008e34 <_svfiprintf_r+0x130>
 8008ea8:	9105      	str	r1, [sp, #20]
 8008eaa:	e7c3      	b.n	8008e34 <_svfiprintf_r+0x130>
 8008eac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e7f0      	b.n	8008e98 <_svfiprintf_r+0x194>
 8008eb6:	ab03      	add	r3, sp, #12
 8008eb8:	9300      	str	r3, [sp, #0]
 8008eba:	462a      	mov	r2, r5
 8008ebc:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <_svfiprintf_r+0x1f8>)
 8008ebe:	a904      	add	r1, sp, #16
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f7fc fa49 	bl	8005358 <_printf_float>
 8008ec6:	1c42      	adds	r2, r0, #1
 8008ec8:	4606      	mov	r6, r0
 8008eca:	d1d6      	bne.n	8008e7a <_svfiprintf_r+0x176>
 8008ecc:	89ab      	ldrh	r3, [r5, #12]
 8008ece:	065b      	lsls	r3, r3, #25
 8008ed0:	f53f af2c 	bmi.w	8008d2c <_svfiprintf_r+0x28>
 8008ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ed6:	b01d      	add	sp, #116	; 0x74
 8008ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008edc:	ab03      	add	r3, sp, #12
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	462a      	mov	r2, r5
 8008ee2:	4b06      	ldr	r3, [pc, #24]	; (8008efc <_svfiprintf_r+0x1f8>)
 8008ee4:	a904      	add	r1, sp, #16
 8008ee6:	4638      	mov	r0, r7
 8008ee8:	f7fc fcda 	bl	80058a0 <_printf_i>
 8008eec:	e7eb      	b.n	8008ec6 <_svfiprintf_r+0x1c2>
 8008eee:	bf00      	nop
 8008ef0:	08009f24 	.word	0x08009f24
 8008ef4:	08009f2e 	.word	0x08009f2e
 8008ef8:	08005359 	.word	0x08005359
 8008efc:	08008c4d 	.word	0x08008c4d
 8008f00:	08009f2a 	.word	0x08009f2a
 8008f04:	00000000 	.word	0x00000000

08008f08 <nan>:
 8008f08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008f10 <nan+0x8>
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	00000000 	.word	0x00000000
 8008f14:	7ff80000 	.word	0x7ff80000

08008f18 <_sbrk_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d06      	ldr	r5, [pc, #24]	; (8008f34 <_sbrk_r+0x1c>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	f7f8 fe0c 	bl	8001b40 <_sbrk>
 8008f28:	1c43      	adds	r3, r0, #1
 8008f2a:	d102      	bne.n	8008f32 <_sbrk_r+0x1a>
 8008f2c:	682b      	ldr	r3, [r5, #0]
 8008f2e:	b103      	cbz	r3, 8008f32 <_sbrk_r+0x1a>
 8008f30:	6023      	str	r3, [r4, #0]
 8008f32:	bd38      	pop	{r3, r4, r5, pc}
 8008f34:	20000360 	.word	0x20000360

08008f38 <strncmp>:
 8008f38:	b510      	push	{r4, lr}
 8008f3a:	b17a      	cbz	r2, 8008f5c <strncmp+0x24>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	3901      	subs	r1, #1
 8008f40:	1884      	adds	r4, r0, r2
 8008f42:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f46:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008f4a:	4290      	cmp	r0, r2
 8008f4c:	d101      	bne.n	8008f52 <strncmp+0x1a>
 8008f4e:	42a3      	cmp	r3, r4
 8008f50:	d101      	bne.n	8008f56 <strncmp+0x1e>
 8008f52:	1a80      	subs	r0, r0, r2
 8008f54:	bd10      	pop	{r4, pc}
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d1f3      	bne.n	8008f42 <strncmp+0xa>
 8008f5a:	e7fa      	b.n	8008f52 <strncmp+0x1a>
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	e7f9      	b.n	8008f54 <strncmp+0x1c>

08008f60 <__ascii_wctomb>:
 8008f60:	b149      	cbz	r1, 8008f76 <__ascii_wctomb+0x16>
 8008f62:	2aff      	cmp	r2, #255	; 0xff
 8008f64:	bf85      	ittet	hi
 8008f66:	238a      	movhi	r3, #138	; 0x8a
 8008f68:	6003      	strhi	r3, [r0, #0]
 8008f6a:	700a      	strbls	r2, [r1, #0]
 8008f6c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f70:	bf98      	it	ls
 8008f72:	2001      	movls	r0, #1
 8008f74:	4770      	bx	lr
 8008f76:	4608      	mov	r0, r1
 8008f78:	4770      	bx	lr
	...

08008f7c <__assert_func>:
 8008f7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f7e:	4614      	mov	r4, r2
 8008f80:	461a      	mov	r2, r3
 8008f82:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <__assert_func+0x2c>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	4605      	mov	r5, r0
 8008f88:	68d8      	ldr	r0, [r3, #12]
 8008f8a:	b14c      	cbz	r4, 8008fa0 <__assert_func+0x24>
 8008f8c:	4b07      	ldr	r3, [pc, #28]	; (8008fac <__assert_func+0x30>)
 8008f8e:	9100      	str	r1, [sp, #0]
 8008f90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f94:	4906      	ldr	r1, [pc, #24]	; (8008fb0 <__assert_func+0x34>)
 8008f96:	462b      	mov	r3, r5
 8008f98:	f000 f80e 	bl	8008fb8 <fiprintf>
 8008f9c:	f000 fa8c 	bl	80094b8 <abort>
 8008fa0:	4b04      	ldr	r3, [pc, #16]	; (8008fb4 <__assert_func+0x38>)
 8008fa2:	461c      	mov	r4, r3
 8008fa4:	e7f3      	b.n	8008f8e <__assert_func+0x12>
 8008fa6:	bf00      	nop
 8008fa8:	20000014 	.word	0x20000014
 8008fac:	08009f35 	.word	0x08009f35
 8008fb0:	08009f42 	.word	0x08009f42
 8008fb4:	08009f70 	.word	0x08009f70

08008fb8 <fiprintf>:
 8008fb8:	b40e      	push	{r1, r2, r3}
 8008fba:	b503      	push	{r0, r1, lr}
 8008fbc:	4601      	mov	r1, r0
 8008fbe:	ab03      	add	r3, sp, #12
 8008fc0:	4805      	ldr	r0, [pc, #20]	; (8008fd8 <fiprintf+0x20>)
 8008fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fc6:	6800      	ldr	r0, [r0, #0]
 8008fc8:	9301      	str	r3, [sp, #4]
 8008fca:	f000 f885 	bl	80090d8 <_vfiprintf_r>
 8008fce:	b002      	add	sp, #8
 8008fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fd4:	b003      	add	sp, #12
 8008fd6:	4770      	bx	lr
 8008fd8:	20000014 	.word	0x20000014

08008fdc <memmove>:
 8008fdc:	4288      	cmp	r0, r1
 8008fde:	b510      	push	{r4, lr}
 8008fe0:	eb01 0402 	add.w	r4, r1, r2
 8008fe4:	d902      	bls.n	8008fec <memmove+0x10>
 8008fe6:	4284      	cmp	r4, r0
 8008fe8:	4623      	mov	r3, r4
 8008fea:	d807      	bhi.n	8008ffc <memmove+0x20>
 8008fec:	1e43      	subs	r3, r0, #1
 8008fee:	42a1      	cmp	r1, r4
 8008ff0:	d008      	beq.n	8009004 <memmove+0x28>
 8008ff2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ff6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ffa:	e7f8      	b.n	8008fee <memmove+0x12>
 8008ffc:	4402      	add	r2, r0
 8008ffe:	4601      	mov	r1, r0
 8009000:	428a      	cmp	r2, r1
 8009002:	d100      	bne.n	8009006 <memmove+0x2a>
 8009004:	bd10      	pop	{r4, pc}
 8009006:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800900a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800900e:	e7f7      	b.n	8009000 <memmove+0x24>

08009010 <__malloc_lock>:
 8009010:	4801      	ldr	r0, [pc, #4]	; (8009018 <__malloc_lock+0x8>)
 8009012:	f000 bc11 	b.w	8009838 <__retarget_lock_acquire_recursive>
 8009016:	bf00      	nop
 8009018:	20000364 	.word	0x20000364

0800901c <__malloc_unlock>:
 800901c:	4801      	ldr	r0, [pc, #4]	; (8009024 <__malloc_unlock+0x8>)
 800901e:	f000 bc0c 	b.w	800983a <__retarget_lock_release_recursive>
 8009022:	bf00      	nop
 8009024:	20000364 	.word	0x20000364

08009028 <_realloc_r>:
 8009028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800902c:	4680      	mov	r8, r0
 800902e:	4614      	mov	r4, r2
 8009030:	460e      	mov	r6, r1
 8009032:	b921      	cbnz	r1, 800903e <_realloc_r+0x16>
 8009034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009038:	4611      	mov	r1, r2
 800903a:	f7ff bd93 	b.w	8008b64 <_malloc_r>
 800903e:	b92a      	cbnz	r2, 800904c <_realloc_r+0x24>
 8009040:	f7ff fd24 	bl	8008a8c <_free_r>
 8009044:	4625      	mov	r5, r4
 8009046:	4628      	mov	r0, r5
 8009048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800904c:	f000 fc5c 	bl	8009908 <_malloc_usable_size_r>
 8009050:	4284      	cmp	r4, r0
 8009052:	4607      	mov	r7, r0
 8009054:	d802      	bhi.n	800905c <_realloc_r+0x34>
 8009056:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800905a:	d812      	bhi.n	8009082 <_realloc_r+0x5a>
 800905c:	4621      	mov	r1, r4
 800905e:	4640      	mov	r0, r8
 8009060:	f7ff fd80 	bl	8008b64 <_malloc_r>
 8009064:	4605      	mov	r5, r0
 8009066:	2800      	cmp	r0, #0
 8009068:	d0ed      	beq.n	8009046 <_realloc_r+0x1e>
 800906a:	42bc      	cmp	r4, r7
 800906c:	4622      	mov	r2, r4
 800906e:	4631      	mov	r1, r6
 8009070:	bf28      	it	cs
 8009072:	463a      	movcs	r2, r7
 8009074:	f7ff f824 	bl	80080c0 <memcpy>
 8009078:	4631      	mov	r1, r6
 800907a:	4640      	mov	r0, r8
 800907c:	f7ff fd06 	bl	8008a8c <_free_r>
 8009080:	e7e1      	b.n	8009046 <_realloc_r+0x1e>
 8009082:	4635      	mov	r5, r6
 8009084:	e7df      	b.n	8009046 <_realloc_r+0x1e>

08009086 <__sfputc_r>:
 8009086:	6893      	ldr	r3, [r2, #8]
 8009088:	3b01      	subs	r3, #1
 800908a:	2b00      	cmp	r3, #0
 800908c:	b410      	push	{r4}
 800908e:	6093      	str	r3, [r2, #8]
 8009090:	da08      	bge.n	80090a4 <__sfputc_r+0x1e>
 8009092:	6994      	ldr	r4, [r2, #24]
 8009094:	42a3      	cmp	r3, r4
 8009096:	db01      	blt.n	800909c <__sfputc_r+0x16>
 8009098:	290a      	cmp	r1, #10
 800909a:	d103      	bne.n	80090a4 <__sfputc_r+0x1e>
 800909c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090a0:	f000 b94a 	b.w	8009338 <__swbuf_r>
 80090a4:	6813      	ldr	r3, [r2, #0]
 80090a6:	1c58      	adds	r0, r3, #1
 80090a8:	6010      	str	r0, [r2, #0]
 80090aa:	7019      	strb	r1, [r3, #0]
 80090ac:	4608      	mov	r0, r1
 80090ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <__sfputs_r>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	4606      	mov	r6, r0
 80090b8:	460f      	mov	r7, r1
 80090ba:	4614      	mov	r4, r2
 80090bc:	18d5      	adds	r5, r2, r3
 80090be:	42ac      	cmp	r4, r5
 80090c0:	d101      	bne.n	80090c6 <__sfputs_r+0x12>
 80090c2:	2000      	movs	r0, #0
 80090c4:	e007      	b.n	80090d6 <__sfputs_r+0x22>
 80090c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ca:	463a      	mov	r2, r7
 80090cc:	4630      	mov	r0, r6
 80090ce:	f7ff ffda 	bl	8009086 <__sfputc_r>
 80090d2:	1c43      	adds	r3, r0, #1
 80090d4:	d1f3      	bne.n	80090be <__sfputs_r+0xa>
 80090d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090d8 <_vfiprintf_r>:
 80090d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090dc:	460d      	mov	r5, r1
 80090de:	b09d      	sub	sp, #116	; 0x74
 80090e0:	4614      	mov	r4, r2
 80090e2:	4698      	mov	r8, r3
 80090e4:	4606      	mov	r6, r0
 80090e6:	b118      	cbz	r0, 80090f0 <_vfiprintf_r+0x18>
 80090e8:	6983      	ldr	r3, [r0, #24]
 80090ea:	b90b      	cbnz	r3, 80090f0 <_vfiprintf_r+0x18>
 80090ec:	f000 fb06 	bl	80096fc <__sinit>
 80090f0:	4b89      	ldr	r3, [pc, #548]	; (8009318 <_vfiprintf_r+0x240>)
 80090f2:	429d      	cmp	r5, r3
 80090f4:	d11b      	bne.n	800912e <_vfiprintf_r+0x56>
 80090f6:	6875      	ldr	r5, [r6, #4]
 80090f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090fa:	07d9      	lsls	r1, r3, #31
 80090fc:	d405      	bmi.n	800910a <_vfiprintf_r+0x32>
 80090fe:	89ab      	ldrh	r3, [r5, #12]
 8009100:	059a      	lsls	r2, r3, #22
 8009102:	d402      	bmi.n	800910a <_vfiprintf_r+0x32>
 8009104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009106:	f000 fb97 	bl	8009838 <__retarget_lock_acquire_recursive>
 800910a:	89ab      	ldrh	r3, [r5, #12]
 800910c:	071b      	lsls	r3, r3, #28
 800910e:	d501      	bpl.n	8009114 <_vfiprintf_r+0x3c>
 8009110:	692b      	ldr	r3, [r5, #16]
 8009112:	b9eb      	cbnz	r3, 8009150 <_vfiprintf_r+0x78>
 8009114:	4629      	mov	r1, r5
 8009116:	4630      	mov	r0, r6
 8009118:	f000 f960 	bl	80093dc <__swsetup_r>
 800911c:	b1c0      	cbz	r0, 8009150 <_vfiprintf_r+0x78>
 800911e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009120:	07dc      	lsls	r4, r3, #31
 8009122:	d50e      	bpl.n	8009142 <_vfiprintf_r+0x6a>
 8009124:	f04f 30ff 	mov.w	r0, #4294967295
 8009128:	b01d      	add	sp, #116	; 0x74
 800912a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912e:	4b7b      	ldr	r3, [pc, #492]	; (800931c <_vfiprintf_r+0x244>)
 8009130:	429d      	cmp	r5, r3
 8009132:	d101      	bne.n	8009138 <_vfiprintf_r+0x60>
 8009134:	68b5      	ldr	r5, [r6, #8]
 8009136:	e7df      	b.n	80090f8 <_vfiprintf_r+0x20>
 8009138:	4b79      	ldr	r3, [pc, #484]	; (8009320 <_vfiprintf_r+0x248>)
 800913a:	429d      	cmp	r5, r3
 800913c:	bf08      	it	eq
 800913e:	68f5      	ldreq	r5, [r6, #12]
 8009140:	e7da      	b.n	80090f8 <_vfiprintf_r+0x20>
 8009142:	89ab      	ldrh	r3, [r5, #12]
 8009144:	0598      	lsls	r0, r3, #22
 8009146:	d4ed      	bmi.n	8009124 <_vfiprintf_r+0x4c>
 8009148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800914a:	f000 fb76 	bl	800983a <__retarget_lock_release_recursive>
 800914e:	e7e9      	b.n	8009124 <_vfiprintf_r+0x4c>
 8009150:	2300      	movs	r3, #0
 8009152:	9309      	str	r3, [sp, #36]	; 0x24
 8009154:	2320      	movs	r3, #32
 8009156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800915a:	f8cd 800c 	str.w	r8, [sp, #12]
 800915e:	2330      	movs	r3, #48	; 0x30
 8009160:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009324 <_vfiprintf_r+0x24c>
 8009164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009168:	f04f 0901 	mov.w	r9, #1
 800916c:	4623      	mov	r3, r4
 800916e:	469a      	mov	sl, r3
 8009170:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009174:	b10a      	cbz	r2, 800917a <_vfiprintf_r+0xa2>
 8009176:	2a25      	cmp	r2, #37	; 0x25
 8009178:	d1f9      	bne.n	800916e <_vfiprintf_r+0x96>
 800917a:	ebba 0b04 	subs.w	fp, sl, r4
 800917e:	d00b      	beq.n	8009198 <_vfiprintf_r+0xc0>
 8009180:	465b      	mov	r3, fp
 8009182:	4622      	mov	r2, r4
 8009184:	4629      	mov	r1, r5
 8009186:	4630      	mov	r0, r6
 8009188:	f7ff ff94 	bl	80090b4 <__sfputs_r>
 800918c:	3001      	adds	r0, #1
 800918e:	f000 80aa 	beq.w	80092e6 <_vfiprintf_r+0x20e>
 8009192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009194:	445a      	add	r2, fp
 8009196:	9209      	str	r2, [sp, #36]	; 0x24
 8009198:	f89a 3000 	ldrb.w	r3, [sl]
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 80a2 	beq.w	80092e6 <_vfiprintf_r+0x20e>
 80091a2:	2300      	movs	r3, #0
 80091a4:	f04f 32ff 	mov.w	r2, #4294967295
 80091a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091ac:	f10a 0a01 	add.w	sl, sl, #1
 80091b0:	9304      	str	r3, [sp, #16]
 80091b2:	9307      	str	r3, [sp, #28]
 80091b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091b8:	931a      	str	r3, [sp, #104]	; 0x68
 80091ba:	4654      	mov	r4, sl
 80091bc:	2205      	movs	r2, #5
 80091be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091c2:	4858      	ldr	r0, [pc, #352]	; (8009324 <_vfiprintf_r+0x24c>)
 80091c4:	f7f7 f82c 	bl	8000220 <memchr>
 80091c8:	9a04      	ldr	r2, [sp, #16]
 80091ca:	b9d8      	cbnz	r0, 8009204 <_vfiprintf_r+0x12c>
 80091cc:	06d1      	lsls	r1, r2, #27
 80091ce:	bf44      	itt	mi
 80091d0:	2320      	movmi	r3, #32
 80091d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091d6:	0713      	lsls	r3, r2, #28
 80091d8:	bf44      	itt	mi
 80091da:	232b      	movmi	r3, #43	; 0x2b
 80091dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091e0:	f89a 3000 	ldrb.w	r3, [sl]
 80091e4:	2b2a      	cmp	r3, #42	; 0x2a
 80091e6:	d015      	beq.n	8009214 <_vfiprintf_r+0x13c>
 80091e8:	9a07      	ldr	r2, [sp, #28]
 80091ea:	4654      	mov	r4, sl
 80091ec:	2000      	movs	r0, #0
 80091ee:	f04f 0c0a 	mov.w	ip, #10
 80091f2:	4621      	mov	r1, r4
 80091f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091f8:	3b30      	subs	r3, #48	; 0x30
 80091fa:	2b09      	cmp	r3, #9
 80091fc:	d94e      	bls.n	800929c <_vfiprintf_r+0x1c4>
 80091fe:	b1b0      	cbz	r0, 800922e <_vfiprintf_r+0x156>
 8009200:	9207      	str	r2, [sp, #28]
 8009202:	e014      	b.n	800922e <_vfiprintf_r+0x156>
 8009204:	eba0 0308 	sub.w	r3, r0, r8
 8009208:	fa09 f303 	lsl.w	r3, r9, r3
 800920c:	4313      	orrs	r3, r2
 800920e:	9304      	str	r3, [sp, #16]
 8009210:	46a2      	mov	sl, r4
 8009212:	e7d2      	b.n	80091ba <_vfiprintf_r+0xe2>
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	1d19      	adds	r1, r3, #4
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	9103      	str	r1, [sp, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	bfbb      	ittet	lt
 8009220:	425b      	neglt	r3, r3
 8009222:	f042 0202 	orrlt.w	r2, r2, #2
 8009226:	9307      	strge	r3, [sp, #28]
 8009228:	9307      	strlt	r3, [sp, #28]
 800922a:	bfb8      	it	lt
 800922c:	9204      	strlt	r2, [sp, #16]
 800922e:	7823      	ldrb	r3, [r4, #0]
 8009230:	2b2e      	cmp	r3, #46	; 0x2e
 8009232:	d10c      	bne.n	800924e <_vfiprintf_r+0x176>
 8009234:	7863      	ldrb	r3, [r4, #1]
 8009236:	2b2a      	cmp	r3, #42	; 0x2a
 8009238:	d135      	bne.n	80092a6 <_vfiprintf_r+0x1ce>
 800923a:	9b03      	ldr	r3, [sp, #12]
 800923c:	1d1a      	adds	r2, r3, #4
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	9203      	str	r2, [sp, #12]
 8009242:	2b00      	cmp	r3, #0
 8009244:	bfb8      	it	lt
 8009246:	f04f 33ff 	movlt.w	r3, #4294967295
 800924a:	3402      	adds	r4, #2
 800924c:	9305      	str	r3, [sp, #20]
 800924e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009334 <_vfiprintf_r+0x25c>
 8009252:	7821      	ldrb	r1, [r4, #0]
 8009254:	2203      	movs	r2, #3
 8009256:	4650      	mov	r0, sl
 8009258:	f7f6 ffe2 	bl	8000220 <memchr>
 800925c:	b140      	cbz	r0, 8009270 <_vfiprintf_r+0x198>
 800925e:	2340      	movs	r3, #64	; 0x40
 8009260:	eba0 000a 	sub.w	r0, r0, sl
 8009264:	fa03 f000 	lsl.w	r0, r3, r0
 8009268:	9b04      	ldr	r3, [sp, #16]
 800926a:	4303      	orrs	r3, r0
 800926c:	3401      	adds	r4, #1
 800926e:	9304      	str	r3, [sp, #16]
 8009270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009274:	482c      	ldr	r0, [pc, #176]	; (8009328 <_vfiprintf_r+0x250>)
 8009276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800927a:	2206      	movs	r2, #6
 800927c:	f7f6 ffd0 	bl	8000220 <memchr>
 8009280:	2800      	cmp	r0, #0
 8009282:	d03f      	beq.n	8009304 <_vfiprintf_r+0x22c>
 8009284:	4b29      	ldr	r3, [pc, #164]	; (800932c <_vfiprintf_r+0x254>)
 8009286:	bb1b      	cbnz	r3, 80092d0 <_vfiprintf_r+0x1f8>
 8009288:	9b03      	ldr	r3, [sp, #12]
 800928a:	3307      	adds	r3, #7
 800928c:	f023 0307 	bic.w	r3, r3, #7
 8009290:	3308      	adds	r3, #8
 8009292:	9303      	str	r3, [sp, #12]
 8009294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009296:	443b      	add	r3, r7
 8009298:	9309      	str	r3, [sp, #36]	; 0x24
 800929a:	e767      	b.n	800916c <_vfiprintf_r+0x94>
 800929c:	fb0c 3202 	mla	r2, ip, r2, r3
 80092a0:	460c      	mov	r4, r1
 80092a2:	2001      	movs	r0, #1
 80092a4:	e7a5      	b.n	80091f2 <_vfiprintf_r+0x11a>
 80092a6:	2300      	movs	r3, #0
 80092a8:	3401      	adds	r4, #1
 80092aa:	9305      	str	r3, [sp, #20]
 80092ac:	4619      	mov	r1, r3
 80092ae:	f04f 0c0a 	mov.w	ip, #10
 80092b2:	4620      	mov	r0, r4
 80092b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092b8:	3a30      	subs	r2, #48	; 0x30
 80092ba:	2a09      	cmp	r2, #9
 80092bc:	d903      	bls.n	80092c6 <_vfiprintf_r+0x1ee>
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d0c5      	beq.n	800924e <_vfiprintf_r+0x176>
 80092c2:	9105      	str	r1, [sp, #20]
 80092c4:	e7c3      	b.n	800924e <_vfiprintf_r+0x176>
 80092c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ca:	4604      	mov	r4, r0
 80092cc:	2301      	movs	r3, #1
 80092ce:	e7f0      	b.n	80092b2 <_vfiprintf_r+0x1da>
 80092d0:	ab03      	add	r3, sp, #12
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	462a      	mov	r2, r5
 80092d6:	4b16      	ldr	r3, [pc, #88]	; (8009330 <_vfiprintf_r+0x258>)
 80092d8:	a904      	add	r1, sp, #16
 80092da:	4630      	mov	r0, r6
 80092dc:	f7fc f83c 	bl	8005358 <_printf_float>
 80092e0:	4607      	mov	r7, r0
 80092e2:	1c78      	adds	r0, r7, #1
 80092e4:	d1d6      	bne.n	8009294 <_vfiprintf_r+0x1bc>
 80092e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092e8:	07d9      	lsls	r1, r3, #31
 80092ea:	d405      	bmi.n	80092f8 <_vfiprintf_r+0x220>
 80092ec:	89ab      	ldrh	r3, [r5, #12]
 80092ee:	059a      	lsls	r2, r3, #22
 80092f0:	d402      	bmi.n	80092f8 <_vfiprintf_r+0x220>
 80092f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092f4:	f000 faa1 	bl	800983a <__retarget_lock_release_recursive>
 80092f8:	89ab      	ldrh	r3, [r5, #12]
 80092fa:	065b      	lsls	r3, r3, #25
 80092fc:	f53f af12 	bmi.w	8009124 <_vfiprintf_r+0x4c>
 8009300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009302:	e711      	b.n	8009128 <_vfiprintf_r+0x50>
 8009304:	ab03      	add	r3, sp, #12
 8009306:	9300      	str	r3, [sp, #0]
 8009308:	462a      	mov	r2, r5
 800930a:	4b09      	ldr	r3, [pc, #36]	; (8009330 <_vfiprintf_r+0x258>)
 800930c:	a904      	add	r1, sp, #16
 800930e:	4630      	mov	r0, r6
 8009310:	f7fc fac6 	bl	80058a0 <_printf_i>
 8009314:	e7e4      	b.n	80092e0 <_vfiprintf_r+0x208>
 8009316:	bf00      	nop
 8009318:	08009f94 	.word	0x08009f94
 800931c:	08009fb4 	.word	0x08009fb4
 8009320:	08009f74 	.word	0x08009f74
 8009324:	08009f24 	.word	0x08009f24
 8009328:	08009f2e 	.word	0x08009f2e
 800932c:	08005359 	.word	0x08005359
 8009330:	080090b5 	.word	0x080090b5
 8009334:	08009f2a 	.word	0x08009f2a

08009338 <__swbuf_r>:
 8009338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933a:	460e      	mov	r6, r1
 800933c:	4614      	mov	r4, r2
 800933e:	4605      	mov	r5, r0
 8009340:	b118      	cbz	r0, 800934a <__swbuf_r+0x12>
 8009342:	6983      	ldr	r3, [r0, #24]
 8009344:	b90b      	cbnz	r3, 800934a <__swbuf_r+0x12>
 8009346:	f000 f9d9 	bl	80096fc <__sinit>
 800934a:	4b21      	ldr	r3, [pc, #132]	; (80093d0 <__swbuf_r+0x98>)
 800934c:	429c      	cmp	r4, r3
 800934e:	d12b      	bne.n	80093a8 <__swbuf_r+0x70>
 8009350:	686c      	ldr	r4, [r5, #4]
 8009352:	69a3      	ldr	r3, [r4, #24]
 8009354:	60a3      	str	r3, [r4, #8]
 8009356:	89a3      	ldrh	r3, [r4, #12]
 8009358:	071a      	lsls	r2, r3, #28
 800935a:	d52f      	bpl.n	80093bc <__swbuf_r+0x84>
 800935c:	6923      	ldr	r3, [r4, #16]
 800935e:	b36b      	cbz	r3, 80093bc <__swbuf_r+0x84>
 8009360:	6923      	ldr	r3, [r4, #16]
 8009362:	6820      	ldr	r0, [r4, #0]
 8009364:	1ac0      	subs	r0, r0, r3
 8009366:	6963      	ldr	r3, [r4, #20]
 8009368:	b2f6      	uxtb	r6, r6
 800936a:	4283      	cmp	r3, r0
 800936c:	4637      	mov	r7, r6
 800936e:	dc04      	bgt.n	800937a <__swbuf_r+0x42>
 8009370:	4621      	mov	r1, r4
 8009372:	4628      	mov	r0, r5
 8009374:	f000 f92e 	bl	80095d4 <_fflush_r>
 8009378:	bb30      	cbnz	r0, 80093c8 <__swbuf_r+0x90>
 800937a:	68a3      	ldr	r3, [r4, #8]
 800937c:	3b01      	subs	r3, #1
 800937e:	60a3      	str	r3, [r4, #8]
 8009380:	6823      	ldr	r3, [r4, #0]
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	6022      	str	r2, [r4, #0]
 8009386:	701e      	strb	r6, [r3, #0]
 8009388:	6963      	ldr	r3, [r4, #20]
 800938a:	3001      	adds	r0, #1
 800938c:	4283      	cmp	r3, r0
 800938e:	d004      	beq.n	800939a <__swbuf_r+0x62>
 8009390:	89a3      	ldrh	r3, [r4, #12]
 8009392:	07db      	lsls	r3, r3, #31
 8009394:	d506      	bpl.n	80093a4 <__swbuf_r+0x6c>
 8009396:	2e0a      	cmp	r6, #10
 8009398:	d104      	bne.n	80093a4 <__swbuf_r+0x6c>
 800939a:	4621      	mov	r1, r4
 800939c:	4628      	mov	r0, r5
 800939e:	f000 f919 	bl	80095d4 <_fflush_r>
 80093a2:	b988      	cbnz	r0, 80093c8 <__swbuf_r+0x90>
 80093a4:	4638      	mov	r0, r7
 80093a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093a8:	4b0a      	ldr	r3, [pc, #40]	; (80093d4 <__swbuf_r+0x9c>)
 80093aa:	429c      	cmp	r4, r3
 80093ac:	d101      	bne.n	80093b2 <__swbuf_r+0x7a>
 80093ae:	68ac      	ldr	r4, [r5, #8]
 80093b0:	e7cf      	b.n	8009352 <__swbuf_r+0x1a>
 80093b2:	4b09      	ldr	r3, [pc, #36]	; (80093d8 <__swbuf_r+0xa0>)
 80093b4:	429c      	cmp	r4, r3
 80093b6:	bf08      	it	eq
 80093b8:	68ec      	ldreq	r4, [r5, #12]
 80093ba:	e7ca      	b.n	8009352 <__swbuf_r+0x1a>
 80093bc:	4621      	mov	r1, r4
 80093be:	4628      	mov	r0, r5
 80093c0:	f000 f80c 	bl	80093dc <__swsetup_r>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d0cb      	beq.n	8009360 <__swbuf_r+0x28>
 80093c8:	f04f 37ff 	mov.w	r7, #4294967295
 80093cc:	e7ea      	b.n	80093a4 <__swbuf_r+0x6c>
 80093ce:	bf00      	nop
 80093d0:	08009f94 	.word	0x08009f94
 80093d4:	08009fb4 	.word	0x08009fb4
 80093d8:	08009f74 	.word	0x08009f74

080093dc <__swsetup_r>:
 80093dc:	4b32      	ldr	r3, [pc, #200]	; (80094a8 <__swsetup_r+0xcc>)
 80093de:	b570      	push	{r4, r5, r6, lr}
 80093e0:	681d      	ldr	r5, [r3, #0]
 80093e2:	4606      	mov	r6, r0
 80093e4:	460c      	mov	r4, r1
 80093e6:	b125      	cbz	r5, 80093f2 <__swsetup_r+0x16>
 80093e8:	69ab      	ldr	r3, [r5, #24]
 80093ea:	b913      	cbnz	r3, 80093f2 <__swsetup_r+0x16>
 80093ec:	4628      	mov	r0, r5
 80093ee:	f000 f985 	bl	80096fc <__sinit>
 80093f2:	4b2e      	ldr	r3, [pc, #184]	; (80094ac <__swsetup_r+0xd0>)
 80093f4:	429c      	cmp	r4, r3
 80093f6:	d10f      	bne.n	8009418 <__swsetup_r+0x3c>
 80093f8:	686c      	ldr	r4, [r5, #4]
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009400:	0719      	lsls	r1, r3, #28
 8009402:	d42c      	bmi.n	800945e <__swsetup_r+0x82>
 8009404:	06dd      	lsls	r5, r3, #27
 8009406:	d411      	bmi.n	800942c <__swsetup_r+0x50>
 8009408:	2309      	movs	r3, #9
 800940a:	6033      	str	r3, [r6, #0]
 800940c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	f04f 30ff 	mov.w	r0, #4294967295
 8009416:	e03e      	b.n	8009496 <__swsetup_r+0xba>
 8009418:	4b25      	ldr	r3, [pc, #148]	; (80094b0 <__swsetup_r+0xd4>)
 800941a:	429c      	cmp	r4, r3
 800941c:	d101      	bne.n	8009422 <__swsetup_r+0x46>
 800941e:	68ac      	ldr	r4, [r5, #8]
 8009420:	e7eb      	b.n	80093fa <__swsetup_r+0x1e>
 8009422:	4b24      	ldr	r3, [pc, #144]	; (80094b4 <__swsetup_r+0xd8>)
 8009424:	429c      	cmp	r4, r3
 8009426:	bf08      	it	eq
 8009428:	68ec      	ldreq	r4, [r5, #12]
 800942a:	e7e6      	b.n	80093fa <__swsetup_r+0x1e>
 800942c:	0758      	lsls	r0, r3, #29
 800942e:	d512      	bpl.n	8009456 <__swsetup_r+0x7a>
 8009430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009432:	b141      	cbz	r1, 8009446 <__swsetup_r+0x6a>
 8009434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009438:	4299      	cmp	r1, r3
 800943a:	d002      	beq.n	8009442 <__swsetup_r+0x66>
 800943c:	4630      	mov	r0, r6
 800943e:	f7ff fb25 	bl	8008a8c <_free_r>
 8009442:	2300      	movs	r3, #0
 8009444:	6363      	str	r3, [r4, #52]	; 0x34
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800944c:	81a3      	strh	r3, [r4, #12]
 800944e:	2300      	movs	r3, #0
 8009450:	6063      	str	r3, [r4, #4]
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f043 0308 	orr.w	r3, r3, #8
 800945c:	81a3      	strh	r3, [r4, #12]
 800945e:	6923      	ldr	r3, [r4, #16]
 8009460:	b94b      	cbnz	r3, 8009476 <__swsetup_r+0x9a>
 8009462:	89a3      	ldrh	r3, [r4, #12]
 8009464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800946c:	d003      	beq.n	8009476 <__swsetup_r+0x9a>
 800946e:	4621      	mov	r1, r4
 8009470:	4630      	mov	r0, r6
 8009472:	f000 fa09 	bl	8009888 <__smakebuf_r>
 8009476:	89a0      	ldrh	r0, [r4, #12]
 8009478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800947c:	f010 0301 	ands.w	r3, r0, #1
 8009480:	d00a      	beq.n	8009498 <__swsetup_r+0xbc>
 8009482:	2300      	movs	r3, #0
 8009484:	60a3      	str	r3, [r4, #8]
 8009486:	6963      	ldr	r3, [r4, #20]
 8009488:	425b      	negs	r3, r3
 800948a:	61a3      	str	r3, [r4, #24]
 800948c:	6923      	ldr	r3, [r4, #16]
 800948e:	b943      	cbnz	r3, 80094a2 <__swsetup_r+0xc6>
 8009490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009494:	d1ba      	bne.n	800940c <__swsetup_r+0x30>
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	0781      	lsls	r1, r0, #30
 800949a:	bf58      	it	pl
 800949c:	6963      	ldrpl	r3, [r4, #20]
 800949e:	60a3      	str	r3, [r4, #8]
 80094a0:	e7f4      	b.n	800948c <__swsetup_r+0xb0>
 80094a2:	2000      	movs	r0, #0
 80094a4:	e7f7      	b.n	8009496 <__swsetup_r+0xba>
 80094a6:	bf00      	nop
 80094a8:	20000014 	.word	0x20000014
 80094ac:	08009f94 	.word	0x08009f94
 80094b0:	08009fb4 	.word	0x08009fb4
 80094b4:	08009f74 	.word	0x08009f74

080094b8 <abort>:
 80094b8:	b508      	push	{r3, lr}
 80094ba:	2006      	movs	r0, #6
 80094bc:	f000 fa54 	bl	8009968 <raise>
 80094c0:	2001      	movs	r0, #1
 80094c2:	f7f8 fac5 	bl	8001a50 <_exit>
	...

080094c8 <__sflush_r>:
 80094c8:	898a      	ldrh	r2, [r1, #12]
 80094ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ce:	4605      	mov	r5, r0
 80094d0:	0710      	lsls	r0, r2, #28
 80094d2:	460c      	mov	r4, r1
 80094d4:	d458      	bmi.n	8009588 <__sflush_r+0xc0>
 80094d6:	684b      	ldr	r3, [r1, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dc05      	bgt.n	80094e8 <__sflush_r+0x20>
 80094dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094de:	2b00      	cmp	r3, #0
 80094e0:	dc02      	bgt.n	80094e8 <__sflush_r+0x20>
 80094e2:	2000      	movs	r0, #0
 80094e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ea:	2e00      	cmp	r6, #0
 80094ec:	d0f9      	beq.n	80094e2 <__sflush_r+0x1a>
 80094ee:	2300      	movs	r3, #0
 80094f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094f4:	682f      	ldr	r7, [r5, #0]
 80094f6:	602b      	str	r3, [r5, #0]
 80094f8:	d032      	beq.n	8009560 <__sflush_r+0x98>
 80094fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094fc:	89a3      	ldrh	r3, [r4, #12]
 80094fe:	075a      	lsls	r2, r3, #29
 8009500:	d505      	bpl.n	800950e <__sflush_r+0x46>
 8009502:	6863      	ldr	r3, [r4, #4]
 8009504:	1ac0      	subs	r0, r0, r3
 8009506:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009508:	b10b      	cbz	r3, 800950e <__sflush_r+0x46>
 800950a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800950c:	1ac0      	subs	r0, r0, r3
 800950e:	2300      	movs	r3, #0
 8009510:	4602      	mov	r2, r0
 8009512:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009514:	6a21      	ldr	r1, [r4, #32]
 8009516:	4628      	mov	r0, r5
 8009518:	47b0      	blx	r6
 800951a:	1c43      	adds	r3, r0, #1
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	d106      	bne.n	800952e <__sflush_r+0x66>
 8009520:	6829      	ldr	r1, [r5, #0]
 8009522:	291d      	cmp	r1, #29
 8009524:	d82c      	bhi.n	8009580 <__sflush_r+0xb8>
 8009526:	4a2a      	ldr	r2, [pc, #168]	; (80095d0 <__sflush_r+0x108>)
 8009528:	40ca      	lsrs	r2, r1
 800952a:	07d6      	lsls	r6, r2, #31
 800952c:	d528      	bpl.n	8009580 <__sflush_r+0xb8>
 800952e:	2200      	movs	r2, #0
 8009530:	6062      	str	r2, [r4, #4]
 8009532:	04d9      	lsls	r1, r3, #19
 8009534:	6922      	ldr	r2, [r4, #16]
 8009536:	6022      	str	r2, [r4, #0]
 8009538:	d504      	bpl.n	8009544 <__sflush_r+0x7c>
 800953a:	1c42      	adds	r2, r0, #1
 800953c:	d101      	bne.n	8009542 <__sflush_r+0x7a>
 800953e:	682b      	ldr	r3, [r5, #0]
 8009540:	b903      	cbnz	r3, 8009544 <__sflush_r+0x7c>
 8009542:	6560      	str	r0, [r4, #84]	; 0x54
 8009544:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009546:	602f      	str	r7, [r5, #0]
 8009548:	2900      	cmp	r1, #0
 800954a:	d0ca      	beq.n	80094e2 <__sflush_r+0x1a>
 800954c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009550:	4299      	cmp	r1, r3
 8009552:	d002      	beq.n	800955a <__sflush_r+0x92>
 8009554:	4628      	mov	r0, r5
 8009556:	f7ff fa99 	bl	8008a8c <_free_r>
 800955a:	2000      	movs	r0, #0
 800955c:	6360      	str	r0, [r4, #52]	; 0x34
 800955e:	e7c1      	b.n	80094e4 <__sflush_r+0x1c>
 8009560:	6a21      	ldr	r1, [r4, #32]
 8009562:	2301      	movs	r3, #1
 8009564:	4628      	mov	r0, r5
 8009566:	47b0      	blx	r6
 8009568:	1c41      	adds	r1, r0, #1
 800956a:	d1c7      	bne.n	80094fc <__sflush_r+0x34>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d0c4      	beq.n	80094fc <__sflush_r+0x34>
 8009572:	2b1d      	cmp	r3, #29
 8009574:	d001      	beq.n	800957a <__sflush_r+0xb2>
 8009576:	2b16      	cmp	r3, #22
 8009578:	d101      	bne.n	800957e <__sflush_r+0xb6>
 800957a:	602f      	str	r7, [r5, #0]
 800957c:	e7b1      	b.n	80094e2 <__sflush_r+0x1a>
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009584:	81a3      	strh	r3, [r4, #12]
 8009586:	e7ad      	b.n	80094e4 <__sflush_r+0x1c>
 8009588:	690f      	ldr	r7, [r1, #16]
 800958a:	2f00      	cmp	r7, #0
 800958c:	d0a9      	beq.n	80094e2 <__sflush_r+0x1a>
 800958e:	0793      	lsls	r3, r2, #30
 8009590:	680e      	ldr	r6, [r1, #0]
 8009592:	bf08      	it	eq
 8009594:	694b      	ldreq	r3, [r1, #20]
 8009596:	600f      	str	r7, [r1, #0]
 8009598:	bf18      	it	ne
 800959a:	2300      	movne	r3, #0
 800959c:	eba6 0807 	sub.w	r8, r6, r7
 80095a0:	608b      	str	r3, [r1, #8]
 80095a2:	f1b8 0f00 	cmp.w	r8, #0
 80095a6:	dd9c      	ble.n	80094e2 <__sflush_r+0x1a>
 80095a8:	6a21      	ldr	r1, [r4, #32]
 80095aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095ac:	4643      	mov	r3, r8
 80095ae:	463a      	mov	r2, r7
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b0      	blx	r6
 80095b4:	2800      	cmp	r0, #0
 80095b6:	dc06      	bgt.n	80095c6 <__sflush_r+0xfe>
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095be:	81a3      	strh	r3, [r4, #12]
 80095c0:	f04f 30ff 	mov.w	r0, #4294967295
 80095c4:	e78e      	b.n	80094e4 <__sflush_r+0x1c>
 80095c6:	4407      	add	r7, r0
 80095c8:	eba8 0800 	sub.w	r8, r8, r0
 80095cc:	e7e9      	b.n	80095a2 <__sflush_r+0xda>
 80095ce:	bf00      	nop
 80095d0:	20400001 	.word	0x20400001

080095d4 <_fflush_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	690b      	ldr	r3, [r1, #16]
 80095d8:	4605      	mov	r5, r0
 80095da:	460c      	mov	r4, r1
 80095dc:	b913      	cbnz	r3, 80095e4 <_fflush_r+0x10>
 80095de:	2500      	movs	r5, #0
 80095e0:	4628      	mov	r0, r5
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	b118      	cbz	r0, 80095ee <_fflush_r+0x1a>
 80095e6:	6983      	ldr	r3, [r0, #24]
 80095e8:	b90b      	cbnz	r3, 80095ee <_fflush_r+0x1a>
 80095ea:	f000 f887 	bl	80096fc <__sinit>
 80095ee:	4b14      	ldr	r3, [pc, #80]	; (8009640 <_fflush_r+0x6c>)
 80095f0:	429c      	cmp	r4, r3
 80095f2:	d11b      	bne.n	800962c <_fflush_r+0x58>
 80095f4:	686c      	ldr	r4, [r5, #4]
 80095f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d0ef      	beq.n	80095de <_fflush_r+0xa>
 80095fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009600:	07d0      	lsls	r0, r2, #31
 8009602:	d404      	bmi.n	800960e <_fflush_r+0x3a>
 8009604:	0599      	lsls	r1, r3, #22
 8009606:	d402      	bmi.n	800960e <_fflush_r+0x3a>
 8009608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800960a:	f000 f915 	bl	8009838 <__retarget_lock_acquire_recursive>
 800960e:	4628      	mov	r0, r5
 8009610:	4621      	mov	r1, r4
 8009612:	f7ff ff59 	bl	80094c8 <__sflush_r>
 8009616:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009618:	07da      	lsls	r2, r3, #31
 800961a:	4605      	mov	r5, r0
 800961c:	d4e0      	bmi.n	80095e0 <_fflush_r+0xc>
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	059b      	lsls	r3, r3, #22
 8009622:	d4dd      	bmi.n	80095e0 <_fflush_r+0xc>
 8009624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009626:	f000 f908 	bl	800983a <__retarget_lock_release_recursive>
 800962a:	e7d9      	b.n	80095e0 <_fflush_r+0xc>
 800962c:	4b05      	ldr	r3, [pc, #20]	; (8009644 <_fflush_r+0x70>)
 800962e:	429c      	cmp	r4, r3
 8009630:	d101      	bne.n	8009636 <_fflush_r+0x62>
 8009632:	68ac      	ldr	r4, [r5, #8]
 8009634:	e7df      	b.n	80095f6 <_fflush_r+0x22>
 8009636:	4b04      	ldr	r3, [pc, #16]	; (8009648 <_fflush_r+0x74>)
 8009638:	429c      	cmp	r4, r3
 800963a:	bf08      	it	eq
 800963c:	68ec      	ldreq	r4, [r5, #12]
 800963e:	e7da      	b.n	80095f6 <_fflush_r+0x22>
 8009640:	08009f94 	.word	0x08009f94
 8009644:	08009fb4 	.word	0x08009fb4
 8009648:	08009f74 	.word	0x08009f74

0800964c <std>:
 800964c:	2300      	movs	r3, #0
 800964e:	b510      	push	{r4, lr}
 8009650:	4604      	mov	r4, r0
 8009652:	e9c0 3300 	strd	r3, r3, [r0]
 8009656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800965a:	6083      	str	r3, [r0, #8]
 800965c:	8181      	strh	r1, [r0, #12]
 800965e:	6643      	str	r3, [r0, #100]	; 0x64
 8009660:	81c2      	strh	r2, [r0, #14]
 8009662:	6183      	str	r3, [r0, #24]
 8009664:	4619      	mov	r1, r3
 8009666:	2208      	movs	r2, #8
 8009668:	305c      	adds	r0, #92	; 0x5c
 800966a:	f7fb fdcd 	bl	8005208 <memset>
 800966e:	4b05      	ldr	r3, [pc, #20]	; (8009684 <std+0x38>)
 8009670:	6263      	str	r3, [r4, #36]	; 0x24
 8009672:	4b05      	ldr	r3, [pc, #20]	; (8009688 <std+0x3c>)
 8009674:	62a3      	str	r3, [r4, #40]	; 0x28
 8009676:	4b05      	ldr	r3, [pc, #20]	; (800968c <std+0x40>)
 8009678:	62e3      	str	r3, [r4, #44]	; 0x2c
 800967a:	4b05      	ldr	r3, [pc, #20]	; (8009690 <std+0x44>)
 800967c:	6224      	str	r4, [r4, #32]
 800967e:	6323      	str	r3, [r4, #48]	; 0x30
 8009680:	bd10      	pop	{r4, pc}
 8009682:	bf00      	nop
 8009684:	080099a1 	.word	0x080099a1
 8009688:	080099c3 	.word	0x080099c3
 800968c:	080099fb 	.word	0x080099fb
 8009690:	08009a1f 	.word	0x08009a1f

08009694 <_cleanup_r>:
 8009694:	4901      	ldr	r1, [pc, #4]	; (800969c <_cleanup_r+0x8>)
 8009696:	f000 b8af 	b.w	80097f8 <_fwalk_reent>
 800969a:	bf00      	nop
 800969c:	080095d5 	.word	0x080095d5

080096a0 <__sfmoreglue>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	2268      	movs	r2, #104	; 0x68
 80096a4:	1e4d      	subs	r5, r1, #1
 80096a6:	4355      	muls	r5, r2
 80096a8:	460e      	mov	r6, r1
 80096aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80096ae:	f7ff fa59 	bl	8008b64 <_malloc_r>
 80096b2:	4604      	mov	r4, r0
 80096b4:	b140      	cbz	r0, 80096c8 <__sfmoreglue+0x28>
 80096b6:	2100      	movs	r1, #0
 80096b8:	e9c0 1600 	strd	r1, r6, [r0]
 80096bc:	300c      	adds	r0, #12
 80096be:	60a0      	str	r0, [r4, #8]
 80096c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096c4:	f7fb fda0 	bl	8005208 <memset>
 80096c8:	4620      	mov	r0, r4
 80096ca:	bd70      	pop	{r4, r5, r6, pc}

080096cc <__sfp_lock_acquire>:
 80096cc:	4801      	ldr	r0, [pc, #4]	; (80096d4 <__sfp_lock_acquire+0x8>)
 80096ce:	f000 b8b3 	b.w	8009838 <__retarget_lock_acquire_recursive>
 80096d2:	bf00      	nop
 80096d4:	20000365 	.word	0x20000365

080096d8 <__sfp_lock_release>:
 80096d8:	4801      	ldr	r0, [pc, #4]	; (80096e0 <__sfp_lock_release+0x8>)
 80096da:	f000 b8ae 	b.w	800983a <__retarget_lock_release_recursive>
 80096de:	bf00      	nop
 80096e0:	20000365 	.word	0x20000365

080096e4 <__sinit_lock_acquire>:
 80096e4:	4801      	ldr	r0, [pc, #4]	; (80096ec <__sinit_lock_acquire+0x8>)
 80096e6:	f000 b8a7 	b.w	8009838 <__retarget_lock_acquire_recursive>
 80096ea:	bf00      	nop
 80096ec:	20000366 	.word	0x20000366

080096f0 <__sinit_lock_release>:
 80096f0:	4801      	ldr	r0, [pc, #4]	; (80096f8 <__sinit_lock_release+0x8>)
 80096f2:	f000 b8a2 	b.w	800983a <__retarget_lock_release_recursive>
 80096f6:	bf00      	nop
 80096f8:	20000366 	.word	0x20000366

080096fc <__sinit>:
 80096fc:	b510      	push	{r4, lr}
 80096fe:	4604      	mov	r4, r0
 8009700:	f7ff fff0 	bl	80096e4 <__sinit_lock_acquire>
 8009704:	69a3      	ldr	r3, [r4, #24]
 8009706:	b11b      	cbz	r3, 8009710 <__sinit+0x14>
 8009708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800970c:	f7ff bff0 	b.w	80096f0 <__sinit_lock_release>
 8009710:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009714:	6523      	str	r3, [r4, #80]	; 0x50
 8009716:	4b13      	ldr	r3, [pc, #76]	; (8009764 <__sinit+0x68>)
 8009718:	4a13      	ldr	r2, [pc, #76]	; (8009768 <__sinit+0x6c>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	62a2      	str	r2, [r4, #40]	; 0x28
 800971e:	42a3      	cmp	r3, r4
 8009720:	bf04      	itt	eq
 8009722:	2301      	moveq	r3, #1
 8009724:	61a3      	streq	r3, [r4, #24]
 8009726:	4620      	mov	r0, r4
 8009728:	f000 f820 	bl	800976c <__sfp>
 800972c:	6060      	str	r0, [r4, #4]
 800972e:	4620      	mov	r0, r4
 8009730:	f000 f81c 	bl	800976c <__sfp>
 8009734:	60a0      	str	r0, [r4, #8]
 8009736:	4620      	mov	r0, r4
 8009738:	f000 f818 	bl	800976c <__sfp>
 800973c:	2200      	movs	r2, #0
 800973e:	60e0      	str	r0, [r4, #12]
 8009740:	2104      	movs	r1, #4
 8009742:	6860      	ldr	r0, [r4, #4]
 8009744:	f7ff ff82 	bl	800964c <std>
 8009748:	68a0      	ldr	r0, [r4, #8]
 800974a:	2201      	movs	r2, #1
 800974c:	2109      	movs	r1, #9
 800974e:	f7ff ff7d 	bl	800964c <std>
 8009752:	68e0      	ldr	r0, [r4, #12]
 8009754:	2202      	movs	r2, #2
 8009756:	2112      	movs	r1, #18
 8009758:	f7ff ff78 	bl	800964c <std>
 800975c:	2301      	movs	r3, #1
 800975e:	61a3      	str	r3, [r4, #24]
 8009760:	e7d2      	b.n	8009708 <__sinit+0xc>
 8009762:	bf00      	nop
 8009764:	08009b30 	.word	0x08009b30
 8009768:	08009695 	.word	0x08009695

0800976c <__sfp>:
 800976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976e:	4607      	mov	r7, r0
 8009770:	f7ff ffac 	bl	80096cc <__sfp_lock_acquire>
 8009774:	4b1e      	ldr	r3, [pc, #120]	; (80097f0 <__sfp+0x84>)
 8009776:	681e      	ldr	r6, [r3, #0]
 8009778:	69b3      	ldr	r3, [r6, #24]
 800977a:	b913      	cbnz	r3, 8009782 <__sfp+0x16>
 800977c:	4630      	mov	r0, r6
 800977e:	f7ff ffbd 	bl	80096fc <__sinit>
 8009782:	3648      	adds	r6, #72	; 0x48
 8009784:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009788:	3b01      	subs	r3, #1
 800978a:	d503      	bpl.n	8009794 <__sfp+0x28>
 800978c:	6833      	ldr	r3, [r6, #0]
 800978e:	b30b      	cbz	r3, 80097d4 <__sfp+0x68>
 8009790:	6836      	ldr	r6, [r6, #0]
 8009792:	e7f7      	b.n	8009784 <__sfp+0x18>
 8009794:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009798:	b9d5      	cbnz	r5, 80097d0 <__sfp+0x64>
 800979a:	4b16      	ldr	r3, [pc, #88]	; (80097f4 <__sfp+0x88>)
 800979c:	60e3      	str	r3, [r4, #12]
 800979e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80097a2:	6665      	str	r5, [r4, #100]	; 0x64
 80097a4:	f000 f847 	bl	8009836 <__retarget_lock_init_recursive>
 80097a8:	f7ff ff96 	bl	80096d8 <__sfp_lock_release>
 80097ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80097b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80097b4:	6025      	str	r5, [r4, #0]
 80097b6:	61a5      	str	r5, [r4, #24]
 80097b8:	2208      	movs	r2, #8
 80097ba:	4629      	mov	r1, r5
 80097bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097c0:	f7fb fd22 	bl	8005208 <memset>
 80097c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80097c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097cc:	4620      	mov	r0, r4
 80097ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097d0:	3468      	adds	r4, #104	; 0x68
 80097d2:	e7d9      	b.n	8009788 <__sfp+0x1c>
 80097d4:	2104      	movs	r1, #4
 80097d6:	4638      	mov	r0, r7
 80097d8:	f7ff ff62 	bl	80096a0 <__sfmoreglue>
 80097dc:	4604      	mov	r4, r0
 80097de:	6030      	str	r0, [r6, #0]
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d1d5      	bne.n	8009790 <__sfp+0x24>
 80097e4:	f7ff ff78 	bl	80096d8 <__sfp_lock_release>
 80097e8:	230c      	movs	r3, #12
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	e7ee      	b.n	80097cc <__sfp+0x60>
 80097ee:	bf00      	nop
 80097f0:	08009b30 	.word	0x08009b30
 80097f4:	ffff0001 	.word	0xffff0001

080097f8 <_fwalk_reent>:
 80097f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097fc:	4606      	mov	r6, r0
 80097fe:	4688      	mov	r8, r1
 8009800:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009804:	2700      	movs	r7, #0
 8009806:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800980a:	f1b9 0901 	subs.w	r9, r9, #1
 800980e:	d505      	bpl.n	800981c <_fwalk_reent+0x24>
 8009810:	6824      	ldr	r4, [r4, #0]
 8009812:	2c00      	cmp	r4, #0
 8009814:	d1f7      	bne.n	8009806 <_fwalk_reent+0xe>
 8009816:	4638      	mov	r0, r7
 8009818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800981c:	89ab      	ldrh	r3, [r5, #12]
 800981e:	2b01      	cmp	r3, #1
 8009820:	d907      	bls.n	8009832 <_fwalk_reent+0x3a>
 8009822:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009826:	3301      	adds	r3, #1
 8009828:	d003      	beq.n	8009832 <_fwalk_reent+0x3a>
 800982a:	4629      	mov	r1, r5
 800982c:	4630      	mov	r0, r6
 800982e:	47c0      	blx	r8
 8009830:	4307      	orrs	r7, r0
 8009832:	3568      	adds	r5, #104	; 0x68
 8009834:	e7e9      	b.n	800980a <_fwalk_reent+0x12>

08009836 <__retarget_lock_init_recursive>:
 8009836:	4770      	bx	lr

08009838 <__retarget_lock_acquire_recursive>:
 8009838:	4770      	bx	lr

0800983a <__retarget_lock_release_recursive>:
 800983a:	4770      	bx	lr

0800983c <__swhatbuf_r>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	460e      	mov	r6, r1
 8009840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009844:	2900      	cmp	r1, #0
 8009846:	b096      	sub	sp, #88	; 0x58
 8009848:	4614      	mov	r4, r2
 800984a:	461d      	mov	r5, r3
 800984c:	da08      	bge.n	8009860 <__swhatbuf_r+0x24>
 800984e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009852:	2200      	movs	r2, #0
 8009854:	602a      	str	r2, [r5, #0]
 8009856:	061a      	lsls	r2, r3, #24
 8009858:	d410      	bmi.n	800987c <__swhatbuf_r+0x40>
 800985a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800985e:	e00e      	b.n	800987e <__swhatbuf_r+0x42>
 8009860:	466a      	mov	r2, sp
 8009862:	f000 f903 	bl	8009a6c <_fstat_r>
 8009866:	2800      	cmp	r0, #0
 8009868:	dbf1      	blt.n	800984e <__swhatbuf_r+0x12>
 800986a:	9a01      	ldr	r2, [sp, #4]
 800986c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009870:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009874:	425a      	negs	r2, r3
 8009876:	415a      	adcs	r2, r3
 8009878:	602a      	str	r2, [r5, #0]
 800987a:	e7ee      	b.n	800985a <__swhatbuf_r+0x1e>
 800987c:	2340      	movs	r3, #64	; 0x40
 800987e:	2000      	movs	r0, #0
 8009880:	6023      	str	r3, [r4, #0]
 8009882:	b016      	add	sp, #88	; 0x58
 8009884:	bd70      	pop	{r4, r5, r6, pc}
	...

08009888 <__smakebuf_r>:
 8009888:	898b      	ldrh	r3, [r1, #12]
 800988a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800988c:	079d      	lsls	r5, r3, #30
 800988e:	4606      	mov	r6, r0
 8009890:	460c      	mov	r4, r1
 8009892:	d507      	bpl.n	80098a4 <__smakebuf_r+0x1c>
 8009894:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	6123      	str	r3, [r4, #16]
 800989c:	2301      	movs	r3, #1
 800989e:	6163      	str	r3, [r4, #20]
 80098a0:	b002      	add	sp, #8
 80098a2:	bd70      	pop	{r4, r5, r6, pc}
 80098a4:	ab01      	add	r3, sp, #4
 80098a6:	466a      	mov	r2, sp
 80098a8:	f7ff ffc8 	bl	800983c <__swhatbuf_r>
 80098ac:	9900      	ldr	r1, [sp, #0]
 80098ae:	4605      	mov	r5, r0
 80098b0:	4630      	mov	r0, r6
 80098b2:	f7ff f957 	bl	8008b64 <_malloc_r>
 80098b6:	b948      	cbnz	r0, 80098cc <__smakebuf_r+0x44>
 80098b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098bc:	059a      	lsls	r2, r3, #22
 80098be:	d4ef      	bmi.n	80098a0 <__smakebuf_r+0x18>
 80098c0:	f023 0303 	bic.w	r3, r3, #3
 80098c4:	f043 0302 	orr.w	r3, r3, #2
 80098c8:	81a3      	strh	r3, [r4, #12]
 80098ca:	e7e3      	b.n	8009894 <__smakebuf_r+0xc>
 80098cc:	4b0d      	ldr	r3, [pc, #52]	; (8009904 <__smakebuf_r+0x7c>)
 80098ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	6020      	str	r0, [r4, #0]
 80098d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098d8:	81a3      	strh	r3, [r4, #12]
 80098da:	9b00      	ldr	r3, [sp, #0]
 80098dc:	6163      	str	r3, [r4, #20]
 80098de:	9b01      	ldr	r3, [sp, #4]
 80098e0:	6120      	str	r0, [r4, #16]
 80098e2:	b15b      	cbz	r3, 80098fc <__smakebuf_r+0x74>
 80098e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098e8:	4630      	mov	r0, r6
 80098ea:	f000 f8d1 	bl	8009a90 <_isatty_r>
 80098ee:	b128      	cbz	r0, 80098fc <__smakebuf_r+0x74>
 80098f0:	89a3      	ldrh	r3, [r4, #12]
 80098f2:	f023 0303 	bic.w	r3, r3, #3
 80098f6:	f043 0301 	orr.w	r3, r3, #1
 80098fa:	81a3      	strh	r3, [r4, #12]
 80098fc:	89a0      	ldrh	r0, [r4, #12]
 80098fe:	4305      	orrs	r5, r0
 8009900:	81a5      	strh	r5, [r4, #12]
 8009902:	e7cd      	b.n	80098a0 <__smakebuf_r+0x18>
 8009904:	08009695 	.word	0x08009695

08009908 <_malloc_usable_size_r>:
 8009908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800990c:	1f18      	subs	r0, r3, #4
 800990e:	2b00      	cmp	r3, #0
 8009910:	bfbc      	itt	lt
 8009912:	580b      	ldrlt	r3, [r1, r0]
 8009914:	18c0      	addlt	r0, r0, r3
 8009916:	4770      	bx	lr

08009918 <_raise_r>:
 8009918:	291f      	cmp	r1, #31
 800991a:	b538      	push	{r3, r4, r5, lr}
 800991c:	4604      	mov	r4, r0
 800991e:	460d      	mov	r5, r1
 8009920:	d904      	bls.n	800992c <_raise_r+0x14>
 8009922:	2316      	movs	r3, #22
 8009924:	6003      	str	r3, [r0, #0]
 8009926:	f04f 30ff 	mov.w	r0, #4294967295
 800992a:	bd38      	pop	{r3, r4, r5, pc}
 800992c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800992e:	b112      	cbz	r2, 8009936 <_raise_r+0x1e>
 8009930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009934:	b94b      	cbnz	r3, 800994a <_raise_r+0x32>
 8009936:	4620      	mov	r0, r4
 8009938:	f000 f830 	bl	800999c <_getpid_r>
 800993c:	462a      	mov	r2, r5
 800993e:	4601      	mov	r1, r0
 8009940:	4620      	mov	r0, r4
 8009942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009946:	f000 b817 	b.w	8009978 <_kill_r>
 800994a:	2b01      	cmp	r3, #1
 800994c:	d00a      	beq.n	8009964 <_raise_r+0x4c>
 800994e:	1c59      	adds	r1, r3, #1
 8009950:	d103      	bne.n	800995a <_raise_r+0x42>
 8009952:	2316      	movs	r3, #22
 8009954:	6003      	str	r3, [r0, #0]
 8009956:	2001      	movs	r0, #1
 8009958:	e7e7      	b.n	800992a <_raise_r+0x12>
 800995a:	2400      	movs	r4, #0
 800995c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009960:	4628      	mov	r0, r5
 8009962:	4798      	blx	r3
 8009964:	2000      	movs	r0, #0
 8009966:	e7e0      	b.n	800992a <_raise_r+0x12>

08009968 <raise>:
 8009968:	4b02      	ldr	r3, [pc, #8]	; (8009974 <raise+0xc>)
 800996a:	4601      	mov	r1, r0
 800996c:	6818      	ldr	r0, [r3, #0]
 800996e:	f7ff bfd3 	b.w	8009918 <_raise_r>
 8009972:	bf00      	nop
 8009974:	20000014 	.word	0x20000014

08009978 <_kill_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	4d07      	ldr	r5, [pc, #28]	; (8009998 <_kill_r+0x20>)
 800997c:	2300      	movs	r3, #0
 800997e:	4604      	mov	r4, r0
 8009980:	4608      	mov	r0, r1
 8009982:	4611      	mov	r1, r2
 8009984:	602b      	str	r3, [r5, #0]
 8009986:	f7f8 f853 	bl	8001a30 <_kill>
 800998a:	1c43      	adds	r3, r0, #1
 800998c:	d102      	bne.n	8009994 <_kill_r+0x1c>
 800998e:	682b      	ldr	r3, [r5, #0]
 8009990:	b103      	cbz	r3, 8009994 <_kill_r+0x1c>
 8009992:	6023      	str	r3, [r4, #0]
 8009994:	bd38      	pop	{r3, r4, r5, pc}
 8009996:	bf00      	nop
 8009998:	20000360 	.word	0x20000360

0800999c <_getpid_r>:
 800999c:	f7f8 b840 	b.w	8001a20 <_getpid>

080099a0 <__sread>:
 80099a0:	b510      	push	{r4, lr}
 80099a2:	460c      	mov	r4, r1
 80099a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a8:	f000 f894 	bl	8009ad4 <_read_r>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	bfab      	itete	ge
 80099b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099b2:	89a3      	ldrhlt	r3, [r4, #12]
 80099b4:	181b      	addge	r3, r3, r0
 80099b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099ba:	bfac      	ite	ge
 80099bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80099be:	81a3      	strhlt	r3, [r4, #12]
 80099c0:	bd10      	pop	{r4, pc}

080099c2 <__swrite>:
 80099c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099c6:	461f      	mov	r7, r3
 80099c8:	898b      	ldrh	r3, [r1, #12]
 80099ca:	05db      	lsls	r3, r3, #23
 80099cc:	4605      	mov	r5, r0
 80099ce:	460c      	mov	r4, r1
 80099d0:	4616      	mov	r6, r2
 80099d2:	d505      	bpl.n	80099e0 <__swrite+0x1e>
 80099d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d8:	2302      	movs	r3, #2
 80099da:	2200      	movs	r2, #0
 80099dc:	f000 f868 	bl	8009ab0 <_lseek_r>
 80099e0:	89a3      	ldrh	r3, [r4, #12]
 80099e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	4632      	mov	r2, r6
 80099ee:	463b      	mov	r3, r7
 80099f0:	4628      	mov	r0, r5
 80099f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099f6:	f000 b817 	b.w	8009a28 <_write_r>

080099fa <__sseek>:
 80099fa:	b510      	push	{r4, lr}
 80099fc:	460c      	mov	r4, r1
 80099fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a02:	f000 f855 	bl	8009ab0 <_lseek_r>
 8009a06:	1c43      	adds	r3, r0, #1
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	bf15      	itete	ne
 8009a0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a16:	81a3      	strheq	r3, [r4, #12]
 8009a18:	bf18      	it	ne
 8009a1a:	81a3      	strhne	r3, [r4, #12]
 8009a1c:	bd10      	pop	{r4, pc}

08009a1e <__sclose>:
 8009a1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a22:	f000 b813 	b.w	8009a4c <_close_r>
	...

08009a28 <_write_r>:
 8009a28:	b538      	push	{r3, r4, r5, lr}
 8009a2a:	4d07      	ldr	r5, [pc, #28]	; (8009a48 <_write_r+0x20>)
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	4608      	mov	r0, r1
 8009a30:	4611      	mov	r1, r2
 8009a32:	2200      	movs	r2, #0
 8009a34:	602a      	str	r2, [r5, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	f7f8 f831 	bl	8001a9e <_write>
 8009a3c:	1c43      	adds	r3, r0, #1
 8009a3e:	d102      	bne.n	8009a46 <_write_r+0x1e>
 8009a40:	682b      	ldr	r3, [r5, #0]
 8009a42:	b103      	cbz	r3, 8009a46 <_write_r+0x1e>
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	bd38      	pop	{r3, r4, r5, pc}
 8009a48:	20000360 	.word	0x20000360

08009a4c <_close_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	4d06      	ldr	r5, [pc, #24]	; (8009a68 <_close_r+0x1c>)
 8009a50:	2300      	movs	r3, #0
 8009a52:	4604      	mov	r4, r0
 8009a54:	4608      	mov	r0, r1
 8009a56:	602b      	str	r3, [r5, #0]
 8009a58:	f7f8 f83d 	bl	8001ad6 <_close>
 8009a5c:	1c43      	adds	r3, r0, #1
 8009a5e:	d102      	bne.n	8009a66 <_close_r+0x1a>
 8009a60:	682b      	ldr	r3, [r5, #0]
 8009a62:	b103      	cbz	r3, 8009a66 <_close_r+0x1a>
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	bd38      	pop	{r3, r4, r5, pc}
 8009a68:	20000360 	.word	0x20000360

08009a6c <_fstat_r>:
 8009a6c:	b538      	push	{r3, r4, r5, lr}
 8009a6e:	4d07      	ldr	r5, [pc, #28]	; (8009a8c <_fstat_r+0x20>)
 8009a70:	2300      	movs	r3, #0
 8009a72:	4604      	mov	r4, r0
 8009a74:	4608      	mov	r0, r1
 8009a76:	4611      	mov	r1, r2
 8009a78:	602b      	str	r3, [r5, #0]
 8009a7a:	f7f8 f838 	bl	8001aee <_fstat>
 8009a7e:	1c43      	adds	r3, r0, #1
 8009a80:	d102      	bne.n	8009a88 <_fstat_r+0x1c>
 8009a82:	682b      	ldr	r3, [r5, #0]
 8009a84:	b103      	cbz	r3, 8009a88 <_fstat_r+0x1c>
 8009a86:	6023      	str	r3, [r4, #0]
 8009a88:	bd38      	pop	{r3, r4, r5, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20000360 	.word	0x20000360

08009a90 <_isatty_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d06      	ldr	r5, [pc, #24]	; (8009aac <_isatty_r+0x1c>)
 8009a94:	2300      	movs	r3, #0
 8009a96:	4604      	mov	r4, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	602b      	str	r3, [r5, #0]
 8009a9c:	f7f8 f837 	bl	8001b0e <_isatty>
 8009aa0:	1c43      	adds	r3, r0, #1
 8009aa2:	d102      	bne.n	8009aaa <_isatty_r+0x1a>
 8009aa4:	682b      	ldr	r3, [r5, #0]
 8009aa6:	b103      	cbz	r3, 8009aaa <_isatty_r+0x1a>
 8009aa8:	6023      	str	r3, [r4, #0]
 8009aaa:	bd38      	pop	{r3, r4, r5, pc}
 8009aac:	20000360 	.word	0x20000360

08009ab0 <_lseek_r>:
 8009ab0:	b538      	push	{r3, r4, r5, lr}
 8009ab2:	4d07      	ldr	r5, [pc, #28]	; (8009ad0 <_lseek_r+0x20>)
 8009ab4:	4604      	mov	r4, r0
 8009ab6:	4608      	mov	r0, r1
 8009ab8:	4611      	mov	r1, r2
 8009aba:	2200      	movs	r2, #0
 8009abc:	602a      	str	r2, [r5, #0]
 8009abe:	461a      	mov	r2, r3
 8009ac0:	f7f8 f830 	bl	8001b24 <_lseek>
 8009ac4:	1c43      	adds	r3, r0, #1
 8009ac6:	d102      	bne.n	8009ace <_lseek_r+0x1e>
 8009ac8:	682b      	ldr	r3, [r5, #0]
 8009aca:	b103      	cbz	r3, 8009ace <_lseek_r+0x1e>
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	bd38      	pop	{r3, r4, r5, pc}
 8009ad0:	20000360 	.word	0x20000360

08009ad4 <_read_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4d07      	ldr	r5, [pc, #28]	; (8009af4 <_read_r+0x20>)
 8009ad8:	4604      	mov	r4, r0
 8009ada:	4608      	mov	r0, r1
 8009adc:	4611      	mov	r1, r2
 8009ade:	2200      	movs	r2, #0
 8009ae0:	602a      	str	r2, [r5, #0]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f7f7 ffbe 	bl	8001a64 <_read>
 8009ae8:	1c43      	adds	r3, r0, #1
 8009aea:	d102      	bne.n	8009af2 <_read_r+0x1e>
 8009aec:	682b      	ldr	r3, [r5, #0]
 8009aee:	b103      	cbz	r3, 8009af2 <_read_r+0x1e>
 8009af0:	6023      	str	r3, [r4, #0]
 8009af2:	bd38      	pop	{r3, r4, r5, pc}
 8009af4:	20000360 	.word	0x20000360

08009af8 <_init>:
 8009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afa:	bf00      	nop
 8009afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009afe:	bc08      	pop	{r3}
 8009b00:	469e      	mov	lr, r3
 8009b02:	4770      	bx	lr

08009b04 <_fini>:
 8009b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b06:	bf00      	nop
 8009b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b0a:	bc08      	pop	{r3}
 8009b0c:	469e      	mov	lr, r3
 8009b0e:	4770      	bx	lr
